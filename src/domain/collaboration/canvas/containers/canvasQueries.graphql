fragment CanvasDetails on Canvas {
  id
  nameID
  createdDate
  profile {
    id
    displayName
    visual(type: CARD) {
      ...VisualFull
    }
  }
  authorization {
    id
    myPrivileges
    anonymousReadAccess
  }
  checkout {
    ...CheckoutDetails
  }
  createdBy {
    id
    profile {
      id
      displayName
      visual(type: AVATAR) {
        id
        uri
      }
    }
  }
}

fragment CanvasSummary on Canvas {
  id
  nameID
  createdDate
  profile {
    id
    displayName
  }
}

fragment CanvasValue on Canvas {
  id
  value
}

fragment CheckoutDetails on CanvasCheckout {
  id
  lockedBy
  status
  lifecycle {
    id
    nextEvents
  }
  authorization {
    id
    myPrivileges
  }
}

query canvasTemplates($hubId: UUID_NAMEID!) {
  hub(ID: $hubId) {
    id
    templates {
      id
      canvasTemplates {
        ...CreateCanvasCanvasTemplate
      }
    }
  }
}

fragment CreateCanvasCanvasTemplate on CanvasTemplate {
  id
  profile {
    id
    displayName
    description
  }
  value
}

fragment CalloutWithCanvas on Collaboration {
  id
  callouts(IDs: [$calloutId]) {
    id
    nameID
    type
    authorization {
      id
      anonymousReadAccess
      myPrivileges
    }
    canvases(IDs: [$canvasId]) {
      ...CanvasDetails
    }
  }
}

fragment CollaborationWithCanvasDetails on Collaboration {
  id
  callouts {
    id
    nameID
    type
    authorization {
      id
      anonymousReadAccess
      myPrivileges
    }
    canvases {
      ...CanvasDetails
    }
  }
}

query hubCanvasFromCallout($hubId: UUID_NAMEID!, $calloutId: UUID_NAMEID!, $canvasId: UUID_NAMEID!) {
  hub(ID: $hubId) {
    id
    collaboration {
      ...CalloutWithCanvas
    }
  }
}

query hubCanvases($hubId: UUID_NAMEID!) {
  hub(ID: $hubId) {
    id
    collaboration {
      ...CollaborationWithCanvasDetails
    }
  }
}

query hubCanvasValues($hubId: UUID_NAMEID!, $calloutId: UUID_NAMEID!, $canvasId: UUID_NAMEID!) {
  hub(ID: $hubId) {
    id
    collaboration {
      id
      callouts(IDs: [$calloutId]) {
        id
        type
        authorization {
          id
          myPrivileges
        }
        canvases(IDs: [$canvasId]) {
          ...CanvasDetails
          ...CanvasValue
        }
      }
    }
  }
}

query challengeCanvasFromCallout(
  $hubId: UUID_NAMEID!
  $challengeId: UUID_NAMEID!
  $calloutId: UUID_NAMEID!
  $canvasId: UUID_NAMEID!
) {
  hub(ID: $hubId) {
    id
    challenge(ID: $challengeId) {
      id
      collaboration {
        ...CalloutWithCanvas
      }
    }
  }
}

query challengeCanvasValues(
  $hubId: UUID_NAMEID!
  $challengeId: UUID_NAMEID!
  $calloutId: UUID_NAMEID!
  $canvasId: UUID_NAMEID!
) {
  hub(ID: $hubId) {
    id
    challenge(ID: $challengeId) {
      id
      collaboration {
        id
        callouts(IDs: [$calloutId]) {
          id
          type
          authorization {
            id
            myPrivileges
          }
          canvases(IDs: [$canvasId]) {
            ...CanvasDetails
            ...CanvasValue
          }
        }
      }
    }
  }
}

query opportunityCanvasFromCallout(
  $hubId: UUID_NAMEID!
  $opportunityId: UUID_NAMEID!
  $calloutId: UUID_NAMEID!
  $canvasId: UUID_NAMEID!
) {
  hub(ID: $hubId) {
    id
    opportunity(ID: $opportunityId) {
      id
      collaboration {
        ...CalloutWithCanvas
      }
    }
  }
}

query opportunityCanvasValues(
  $hubId: UUID_NAMEID!
  $opportunityId: UUID_NAMEID!
  $calloutId: UUID_NAMEID!
  $canvasId: UUID_NAMEID!
) {
  hub(ID: $hubId) {
    id
    opportunity(ID: $opportunityId) {
      id
      collaboration {
        id
        callouts(IDs: [$calloutId]) {
          id
          type
          authorization {
            id
            myPrivileges
          }
          canvases(IDs: [$canvasId]) {
            ...CanvasDetails
            ...CanvasValue
          }
        }
      }
    }
  }
}

mutation createCanvasOnCallout($input: CreateCanvasOnCalloutInput!) {
  createCanvasOnCallout(canvasData: $input) {
    ...CanvasDetails
  }
}

mutation deleteCanvas($input: DeleteCanvasInput!) {
  deleteCanvas(canvasData: $input) {
    id
  }
}

mutation updateCanvas($input: UpdateCanvasDirectInput!) {
  updateCanvas(canvasData: $input) {
    id
    value
    profile {
      id
      displayName
    }
  }
}

mutation checkoutCanvas($input: CanvasCheckoutEventInput!) {
  eventOnCanvasCheckout(canvasCheckoutEventData: $input) {
    ...CheckoutDetails
  }
}

subscription canvasContentUpdated {
  canvasContentUpdated {
    canvasID
    value
  }
}
