fragment WhiteboardProfile on Profile {
  id
  url
  displayName
  description
  visual(type: CARD) {
    ...VisualModelFull
  }
  preview: visual(type: BANNER) {
    ...VisualModelFull
  }
  tagset {
    ...TagsetDetails
  }
  storageBucket {
    id
  }
}

fragment WhiteboardDetails on Whiteboard {
  id
  nameID # Used to name the screenshots uploaded as visuals (banner, card, etc.)
  createdDate
  profile {
    ...WhiteboardProfile
  }
  authorization {
    id
    myPrivileges
  }
  contentUpdatePolicy
  createdBy {
    id
    profile {
      id
      displayName
      url
      location {
        id
        country
        city
      }
      avatar: visual(type: AVATAR) {
        ...VisualModel
      }
    }
  }
}

fragment WhiteboardContent on Whiteboard {
  id
  content
}

fragment CollaborationWithWhiteboardDetails on Collaboration {
  id
  calloutsSet {
    id
    callouts {
      id
      authorization {
        id
        myPrivileges
      }
      contributions {
        whiteboard {
          ...WhiteboardDetails
        }
      }
      framing {
        id
        type
        whiteboard {
          ...WhiteboardDetails
        }
      }
    }
  }
}

query WhiteboardFromCallout($calloutId: UUID!, $contributionId: UUID!) {
  lookup {
    callout(ID: $calloutId) {
      id
      authorization {
        id
        myPrivileges
      }
      contributions(IDs: [$contributionId]) {
        id
        whiteboard {
          ...WhiteboardDetails
        }
      }
    }
  }
}

query whiteboardLastUpdatedDate($whiteboardId: UUID!) {
  lookup {
    whiteboard(ID: $whiteboardId) {
      id
      updatedDate
    }
  }
}

mutation deleteWhiteboard($input: DeleteWhiteboardInput!) {
  deleteWhiteboard(whiteboardData: $input) {
    id
  }
}

mutation DeleteWhiteboardAsContribution($ID: UUID!) {
  deleteWhiteboardAsContribution(ID: $ID) {
    id
  }
}

mutation updateWhiteboard($input: UpdateWhiteboardEntityInput!) {
  updateWhiteboard(whiteboardData: $input) {
    id
    profile {
      id
      displayName
    }
  }
}
