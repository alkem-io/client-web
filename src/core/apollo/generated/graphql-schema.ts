export type Maybe<T> = T | undefined;
export type InputMaybe<T> = T | undefined;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  DID: { input: string; output: string };
  DateTime: { input: Date; output: Date };
  Emoji: { input: string; output: string };
  JSON: { input: string; output: string };
  LifecycleDefinition: { input: string; output: string };
  Markdown: { input: string; output: string };
  MessageID: { input: string; output: string };
  NameID: { input: string; output: string };
  SearchCursor: { input: string; output: string };
  UUID: { input: string; output: string };
  Upload: { input: File; output: File };
  WhiteboardContent: { input: string; output: string };
};

export type Apm = {
  __typename?: 'APM';
  /** Endpoint where events are sent. */
  endpoint: Scalars['String']['output'];
  /** Flag indicating if real user monitoring is enabled. */
  rumEnabled: Scalars['Boolean']['output'];
};

export type Account = {
  __typename?: 'Account';
  /** The Agent representing this Account. */
  agent: Agent;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The base license plan assigned to this Account. Additional entitlements may be added via other means. */
  baselineLicensePlan: AccountLicensePlan;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The external subscription ID for this Account. */
  externalSubscriptionID?: Maybe<Scalars['String']['output']>;
  /** The Account host. */
  host?: Maybe<Contributor>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The InnovationHubs for this Account. */
  innovationHubs: Array<InnovationHub>;
  /** The InnovationPacks for this Account. */
  innovationPacks: Array<InnovationPack>;
  /** The License operating on this Account. */
  license: License;
  /** The Spaces within this Account. */
  spaces: Array<Space>;
  /** The StorageAggregator in use by this Account */
  storageAggregator: StorageAggregator;
  /** The subscriptions active for this Account. */
  subscriptions: Array<AccountSubscription>;
  /** A type of entity that this Account is being used with. */
  type?: Maybe<AccountType>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The virtual contributors for this Account. */
  virtualContributors: Array<VirtualContributor>;
};

export type AccountAuthorizationResetInput = {
  /** The identifier of the Account whose Authorization Policy should be reset. */
  accountID: Scalars['UUID']['input'];
};

export type AccountLicensePlan = {
  __typename?: 'AccountLicensePlan';
  /** The number of Innovation Packs allowed. */
  innovationPacks: Scalars['Int']['output'];
  /** The number of Free Spaces allowed. */
  spaceFree: Scalars['Int']['output'];
  /** The number of Plus Spaces allowed. */
  spacePlus: Scalars['Int']['output'];
  /** The number of Premium Spaces allowed. */
  spacePremium: Scalars['Int']['output'];
  /** The number of Starting Pages allowed. */
  startingPages: Scalars['Int']['output'];
  /** The number of Virtual Contributors allowed. */
  virtualContributor: Scalars['Int']['output'];
};

export type AccountLicenseResetInput = {
  /** The identifier of the Account whose License and Entitlements should be reset. */
  accountID: Scalars['UUID']['input'];
};

export type AccountSubscription = {
  __typename?: 'AccountSubscription';
  /** The expiry date of this subscription, null if it does never expire. */
  expires?: Maybe<Scalars['DateTime']['output']>;
  /** The name of the Subscription. */
  name: LicensingCredentialBasedCredentialType;
};

export enum AccountType {
  Organization = 'ORGANIZATION',
  User = 'USER',
}

export type ActivityCreatedSubscriptionInput = {
  /** The collaboration on which to subscribe for new activity */
  collaborationID: Scalars['UUID']['input'];
  /** Include activities happened on child Collaborations. */
  includeChild?: InputMaybe<Scalars['Boolean']['input']>;
  /** Which activity types to include in the results. Returns all by default. */
  types?: InputMaybe<Array<ActivityEventType>>;
};

export type ActivityCreatedSubscriptionResult = {
  __typename?: 'ActivityCreatedSubscriptionResult';
  /** The newly created activity */
  activity: ActivityLogEntry;
};

export enum ActivityEventType {
  CalendarEventCreated = 'CALENDAR_EVENT_CREATED',
  CalloutLinkCreated = 'CALLOUT_LINK_CREATED',
  CalloutPostComment = 'CALLOUT_POST_COMMENT',
  CalloutPostCreated = 'CALLOUT_POST_CREATED',
  CalloutPublished = 'CALLOUT_PUBLISHED',
  CalloutWhiteboardContentModified = 'CALLOUT_WHITEBOARD_CONTENT_MODIFIED',
  CalloutWhiteboardCreated = 'CALLOUT_WHITEBOARD_CREATED',
  DiscussionComment = 'DISCUSSION_COMMENT',
  MemberJoined = 'MEMBER_JOINED',
  SubspaceCreated = 'SUBSPACE_CREATED',
  UpdateSent = 'UPDATE_SENT',
}

export type ActivityFeed = {
  __typename?: 'ActivityFeed';
  activityFeed: Array<ActivityLogEntry>;
  pageInfo: PageInfo;
  total: Scalars['Float']['output'];
};

export type ActivityFeedGroupedQueryArgs = {
  /** What events to exclude. */
  excludeTypes?: InputMaybe<Array<ActivityEventType>>;
  /** Number of activities to return. */
  limit?: InputMaybe<Scalars['Float']['input']>;
  /** Returns only events that the current user triggered; Includes all by default. */
  myActivity?: InputMaybe<Scalars['Boolean']['input']>;
  /** Activity from which Spaces to include; Includes all by default. */
  roles?: InputMaybe<Array<ActivityFeedRoles>>;
  /** Activity from which Spaces to include; Includes all by default. */
  spaceIds?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** What events to include; Includes all by default. */
  types?: InputMaybe<Array<ActivityEventType>>;
};

export type ActivityFeedQueryArgs = {
  /** What events to exclude. */
  excludeTypes?: InputMaybe<Array<ActivityEventType>>;
  /** Returns only events that the current user triggered; Includes all by default. */
  myActivity?: InputMaybe<Scalars['Boolean']['input']>;
  /** Activity from which Spaces to include; Includes all by default. */
  roles?: InputMaybe<Array<ActivityFeedRoles>>;
  /** Activity from which Spaces to include; Includes all by default. */
  spaceIds?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** What events to include; Includes all by default. */
  types?: InputMaybe<Array<ActivityEventType>>;
};

export enum ActivityFeedRoles {
  Admin = 'ADMIN',
  Lead = 'LEAD',
  Member = 'MEMBER',
}

export type ActivityLogEntry = {
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalendarEventCreated = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryCalendarEventCreated';
  /** The Calendar in which the CalendarEvent was created. */
  calendar: Calendar;
  /** The CalendarEvent that was created. */
  calendarEvent: CalendarEvent;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutDiscussionComment = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryCalloutDiscussionComment';
  /** The Callout in which the comment was added. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutLinkCreated = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryCalloutLinkCreated';
  /** The Callout in which the Link was created. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The Link that was created. */
  link: Link;
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutPostComment = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryCalloutPostComment';
  /** The Callout in which the Post was commented. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Post that was commented on. */
  post: Post;
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutPostCreated = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryCalloutPostCreated';
  /** The Callout in which the Post was created. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Post that was created. */
  post: Post;
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutPublished = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryCalloutPublished';
  /** The Callout that was published. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryCalloutWhiteboardContentModified = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryCalloutWhiteboardContentModified';
  /** The Callout in which the Whiteboard was updated. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
  /** The Whiteboard that was updated. */
  whiteboard: Whiteboard;
};

export type ActivityLogEntryCalloutWhiteboardCreated = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryCalloutWhiteboardCreated';
  /** The Callout in which the Whiteboard was created. */
  callout: Callout;
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
  /** The Whiteboard that was created. */
  whiteboard: Whiteboard;
};

export type ActivityLogEntryMemberJoined = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryMemberJoined';
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The community that was joined. */
  community: Community;
  /** The Contributor that joined the Community. */
  contributor: Contributor;
  /** The type of the Contributor that joined the Community. */
  contributorType: RoleSetContributorType;
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntrySubspaceCreated = ActivityLogEntry & {
  __typename?: 'ActivityLogEntrySubspaceCreated';
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The Subspace that was created. */
  subspace: Space;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
};

export type ActivityLogEntryUpdateSent = ActivityLogEntry & {
  __typename?: 'ActivityLogEntryUpdateSent';
  /** Indicates if this Activity happened on a child Collaboration. Child results can be included via the "includeChild" parameter. */
  child: Scalars['Boolean']['output'];
  /** The id of the Collaboration entity within which the Activity was generated. */
  collaborationID: Scalars['UUID']['output'];
  /** The timestamp for the Activity. */
  createdDate: Scalars['DateTime']['output'];
  /** The text details for this Activity. */
  description: Scalars['String']['output'];
  id: Scalars['UUID']['output'];
  /** The url to the Journey. */
  journeyUrl: Scalars['String']['output'];
  /** The Message that been sent to this Community. */
  message: Scalars['String']['output'];
  /** The display name of the parent */
  parentDisplayName: Scalars['String']['output'];
  /** The Space where the activity happened */
  space?: Maybe<Space>;
  /** The user that triggered this Activity. */
  triggeredBy: User;
  /** The event type for this Activity. */
  type: ActivityEventType;
  /** The Updates for this Community. */
  updates: Room;
};

export type ActivityLogInput = {
  /** Display the activityLog results for the specified Collaboration. */
  collaborationID: Scalars['UUID']['input'];
  /** Include entries happened on child Collaborations. */
  includeChild?: InputMaybe<Scalars['Boolean']['input']>;
  /** The number of ActivityLog entries to return; if omitted return all. */
  limit?: InputMaybe<Scalars['Float']['input']>;
  /** Which activity types to include in the results. Returns all by default. */
  types?: InputMaybe<Array<ActivityEventType>>;
};

export type Agent = {
  __typename?: 'Agent';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The Credentials held by this Agent. */
  credentials?: Maybe<Array<Credential>>;
  /** The Decentralized Identifier (DID) for this Agent. */
  did?: Maybe<Scalars['DID']['output']>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** A type of entity that this Agent is being used with. */
  type: AgentType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The Verfied Credentials for this Agent. */
  verifiedCredentials?: Maybe<Array<VerifiedCredential>>;
};

export type AgentBeginVerifiedCredentialOfferOutput = {
  __typename?: 'AgentBeginVerifiedCredentialOfferOutput';
  /** The token containing the information about issuer, callback endpoint and the credentials offered */
  jwt: Scalars['String']['output'];
  /** The QR Code Image to be offered on the client for scanning by a mobile wallet */
  qrCodeImg: Scalars['String']['output'];
};

export type AgentBeginVerifiedCredentialRequestOutput = {
  __typename?: 'AgentBeginVerifiedCredentialRequestOutput';
  /** The token containing the information about issuer, callback endpoint and the credentials offered */
  jwt: Scalars['String']['output'];
  /** The QR Code Image to be offered on the client for scanning by a mobile wallet */
  qrCodeImg: Scalars['String']['output'];
};

export enum AgentType {
  Account = 'ACCOUNT',
  Organization = 'ORGANIZATION',
  Space = 'SPACE',
  User = 'USER',
  VirtualContributor = 'VIRTUAL_CONTRIBUTOR',
}

export type AiPersona = {
  __typename?: 'AiPersona';
  /** The ID of the AiPersonaService. */
  aiPersonaServiceID?: Maybe<Scalars['String']['output']>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** A overview of knowledge provided by this AI Persona. */
  bodyOfKnowledge?: Maybe<Scalars['Markdown']['output']>;
  /** The body of knowledge ID used for the AI Persona. */
  bodyOfKnowledgeID?: Maybe<Scalars['String']['output']>;
  /** The body of knowledge type used for the AI Persona. */
  bodyOfKnowledgeType?: Maybe<AiPersonaBodyOfKnowledgeType>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The type of context sharing that are supported by this AI Persona when used. */
  dataAccessMode: AiPersonaDataAccessMode;
  /** The description for this AI Persona. */
  description?: Maybe<Scalars['Markdown']['output']>;
  /** The engine powering the AiPersona. */
  engine: AiPersonaEngine;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The type of interactions that are supported by this AI Persona when used. */
  interactionModes: Array<AiPersonaInteractionMode>;
  /** The model card information about this AI Persona. */
  modelCard: AiPersonaModelCard;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export enum AiPersonaBodyOfKnowledgeType {
  AlkemioKnowledgeBase = 'ALKEMIO_KNOWLEDGE_BASE',
  AlkemioSpace = 'ALKEMIO_SPACE',
  None = 'NONE',
  Other = 'OTHER',
  Website = 'WEBSITE',
}

export enum AiPersonaDataAccessMode {
  None = 'NONE',
  SpaceProfile = 'SPACE_PROFILE',
  SpaceProfileAndContents = 'SPACE_PROFILE_AND_CONTENTS',
}

export enum AiPersonaEngine {
  CommunityManager = 'COMMUNITY_MANAGER',
  Expert = 'EXPERT',
  GenericOpenai = 'GENERIC_OPENAI',
  Guidance = 'GUIDANCE',
  LibraFlow = 'LIBRA_FLOW',
  OpenaiAssistant = 'OPENAI_ASSISTANT',
}

export enum AiPersonaInteractionMode {
  DiscussionTagging = 'DISCUSSION_TAGGING',
}

export type AiPersonaModelCard = {
  __typename?: 'AiPersonaModelCard';
  /** The model card information about the AI Engine behind the AI Persona. */
  aiEngine?: Maybe<ModelCardAiEngineResult>;
  /** The model card information about the monitoring that is done on usage. */
  monitoring?: Maybe<ModelCardMonitoringResult>;
  /** The Model Card details related to usage of the Ai Persona within a Space. */
  spaceUsage?: Maybe<Array<ModelCardSpaceUsageResult>>;
};

export enum AiPersonaModelCardEntry {
  SpaceCapabilities = 'SPACE_CAPABILITIES',
  SpaceDataAccess = 'SPACE_DATA_ACCESS',
  SpaceRoleRequired = 'SPACE_ROLE_REQUIRED',
}

export enum AiPersonaModelCardEntryFlagName {
  SpaceCapabilityCommunityManagement = 'SPACE_CAPABILITY_COMMUNITY_MANAGEMENT',
  SpaceCapabilityCreateContent = 'SPACE_CAPABILITY_CREATE_CONTENT',
  SpaceCapabilityTagging = 'SPACE_CAPABILITY_TAGGING',
  SpaceDataAccessAbout = 'SPACE_DATA_ACCESS_ABOUT',
  SpaceDataAccessContent = 'SPACE_DATA_ACCESS_CONTENT',
  SpaceDataAccessSubspaces = 'SPACE_DATA_ACCESS_SUBSPACES',
  SpaceRoleAdmin = 'SPACE_ROLE_ADMIN',
  SpaceRoleMember = 'SPACE_ROLE_MEMBER',
}

export type AiPersonaModelCardFlag = {
  __typename?: 'AiPersonaModelCardFlag';
  /** Is this model card entry flag enabled? */
  enabled: Scalars['Boolean']['output'];
  /** The name of the Model Card Entry flag */
  name: AiPersonaModelCardEntryFlagName;
};

export type AiPersonaService = {
  __typename?: 'AiPersonaService';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The body of knowledge ID used for the AI Persona Service */
  bodyOfKnowledgeID?: Maybe<Scalars['UUID']['output']>;
  /** When wat the body of knowledge of the VC last updated. */
  bodyOfKnowledgeLastUpdated?: Maybe<Scalars['DateTime']['output']>;
  /** The body of knowledge type used for the AI Persona Service */
  bodyOfKnowledgeType: AiPersonaBodyOfKnowledgeType;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The required data access by the Virtual Persona */
  dataAccessMode: AiPersonaDataAccessMode;
  /** The AI Persona Engine being used by this AI Persona. */
  engine: AiPersonaEngine;
  /** The ExternalConfig for this Virtual. */
  externalConfig?: Maybe<ExternalConfig>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The prompt used by this Virtual Persona */
  prompt: Array<Scalars['String']['output']>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type AiServer = {
  __typename?: 'AiServer';
  /** A particular AiPersonaService */
  aiPersonaService: AiPersonaService;
  /** The AiPersonaServices on this aiServer */
  aiPersonaServices: Array<AiPersonaService>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The default AiPersonaService in use on the aiServer. */
  defaultAiPersonaService: AiPersonaService;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type AiServerAiPersonaServiceArgs = {
  ID: Scalars['UUID']['input'];
};

export type Application = {
  __typename?: 'Application';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The User for this Application. */
  contributor: Contributor;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Is this lifecycle in a final state (done). */
  isFinalized: Scalars['Boolean']['output'];
  lifecycle: Lifecycle;
  /** The next events of this Lifecycle. */
  nextEvents: Array<Scalars['String']['output']>;
  /** The Questions for this application. */
  questions: Array<Question>;
  /** The current state of this Lifecycle. */
  state: Scalars['String']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type ApplicationEventInput = {
  applicationID: Scalars['UUID']['input'];
  eventName: Scalars['String']['input'];
};

export type ApplyForEntryRoleOnRoleSetInput = {
  questions: Array<CreateNvpInput>;
  roleSetID: Scalars['UUID']['input'];
};

export type AssignLicensePlanToAccount = {
  /** The ID of the Account to assign the LicensePlan to. */
  accountID: Scalars['UUID']['input'];
  /** The ID of the LicensePlan to assign. */
  licensePlanID: Scalars['UUID']['input'];
  /** The ID of the Licensing to use. */
  licensingID?: InputMaybe<Scalars['UUID']['input']>;
};

export type AssignLicensePlanToSpace = {
  /** The ID of the LicensePlan to assign. */
  licensePlanID: Scalars['UUID']['input'];
  /** The ID of the Licensing to use. */
  licensingID?: InputMaybe<Scalars['UUID']['input']>;
  /** The ID of the Space to assign the LicensePlan to. */
  spaceID: Scalars['UUID']['input'];
};

export type AssignPlatformRoleInput = {
  contributorID: Scalars['UUID']['input'];
  role: RoleName;
};

export type AssignRoleOnRoleSetToOrganizationInput = {
  contributorID: Scalars['UUID']['input'];
  role: RoleName;
  roleSetID: Scalars['UUID']['input'];
};

export type AssignRoleOnRoleSetToUserInput = {
  contributorID: Scalars['UUID']['input'];
  role: RoleName;
  roleSetID: Scalars['UUID']['input'];
};

export type AssignRoleOnRoleSetToVirtualContributorInput = {
  contributorID: Scalars['UUID']['input'];
  role: RoleName;
  roleSetID: Scalars['UUID']['input'];
};

export type AssignUserGroupMemberInput = {
  groupID: Scalars['UUID']['input'];
  userID: Scalars['UUID']['input'];
};

export type AuthenticationConfig = {
  __typename?: 'AuthenticationConfig';
  /** Alkemio Authentication Providers Config. */
  providers: Array<AuthenticationProviderConfig>;
};

export type AuthenticationProviderConfig = {
  __typename?: 'AuthenticationProviderConfig';
  /** Configuration of the authentication provider */
  config: AuthenticationProviderConfigUnion;
  /** Is the authentication provider enabled? */
  enabled: Scalars['Boolean']['output'];
  /** CDN location of an icon of the authentication provider login button. */
  icon: Scalars['String']['output'];
  /** Label of the authentication provider. */
  label: Scalars['String']['output'];
  /** Name of the authentication provider. */
  name: Scalars['String']['output'];
};

export type AuthenticationProviderConfigUnion = OryConfig;

export enum AuthenticationType {
  Email = 'EMAIL',
  Github = 'GITHUB',
  Linkedin = 'LINKEDIN',
  Microsoft = 'MICROSOFT',
  Unknown = 'UNKNOWN',
}

export type Authorization = {
  __typename?: 'Authorization';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The set of credential rules that are contained by this Authorization Policy. */
  credentialRules?: Maybe<Array<AuthorizationPolicyRuleCredential>>;
  /** Does the current User have the specified privilege based on this Authorization Policy. */
  hasPrivilege: Scalars['Boolean']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The privileges granted to the current user based on this Authorization Policy. */
  myPrivileges?: Maybe<Array<AuthorizationPrivilege>>;
  /** The set of privilege rules that are contained by this Authorization Policy. */
  privilegeRules?: Maybe<Array<AuthorizationPolicyRulePrivilege>>;
  /** A type of entity that this Authorization Policy is being used with. */
  type?: Maybe<AuthorizationPolicyType>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The set of verified credential rules that are contained by this Authorization Policy. */
  verifiedCredentialRules?: Maybe<Array<AuthorizationPolicyRuleVerifiedCredential>>;
};

export type AuthorizationHasPrivilegeArgs = {
  privilege: AuthorizationPrivilege;
};

export enum AuthorizationCredential {
  AccountAdmin = 'ACCOUNT_ADMIN',
  BetaTester = 'BETA_TESTER',
  GlobalAdmin = 'GLOBAL_ADMIN',
  GlobalAnonymous = 'GLOBAL_ANONYMOUS',
  GlobalCommunityRead = 'GLOBAL_COMMUNITY_READ',
  GlobalLicenseManager = 'GLOBAL_LICENSE_MANAGER',
  GlobalPlatformManager = 'GLOBAL_PLATFORM_MANAGER',
  GlobalRegistered = 'GLOBAL_REGISTERED',
  GlobalSpacesReader = 'GLOBAL_SPACES_READER',
  GlobalSupport = 'GLOBAL_SUPPORT',
  GlobalSupportManager = 'GLOBAL_SUPPORT_MANAGER',
  OrganizationAdmin = 'ORGANIZATION_ADMIN',
  OrganizationAssociate = 'ORGANIZATION_ASSOCIATE',
  OrganizationOwner = 'ORGANIZATION_OWNER',
  SpaceAdmin = 'SPACE_ADMIN',
  SpaceLead = 'SPACE_LEAD',
  SpaceMember = 'SPACE_MEMBER',
  SpaceMemberInvitee = 'SPACE_MEMBER_INVITEE',
  SpaceSubspaceAdmin = 'SPACE_SUBSPACE_ADMIN',
  UserGroupMember = 'USER_GROUP_MEMBER',
  UserSelfManagement = 'USER_SELF_MANAGEMENT',
  VcCampaign = 'VC_CAMPAIGN',
}

export type AuthorizationPolicyRuleCredential = {
  __typename?: 'AuthorizationPolicyRuleCredential';
  cascade: Scalars['Boolean']['output'];
  criterias: Array<CredentialDefinition>;
  grantedPrivileges: Array<AuthorizationPrivilege>;
  name?: Maybe<Scalars['String']['output']>;
};

export type AuthorizationPolicyRulePrivilege = {
  __typename?: 'AuthorizationPolicyRulePrivilege';
  grantedPrivileges: Array<AuthorizationPrivilege>;
  name?: Maybe<Scalars['String']['output']>;
  sourcePrivilege: AuthorizationPrivilege;
};

export type AuthorizationPolicyRuleVerifiedCredential = {
  __typename?: 'AuthorizationPolicyRuleVerifiedCredential';
  claimRule: Scalars['String']['output'];
  credentialName: Scalars['String']['output'];
  grantedPrivileges: Array<AuthorizationPrivilege>;
};

export enum AuthorizationPolicyType {
  Account = 'ACCOUNT',
  Agent = 'AGENT',
  AiPersona = 'AI_PERSONA',
  AiPersonaService = 'AI_PERSONA_SERVICE',
  AiServer = 'AI_SERVER',
  Application = 'APPLICATION',
  Calendar = 'CALENDAR',
  CalendarEvent = 'CALENDAR_EVENT',
  Callout = 'CALLOUT',
  CalloutsSet = 'CALLOUTS_SET',
  CalloutContribution = 'CALLOUT_CONTRIBUTION',
  CalloutFraming = 'CALLOUT_FRAMING',
  Classification = 'CLASSIFICATION',
  Collaboration = 'COLLABORATION',
  Communication = 'COMMUNICATION',
  Community = 'COMMUNITY',
  CommunityGuidelines = 'COMMUNITY_GUIDELINES',
  Discussion = 'DISCUSSION',
  Document = 'DOCUMENT',
  Forum = 'FORUM',
  InnovationFlow = 'INNOVATION_FLOW',
  InnovationFlowState = 'INNOVATION_FLOW_STATE',
  InnovationHub = 'INNOVATION_HUB',
  InnovationPack = 'INNOVATION_PACK',
  Invitation = 'INVITATION',
  InMemory = 'IN_MEMORY',
  KnowledgeBase = 'KNOWLEDGE_BASE',
  Library = 'LIBRARY',
  License = 'LICENSE',
  LicensePolicy = 'LICENSE_POLICY',
  Licensing = 'LICENSING',
  Link = 'LINK',
  Memo = 'MEMO',
  Organization = 'ORGANIZATION',
  OrganizationVerification = 'ORGANIZATION_VERIFICATION',
  Platform = 'PLATFORM',
  Post = 'POST',
  Profile = 'PROFILE',
  Reference = 'REFERENCE',
  RoleSet = 'ROLE_SET',
  Room = 'ROOM',
  Space = 'SPACE',
  SpaceAbout = 'SPACE_ABOUT',
  StorageAggregator = 'STORAGE_AGGREGATOR',
  StorageBucket = 'STORAGE_BUCKET',
  Tagset = 'TAGSET',
  Template = 'TEMPLATE',
  TemplatesManager = 'TEMPLATES_MANAGER',
  TemplatesSet = 'TEMPLATES_SET',
  TemplateContentSpace = 'TEMPLATE_CONTENT_SPACE',
  TemplateDefault = 'TEMPLATE_DEFAULT',
  Timeline = 'TIMELINE',
  Unknown = 'UNKNOWN',
  User = 'USER',
  UserGroup = 'USER_GROUP',
  UserSettings = 'USER_SETTINGS',
  VirtualContributor = 'VIRTUAL_CONTRIBUTOR',
  Visual = 'VISUAL',
  Whiteboard = 'WHITEBOARD',
}

export enum AuthorizationPrivilege {
  AccessInteractiveGuidance = 'ACCESS_INTERACTIVE_GUIDANCE',
  AccountLicenseManage = 'ACCOUNT_LICENSE_MANAGE',
  AuthorizationReset = 'AUTHORIZATION_RESET',
  CommunityAssignVcFromAccount = 'COMMUNITY_ASSIGN_VC_FROM_ACCOUNT',
  Contribute = 'CONTRIBUTE',
  Create = 'CREATE',
  CreateCallout = 'CREATE_CALLOUT',
  CreateDiscussion = 'CREATE_DISCUSSION',
  CreateInnovationHub = 'CREATE_INNOVATION_HUB',
  CreateInnovationPack = 'CREATE_INNOVATION_PACK',
  CreateMessage = 'CREATE_MESSAGE',
  CreateMessageReaction = 'CREATE_MESSAGE_REACTION',
  CreateMessageReply = 'CREATE_MESSAGE_REPLY',
  CreateOrganization = 'CREATE_ORGANIZATION',
  CreatePost = 'CREATE_POST',
  CreateSpace = 'CREATE_SPACE',
  CreateSubspace = 'CREATE_SUBSPACE',
  CreateVirtualContributor = 'CREATE_VIRTUAL_CONTRIBUTOR',
  CreateWhiteboard = 'CREATE_WHITEBOARD',
  Delete = 'DELETE',
  FileDelete = 'FILE_DELETE',
  FileUpload = 'FILE_UPLOAD',
  Grant = 'GRANT',
  GrantGlobalAdmins = 'GRANT_GLOBAL_ADMINS',
  LicenseReset = 'LICENSE_RESET',
  MoveContribution = 'MOVE_CONTRIBUTION',
  MovePost = 'MOVE_POST',
  PlatformAdmin = 'PLATFORM_ADMIN',
  PlatformSettingsAdmin = 'PLATFORM_SETTINGS_ADMIN',
  Read = 'READ',
  ReadAbout = 'READ_ABOUT',
  ReadLicense = 'READ_LICENSE',
  ReadUsers = 'READ_USERS',
  ReadUserPii = 'READ_USER_PII',
  ReadUserSettings = 'READ_USER_SETTINGS',
  ReceiveNotifications = 'RECEIVE_NOTIFICATIONS',
  ReceiveNotificationsAdmin = 'RECEIVE_NOTIFICATIONS_ADMIN',
  ReceiveNotificationsInApp = 'RECEIVE_NOTIFICATIONS_IN_APP',
  ReceiveNotificationsOrganizationAdmin = 'RECEIVE_NOTIFICATIONS_ORGANIZATION_ADMIN',
  ReceiveNotificationsSpaceAdmin = 'RECEIVE_NOTIFICATIONS_SPACE_ADMIN',
  ReceiveNotificationsSpaceLead = 'RECEIVE_NOTIFICATIONS_SPACE_LEAD',
  RolesetEntryRoleApply = 'ROLESET_ENTRY_ROLE_APPLY',
  RolesetEntryRoleAssign = 'ROLESET_ENTRY_ROLE_ASSIGN',
  RolesetEntryRoleAssignOrganization = 'ROLESET_ENTRY_ROLE_ASSIGN_ORGANIZATION',
  RolesetEntryRoleInvite = 'ROLESET_ENTRY_ROLE_INVITE',
  RolesetEntryRoleInviteAccept = 'ROLESET_ENTRY_ROLE_INVITE_ACCEPT',
  RolesetEntryRoleJoin = 'ROLESET_ENTRY_ROLE_JOIN',
  TransferResourceAccept = 'TRANSFER_RESOURCE_ACCEPT',
  TransferResourceOffer = 'TRANSFER_RESOURCE_OFFER',
  Update = 'UPDATE',
  UpdateCalloutPublisher = 'UPDATE_CALLOUT_PUBLISHER',
  UpdateContent = 'UPDATE_CONTENT',
  UpdateInnovationFlow = 'UPDATE_INNOVATION_FLOW',
}

export type Calendar = {
  __typename?: 'Calendar';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** A single CalendarEvent */
  event?: Maybe<CalendarEvent>;
  /** The list of CalendarEvents for this Calendar. */
  events: Array<CalendarEvent>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type CalendarEventArgs = {
  ID: Scalars['UUID']['input'];
};

export type CalendarEvent = {
  __typename?: 'CalendarEvent';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The comments for this CalendarEvent */
  comments: Room;
  /** The user that created this CalendarEvent */
  createdBy?: Maybe<User>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The length of the event in days. */
  durationDays?: Maybe<Scalars['Float']['output']>;
  /** The length of the event in minutes. */
  durationMinutes: Scalars['Float']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Flag to indicate if this event is for multiple days. */
  multipleDays: Scalars['Boolean']['output'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The Profile for this Post. */
  profile: Profile;
  /** The start time for this CalendarEvent. */
  startDate?: Maybe<Scalars['DateTime']['output']>;
  /** Which Subspace is this event part of. Only applicable if the Space has this option enabled. */
  subspace?: Maybe<Space>;
  /** The event type, e.g. webinar, meetup etc. */
  type: CalendarEventType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** Is the event visible on the parent calendar. */
  visibleOnParentCalendar: Scalars['Boolean']['output'];
  /** Flag to indicate if this event is for a whole day. */
  wholeDay: Scalars['Boolean']['output'];
};

export enum CalendarEventType {
  Deadline = 'DEADLINE',
  Event = 'EVENT',
  Meeting = 'MEETING',
  Milestone = 'MILESTONE',
  Other = 'OTHER',
  Training = 'TRAINING',
}

export type Callout = {
  __typename?: 'Callout';
  /** The activity for this Callout. The number of Contributions if the callout allows contributions, or the number of comments if it does not. */
  activity: Scalars['Float']['output'];
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The comments for this Callout. */
  classification?: Maybe<Classification>;
  /** The comments for this Callout. */
  comments?: Maybe<Room>;
  /** The Contribution Defaults for this Callout. */
  contributionDefaults: CalloutContributionDefaults;
  /** The Contributions that have been made to this Callout. */
  contributions: Array<CalloutContribution>;
  /** The user that created this Callout */
  createdBy?: Maybe<User>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The Callout Framing associated with this Callout. */
  framing: CalloutFraming;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Whether this callout is a Template or not. */
  isTemplate: Scalars['Boolean']['output'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The Posts associated with this Callout. */
  posts?: Maybe<Array<Post>>;
  /** The user that published this Callout */
  publishedBy?: Maybe<User>;
  /** The timestamp for the publishing of this Callout. */
  publishedDate?: Maybe<Scalars['Float']['output']>;
  /** The Callout Settings associated with this Callout. */
  settings: CalloutSettings;
  /** The sorting order for this Callout. */
  sortOrder: Scalars['Float']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type CalloutContributionsArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  shuffle?: InputMaybe<Scalars['Boolean']['input']>;
};

export enum CalloutAllowedContributors {
  Admins = 'ADMINS',
  Members = 'MEMBERS',
  None = 'NONE',
}

export type CalloutContribution = {
  __typename?: 'CalloutContribution';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The user that created this Document */
  createdBy?: Maybe<User>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The Link that was contributed. */
  link?: Maybe<Link>;
  /** The Post that was contributed. */
  post?: Maybe<Post>;
  /** The sorting order for this Contribution. */
  sortOrder: Scalars['Float']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The Whiteboard that was contributed. */
  whiteboard?: Maybe<Whiteboard>;
};

export type CalloutContributionDefaults = {
  __typename?: 'CalloutContributionDefaults';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The default title to use for new contributions. */
  defaultDisplayName?: Maybe<Scalars['String']['output']>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The default description to use for new contributions. */
  postDescription?: Maybe<Scalars['Markdown']['output']>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The default whiteboard content for whiteboard responses. */
  whiteboardContent?: Maybe<Scalars['WhiteboardContent']['output']>;
};

export enum CalloutContributionType {
  Link = 'LINK',
  Post = 'POST',
  Whiteboard = 'WHITEBOARD',
}

export type CalloutFraming = {
  __typename?: 'CalloutFraming';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The Link for framing the associated Callout. */
  link?: Maybe<Link>;
  /** The Memo for framing the associated Callout. */
  memo?: Maybe<Memo>;
  /** The Profile for framing the associated Callout. */
  profile: Profile;
  /** The type of the Callout Framing, the additional content attached to this callout */
  type: CalloutFramingType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The Whiteboard for framing the associated Callout. */
  whiteboard?: Maybe<Whiteboard>;
};

export enum CalloutFramingType {
  Link = 'LINK',
  Memo = 'MEMO',
  None = 'NONE',
  Whiteboard = 'WHITEBOARD',
}

export type CalloutPostCreated = {
  __typename?: 'CalloutPostCreated';
  /** The identifier of the Callout on which the post was created. */
  calloutID: Scalars['String']['output'];
  /** The identifier of the Contribution. */
  contributionID: Scalars['String']['output'];
  /** The Post that has been created. */
  post: Post;
  /** The sorting order for this Contribution. */
  sortOrder: Scalars['Float']['output'];
};

export type CalloutSettings = {
  __typename?: 'CalloutSettings';
  /** Callout Contribution Settings. */
  contribution: CalloutSettingsContribution;
  /** Callout Framing Settings. */
  framing: CalloutSettingsFraming;
  /** Callout Visibility. */
  visibility: CalloutVisibility;
};

export type CalloutSettingsContribution = {
  __typename?: 'CalloutSettingsContribution';
  /** The allowed contribution types for this callout. */
  allowedTypes: Array<CalloutContributionType>;
  /** Indicate who can add more contributions to the callout. */
  canAddContributions: CalloutAllowedContributors;
  /** Can comment to contributions callout. */
  commentsEnabled: Scalars['Boolean']['output'];
  /** Can add contributions to the Callout. Allowed Contribution types is going to be readOnly, so this field can be used to enable or disable the contribution temporarily instead of setting allowedTypes to None. */
  enabled: Scalars['Boolean']['output'];
};

export type CalloutSettingsFraming = {
  __typename?: 'CalloutSettingsFraming';
  /** Can comment to callout framing. */
  commentsEnabled: Scalars['Boolean']['output'];
};

export enum CalloutVisibility {
  Draft = 'DRAFT',
  Published = 'PUBLISHED',
}

export type CalloutsSet = {
  __typename?: 'CalloutsSet';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The list of Callouts for this CalloutsSet object. */
  callouts: Array<Callout>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The tagset templates on this CalloutsSet. */
  tagsetTemplates?: Maybe<Array<TagsetTemplate>>;
  /** The set of CalloutGroups in use in this CalloutsSet. */
  type: CalloutsSetType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type CalloutsSetCalloutsArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  classificationTagsets?: InputMaybe<Array<TagsetArgs>>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  shuffle?: InputMaybe<Scalars['Boolean']['input']>;
  sortByActivity?: InputMaybe<Scalars['Boolean']['input']>;
  withContributionTypes?: InputMaybe<Array<CalloutContributionType>>;
};

export enum CalloutsSetType {
  Collaboration = 'COLLABORATION',
  KnowledgeBase = 'KNOWLEDGE_BASE',
}

export type ChatGuidanceAnswerRelevanceInput = {
  /** The answer id. */
  id: Scalars['String']['input'];
  /** Is the answer relevant or not. */
  relevant: Scalars['Boolean']['input'];
};

export type ChatGuidanceInput = {
  /** The language of the answer. */
  language?: InputMaybe<Scalars['String']['input']>;
  /** The question that is being asked. */
  question: Scalars['String']['input'];
};

export type Classification = {
  __typename?: 'Classification';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The default or named tagset. */
  tagset?: Maybe<Tagset>;
  /** The classification tagsets. */
  tagsets?: Maybe<Array<Tagset>>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type ClassificationTagsetArgs = {
  tagsetName: TagsetReservedName;
};

export type Collaboration = {
  __typename?: 'Collaboration';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The calloutsSet with Callouts in use by this Space */
  calloutsSet: CalloutsSet;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The InnovationFlow for the Collaboration. */
  innovationFlow: InnovationFlow;
  /** Whether this Collaboration is a Template or not. */
  isTemplate: Scalars['Boolean']['output'];
  /** The License operating on this Collaboration. */
  license: License;
  /** The timeline with events in use by this Space */
  timeline: Timeline;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type Communication = {
  __typename?: 'Communication';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The updates on this Communication. */
  updates: Room;
};

export type CommunicationAdminEnsureAccessInput = {
  communityID: Scalars['UUID']['input'];
};

export type CommunicationAdminMembershipInput = {
  communityID: Scalars['UUID']['input'];
};

export type CommunicationAdminMembershipResult = {
  __typename?: 'CommunicationAdminMembershipResult';
  /** Display name of the result */
  displayName: Scalars['String']['output'];
  /** A unique identifier for this comunication room membership result. */
  id: Scalars['String']['output'];
  /** Rooms in this Communication */
  rooms: Array<CommunicationAdminRoomMembershipResult>;
};

export type CommunicationAdminOrphanedUsageResult = {
  __typename?: 'CommunicationAdminOrphanedUsageResult';
  /** Rooms in the Communication platform that are not used */
  rooms: Array<CommunicationAdminRoomResult>;
};

export type CommunicationAdminRemoveOrphanedRoomInput = {
  roomID: Scalars['String']['input'];
};

export type CommunicationAdminRoomMembershipResult = {
  __typename?: 'CommunicationAdminRoomMembershipResult';
  /** Display name of the entity */
  displayName: Scalars['String']['output'];
  /** Members of the room that are not members of the Community. */
  extraMembers: Array<Scalars['String']['output']>;
  /** A unique identifier for this membership result. */
  id: Scalars['String']['output'];
  /** The access mode for the room. */
  joinRule: Scalars['String']['output'];
  /** Name of the room */
  members: Array<Scalars['String']['output']>;
  /** Members of the community that are missing from the room */
  missingMembers: Array<Scalars['String']['output']>;
  /** The matrix room ID */
  roomID: Scalars['String']['output'];
};

export type CommunicationAdminRoomResult = {
  __typename?: 'CommunicationAdminRoomResult';
  /** Display name of the result */
  displayName: Scalars['String']['output'];
  /** The identifier for the orphaned room. */
  id: Scalars['String']['output'];
  /** The members of the orphaned room */
  members: Array<Scalars['String']['output']>;
};

export type CommunicationAdminUpdateRoomStateInput = {
  isPublic: Scalars['Boolean']['input'];
  isWorldVisible: Scalars['Boolean']['input'];
  roomID: Scalars['String']['input'];
};

export type CommunicationRoom = {
  __typename?: 'CommunicationRoom';
  /** The display name of the room */
  displayName: Scalars['String']['output'];
  /** The identifier of the room */
  id: Scalars['String']['output'];
  /** The messages that have been sent to the Room. */
  messages: Array<Message>;
};

export type CommunicationSendMessageToCommunityLeadsInput = {
  /** The Community the message is being sent to */
  communityId: Scalars['UUID']['input'];
  /** The message being sent */
  message: Scalars['String']['input'];
};

export type CommunicationSendMessageToOrganizationInput = {
  /** The message being sent */
  message: Scalars['String']['input'];
  /** The Organization the message is being sent to */
  organizationId: Scalars['UUID']['input'];
};

export type CommunicationSendMessageToUserInput = {
  /** The message being sent */
  message: Scalars['String']['input'];
  /** All Users the message is being sent to */
  receiverIds: Array<Scalars['UUID']['input']>;
};

export type Community = Groupable & {
  __typename?: 'Community';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Communications for this Community. */
  communication: Communication;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The user group with the specified id anywhere in the space */
  group: UserGroup;
  /** Groups of users related to a Community. */
  groups: Array<UserGroup>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The RoleSet for this Community. */
  roleSet: RoleSet;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type CommunityGroupArgs = {
  ID: Scalars['UUID']['input'];
};

export type CommunityApplicationForRoleResult = {
  __typename?: 'CommunityApplicationForRoleResult';
  /** ID for the community */
  communityID: Scalars['UUID']['output'];
  /** Date of creation */
  createdDate: Scalars['DateTime']['output'];
  /** Display name of the community */
  displayName: Scalars['String']['output'];
  /** ID for the application */
  id: Scalars['UUID']['output'];
  /** ID for the ultimate containing Space */
  spaceID: Scalars['UUID']['output'];
  /** Nesting level of the Space */
  spaceLevel: Scalars['Float']['output'];
  /** The current state of the application. */
  state: Scalars['String']['output'];
  /** Date of last update */
  updatedDate: Scalars['DateTime']['output'];
};

export type CommunityApplicationResult = {
  __typename?: 'CommunityApplicationResult';
  /** The application itself */
  application: Application;
  /** ID for the pending membership */
  id: Scalars['UUID']['output'];
  /** The key information for the Space that the application/invitation is for */
  spacePendingMembershipInfo: SpacePendingMembershipInfo;
};

export type CommunityGuidelines = {
  __typename?: 'CommunityGuidelines';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The details of the guidelines */
  profile: Profile;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type CommunityInvitationForRoleResult = {
  __typename?: 'CommunityInvitationForRoleResult';
  /** ID for the community */
  communityID: Scalars['UUID']['output'];
  /** ID for Contrbutor that is being invited to a community */
  contributorID: Scalars['UUID']['output'];
  /** The Type of the Contrbutor that is being invited to a community */
  contributorType: RoleSetContributorType;
  /** ID for the user that created the invitation. */
  createdBy: Scalars['UUID']['output'];
  /** Date of creation */
  createdDate: Scalars['DateTime']['output'];
  /** Display name of the community */
  displayName: Scalars['String']['output'];
  /** ID for the Invitation */
  id: Scalars['UUID']['output'];
  /** ID for the ultimate containing Space */
  spaceID: Scalars['UUID']['output'];
  /** Nesting level of the Space */
  spaceLevel: Scalars['Float']['output'];
  /** The current state of the invitation. */
  state: Scalars['String']['output'];
  /** Date of last update */
  updatedDate: Scalars['DateTime']['output'];
  /** The welcome message of the invitation */
  welcomeMessage?: Maybe<Scalars['UUID']['output']>;
};

export type CommunityInvitationResult = {
  __typename?: 'CommunityInvitationResult';
  /** ID for the pending membership */
  id: Scalars['UUID']['output'];
  /** The invitation itself */
  invitation: Invitation;
  /** The key information for the Space that the application/invitation is for */
  spacePendingMembershipInfo: SpacePendingMembershipInfo;
};

export enum CommunityMembershipPolicy {
  Applications = 'APPLICATIONS',
  Invitations = 'INVITATIONS',
  Open = 'OPEN',
}

export type CommunityMembershipResult = {
  __typename?: 'CommunityMembershipResult';
  /** The child community memberships */
  childMemberships: Array<CommunityMembershipResult>;
  /** ID for the membership */
  id: Scalars['UUID']['output'];
  /** The space for the membership is for */
  space: Space;
};

export enum CommunityMembershipStatus {
  ApplicationPending = 'APPLICATION_PENDING',
  InvitationPending = 'INVITATION_PENDING',
  Member = 'MEMBER',
  NotMember = 'NOT_MEMBER',
}

export type Config = {
  __typename?: 'Config';
  /** Elastic APM (RUM & performance monitoring) related configuration. */
  apm: Apm;
  /** Authentication configuration. */
  authentication: AuthenticationConfig;
  /** Visual constraints for the given type */
  defaultVisualTypeConstraints: VisualConstraints;
  /** The feature flags for the platform */
  featureFlags: Array<PlatformFeatureFlag>;
  /** Integration with a 3rd party Geo information service */
  geo: Geo;
  /** Platform related locations. */
  locations: PlatformLocations;
  /** Sentry (client monitoring) related configuration. */
  sentry: Sentry;
  /** Configuration for storage providers, e.g. file */
  storage: StorageConfig;
};

export type ConfigDefaultVisualTypeConstraintsArgs = {
  type: VisualType;
};

export enum ContentUpdatePolicy {
  Admins = 'ADMINS',
  Contributors = 'CONTRIBUTORS',
  Owner = 'OWNER',
}

export type Contributor = {
  /** The Agent for the Contributor. */
  agent: Agent;
  /** The authorization rules for the Contributor */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the Contributor */
  id: Scalars['UUID']['output'];
  /** A name identifier of the Contributor, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The profile for the Contributor. */
  profile: Profile;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type ContributorFilterInput = {
  /** Return contributors with credentials in the provided list */
  credentials?: InputMaybe<Array<AuthorizationCredential>>;
};

export type ContributorRolePolicy = {
  __typename?: 'ContributorRolePolicy';
  /** Maximum number of Contributors in this role */
  maximum: Scalars['Float']['output'];
  /** Minimum number of Contributors in this role */
  minimum: Scalars['Float']['output'];
};

export type ContributorRoles = {
  __typename?: 'ContributorRoles';
  /** The applications for the specified user; only accessible for platform admins */
  applications: Array<CommunityApplicationForRoleResult>;
  id: Scalars['UUID']['output'];
  /** The invitations for the specified user; only accessible for platform admins */
  invitations: Array<CommunityInvitationForRoleResult>;
  /** Details of the roles the contributor has in Organizations */
  organizations: Array<RolesResultOrganization>;
  /** Details of Spaces the User or Organization is a member of, with child memberships - if Space is accessible for the current user. */
  spaces: Array<RolesResultSpace>;
};

export type ContributorRolesApplicationsArgs = {
  states?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ContributorRolesInvitationsArgs = {
  states?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ConversionVcSpaceToVcKnowledgeBaseInput = {
  /** The Virtual Contributor to be converted. */
  virtualContributorID: Scalars['UUID']['input'];
};

export type ConvertSpaceL1ToSpaceL0Input = {
  /** The Space L1 to be promoted to be a new Space L0.  */
  spaceL1ID: Scalars['UUID']['input'];
};

export type ConvertSpaceL1ToSpaceL2Input = {
  /** The Space L1 to be the parent of the Space L1 when it is moved to be L2.  */
  parentSpaceL1ID: Scalars['UUID']['input'];
  /** The Space L1 to be moved to be a child of another Space L. Both the L1 Space and the parent Space must be in the same L0 Space.  */
  spaceL1ID: Scalars['UUID']['input'];
};

export type ConvertSpaceL2ToSpaceL1Input = {
  /** The Space L2 to be promoted.  */
  spaceL2ID: Scalars['UUID']['input'];
};

export type CreateAiPersonaInput = {
  aiPersonaService?: InputMaybe<CreateAiPersonaServiceInput>;
  aiPersonaServiceID?: InputMaybe<Scalars['UUID']['input']>;
  bodyOfKnowledge?: InputMaybe<Scalars['Markdown']['input']>;
  description?: InputMaybe<Scalars['Markdown']['input']>;
};

export type CreateAiPersonaServiceInput = {
  bodyOfKnowledgeID?: InputMaybe<Scalars['UUID']['input']>;
  bodyOfKnowledgeType?: InputMaybe<AiPersonaBodyOfKnowledgeType>;
  dataAccessMode?: InputMaybe<AiPersonaDataAccessMode>;
  engine?: InputMaybe<AiPersonaEngine>;
  externalConfig?: InputMaybe<ExternalConfigInput>;
  prompt?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type CreateCalendarEventOnCalendarInput = {
  calendarID: Scalars['UUID']['input'];
  /** The length of the event in days. */
  durationDays?: InputMaybe<Scalars['Float']['input']>;
  /** The length of the event in minutes. */
  durationMinutes: Scalars['Float']['input'];
  /** Flag to indicate if this event is for multiple days. */
  multipleDays: Scalars['Boolean']['input'];
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profileData: CreateProfileInput;
  /** The start date for the event. */
  startDate: Scalars['DateTime']['input'];
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  type: CalendarEventType;
  /** Is the event visible on the parent calendar. */
  visibleOnParentCalendar: Scalars['Boolean']['input'];
  /** Flag to indicate if this event is for a whole day. */
  wholeDay: Scalars['Boolean']['input'];
};

export type CreateCalloutContributionData = {
  __typename?: 'CreateCalloutContributionData';
  link?: Maybe<CreateLinkData>;
  post?: Maybe<CreatePostData>;
  /** The sort order to assign to this Contribution. */
  sortOrder?: Maybe<Scalars['Float']['output']>;
  whiteboard?: Maybe<CreateWhiteboardData>;
};

export type CreateCalloutContributionDefaultsData = {
  __typename?: 'CreateCalloutContributionDefaultsData';
  /** The default title to use for new contributions. */
  defaultDisplayName?: Maybe<Scalars['String']['output']>;
  /** The default description to use for new Post contributions. */
  postDescription?: Maybe<Scalars['Markdown']['output']>;
  whiteboardContent?: Maybe<Scalars['WhiteboardContent']['output']>;
};

export type CreateCalloutContributionDefaultsInput = {
  /** The default title to use for new contributions. */
  defaultDisplayName?: InputMaybe<Scalars['String']['input']>;
  /** The default description to use for new Post contributions. */
  postDescription?: InputMaybe<Scalars['Markdown']['input']>;
  whiteboardContent?: InputMaybe<Scalars['WhiteboardContent']['input']>;
};

export type CreateCalloutContributionInput = {
  link?: InputMaybe<CreateLinkInput>;
  post?: InputMaybe<CreatePostInput>;
  /** The sort order to assign to this Contribution. */
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
  whiteboard?: InputMaybe<CreateWhiteboardInput>;
};

export type CreateCalloutData = {
  __typename?: 'CreateCalloutData';
  classification?: Maybe<CreateClassificationData>;
  contributionDefaults?: Maybe<CreateCalloutContributionDefaultsData>;
  /** Contributions to be created with this Callout. */
  contributions?: Maybe<Array<CreateCalloutContributionData>>;
  framing: CreateCalloutFramingData;
  /** A readable identifier, unique within the containing scope. */
  nameID?: Maybe<Scalars['NameID']['output']>;
  /** Send notification if this flag is true and visibility is PUBLISHED. Defaults to false. */
  sendNotification?: Maybe<Scalars['Boolean']['output']>;
  settings?: Maybe<CreateCalloutSettingsData>;
  /** The sort order to assign to this Callout. */
  sortOrder?: Maybe<Scalars['Float']['output']>;
};

export type CreateCalloutFramingData = {
  __typename?: 'CreateCalloutFramingData';
  link?: Maybe<CreateLinkData>;
  memo?: Maybe<CreateMemoData>;
  profile: CreateProfileData;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  /** The type of additional content attached to the framing of the callout. Defaults to None. */
  type?: Maybe<CalloutFramingType>;
  whiteboard?: Maybe<CreateWhiteboardData>;
};

export type CreateCalloutFramingInput = {
  link?: InputMaybe<CreateLinkInput>;
  memo?: InputMaybe<CreateMemoInput>;
  profile: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The type of additional content attached to the framing of the callout. Defaults to None. */
  type?: InputMaybe<CalloutFramingType>;
  whiteboard?: InputMaybe<CreateWhiteboardInput>;
};

export type CreateCalloutInput = {
  classification?: InputMaybe<CreateClassificationInput>;
  contributionDefaults?: InputMaybe<CreateCalloutContributionDefaultsInput>;
  /** Contributions to be created with this Callout. */
  contributions?: InputMaybe<Array<CreateCalloutContributionInput>>;
  framing: CreateCalloutFramingInput;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** Send notification if this flag is true and visibility is PUBLISHED. Defaults to false. */
  sendNotification?: InputMaybe<Scalars['Boolean']['input']>;
  settings?: InputMaybe<CreateCalloutSettingsInput>;
  /** The sort order to assign to this Callout. */
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
};

export type CreateCalloutOnCalloutsSetInput = {
  calloutsSetID: Scalars['UUID']['input'];
  classification?: InputMaybe<CreateClassificationInput>;
  contributionDefaults?: InputMaybe<CreateCalloutContributionDefaultsInput>;
  /** Contributions to be created with this Callout. */
  contributions?: InputMaybe<Array<CreateCalloutContributionInput>>;
  framing: CreateCalloutFramingInput;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** Send notification if this flag is true and visibility is PUBLISHED. Defaults to false. */
  sendNotification?: InputMaybe<Scalars['Boolean']['input']>;
  settings?: InputMaybe<CreateCalloutSettingsInput>;
  /** The sort order to assign to this Callout. */
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
};

export type CreateCalloutSettingsContributionData = {
  __typename?: 'CreateCalloutSettingsContributionData';
  /** Allowed Contribution types. */
  allowedTypes?: Maybe<Array<CalloutContributionType>>;
  /** Indicate who can add more contributions to the callout. */
  canAddContributions?: Maybe<CalloutAllowedContributors>;
  /** Can comment to contributions callout. */
  commentsEnabled?: Maybe<Scalars['Boolean']['output']>;
  /** Can add contributions to the Callout. Allowed Contribution types is going to be readOnly, so this field can be used to enable or disable the contribution temporarily instead of setting allowedTypes to None. */
  enabled?: Maybe<Scalars['Boolean']['output']>;
};

export type CreateCalloutSettingsContributionInput = {
  /** Allowed Contribution types. */
  allowedTypes?: InputMaybe<Array<CalloutContributionType>>;
  /** Indicate who can add more contributions to the callout. */
  canAddContributions?: InputMaybe<CalloutAllowedContributors>;
  /** Can comment to contributions callout. */
  commentsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** Can add contributions to the Callout. Allowed Contribution types is going to be readOnly, so this field can be used to enable or disable the contribution temporarily instead of setting allowedTypes to None. */
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CreateCalloutSettingsData = {
  __typename?: 'CreateCalloutSettingsData';
  contribution?: Maybe<CreateCalloutSettingsContributionData>;
  framing?: Maybe<CreateCalloutSettingsFramingData>;
  /** Visibility of the Callout. Defaults to PUBLISHED. */
  visibility?: Maybe<CalloutVisibility>;
};

export type CreateCalloutSettingsFramingData = {
  __typename?: 'CreateCalloutSettingsFramingData';
  /** Can comment to callout framing. */
  commentsEnabled?: Maybe<Scalars['Boolean']['output']>;
};

export type CreateCalloutSettingsFramingInput = {
  /** Can comment to callout framing. */
  commentsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CreateCalloutSettingsInput = {
  contribution?: InputMaybe<CreateCalloutSettingsContributionInput>;
  framing?: InputMaybe<CreateCalloutSettingsFramingInput>;
  /** Visibility of the Callout. Defaults to PUBLISHED. */
  visibility?: InputMaybe<CalloutVisibility>;
};

export type CreateCalloutsSetData = {
  __typename?: 'CreateCalloutsSetData';
  /** The Callouts to add to this Collaboration. */
  calloutsData?: Maybe<Array<CreateCalloutData>>;
};

export type CreateCalloutsSetInput = {
  /** The Callouts to add to this Collaboration. */
  calloutsData?: InputMaybe<Array<CreateCalloutInput>>;
};

export type CreateClassificationData = {
  __typename?: 'CreateClassificationData';
  tagsets: Array<CreateTagsetData>;
};

export type CreateClassificationInput = {
  tagsets: Array<CreateTagsetInput>;
};

export type CreateCollaborationData = {
  __typename?: 'CreateCollaborationData';
  /** The CalloutsSet to use for this Collaboration. */
  calloutsSetData: CreateCalloutsSetData;
  /** The InnovationFlow Template to use for this Collaboration. */
  innovationFlowData?: Maybe<CreateInnovationFlowData>;
};

export type CreateCollaborationInput = {
  /** The CalloutsSet to use for this Collaboration. */
  calloutsSetData: CreateCalloutsSetInput;
  /** The InnovationFlow Template to use for this Collaboration. */
  innovationFlowData?: InputMaybe<CreateInnovationFlowInput>;
};

export type CreateCollaborationOnSpaceInput = {
  /** Add callouts from the template to the Collaboration; defaults to true. */
  addCallouts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Add tutorial callouts to the Collaboration; defaults to false. */
  addTutorialCallouts?: InputMaybe<Scalars['Boolean']['input']>;
  /** The CalloutsSet to use for this Collaboration. */
  calloutsSetData: CreateCalloutsSetInput;
  /** The InnovationFlow Template to use for this Collaboration. */
  innovationFlowData?: InputMaybe<CreateInnovationFlowInput>;
};

export type CreateCommunityGuidelinesData = {
  __typename?: 'CreateCommunityGuidelinesData';
  profile: CreateProfileData;
};

export type CreateCommunityGuidelinesInput = {
  profile: CreateProfileInput;
};

export type CreateContributionOnCalloutInput = {
  calloutID: Scalars['UUID']['input'];
  link?: InputMaybe<CreateLinkInput>;
  post?: InputMaybe<CreatePostInput>;
  /** The sort order to assign to this Contribution. */
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
  whiteboard?: InputMaybe<CreateWhiteboardInput>;
};

export type CreateInnovationFlowData = {
  __typename?: 'CreateInnovationFlowData';
  profile: CreateProfileData;
  states: Array<CreateInnovationFlowStateData>;
};

export type CreateInnovationFlowInput = {
  profile: CreateProfileInput;
  states: Array<CreateInnovationFlowStateInput>;
};

export type CreateInnovationFlowStateData = {
  __typename?: 'CreateInnovationFlowStateData';
  /** The explanation text to clarify the State. */
  description?: Maybe<Scalars['Markdown']['output']>;
  /** The display name for the State */
  displayName: Scalars['String']['output'];
  settings?: Maybe<CreateInnovationFlowStateSettingsData>;
  /** The sort order for the State; if not specified, it will be set to the next highest order. */
  sortOrder?: Maybe<Scalars['Float']['output']>;
};

export type CreateInnovationFlowStateInput = {
  /** The explanation text to clarify the State. */
  description?: InputMaybe<Scalars['Markdown']['input']>;
  /** The display name for the State */
  displayName: Scalars['String']['input'];
  settings?: InputMaybe<CreateInnovationFlowStateSettingsInput>;
  /** The sort order for the State; if not specified, it will be set to the next highest order. */
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
};

export type CreateInnovationFlowStateSettingsData = {
  __typename?: 'CreateInnovationFlowStateSettingsData';
  /** The flag to set. */
  allowNewCallouts: Scalars['Boolean']['output'];
};

export type CreateInnovationFlowStateSettingsInput = {
  /** The flag to set. */
  allowNewCallouts: Scalars['Boolean']['input'];
};

export type CreateInnovationHubOnAccountInput = {
  /** The Account where the InnovationHub is to be created. */
  accountID: Scalars['UUID']['input'];
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profileData: CreateProfileInput;
  /** A list of Spaces to include in this Innovation Hub. Only valid when type 'list' is used. */
  spaceListFilter?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** Spaces with which visibility this Innovation Hub will display. Only valid when type 'visibility' is used. */
  spaceVisibilityFilter?: InputMaybe<SpaceVisibility>;
  /** The subdomain to associate the Innovation Hub with. */
  subdomain: Scalars['String']['input'];
  /** The type of Innovation Hub. */
  type: InnovationHubType;
};

export type CreateInnovationPackOnAccountInput = {
  /** The Account where the InnovationPack is to be created. */
  accountID: Scalars['UUID']['input'];
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profileData: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type CreateKnowledgeBaseInput = {
  /** The CalloutsSet to use for this KnowledgeBase. */
  calloutsSetData?: InputMaybe<CreateCalloutsSetInput>;
  /** The Profile to use for this KnowledgeBase. */
  profile: CreateProfileInput;
};

export type CreateLicensePlanOnLicensingFrameworkInput = {
  /** Assign this plan to all new Organization accounts */
  assignToNewOrganizationAccounts: Scalars['Boolean']['input'];
  /** Assign this plan to all new User accounts */
  assignToNewUserAccounts: Scalars['Boolean']['input'];
  /** Is this plan enabled? */
  enabled: Scalars['Boolean']['input'];
  /** Is this plan free? */
  isFree: Scalars['Boolean']['input'];
  /** The credential to represent this plan */
  licenseCredential: LicensingCredentialBasedCredentialType;
  licensingFrameworkID: Scalars['UUID']['input'];
  /** The name of the License Plan */
  name: Scalars['String']['input'];
  /** The price per month of this plan. */
  pricePerMonth?: InputMaybe<Scalars['Float']['input']>;
  /** Does this plan require contact support */
  requiresContactSupport: Scalars['Boolean']['input'];
  /** Does this plan require a payment method? */
  requiresPaymentMethod: Scalars['Boolean']['input'];
  /** The sorting order for this Plan. */
  sortOrder: Scalars['Float']['input'];
  /** Is there a trial period enabled */
  trialEnabled: Scalars['Boolean']['input'];
  /** The type of this License Plan. */
  type: LicensingCredentialBasedPlanType;
};

export type CreateLinkData = {
  __typename?: 'CreateLinkData';
  profile: CreateProfileData;
  uri?: Maybe<Scalars['String']['output']>;
};

export type CreateLinkInput = {
  profile: CreateProfileInput;
  uri?: InputMaybe<Scalars['String']['input']>;
};

export type CreateLocationData = {
  __typename?: 'CreateLocationData';
  addressLine1?: Maybe<Scalars['String']['output']>;
  addressLine2?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  postalCode?: Maybe<Scalars['String']['output']>;
  stateOrProvince?: Maybe<Scalars['String']['output']>;
};

export type CreateLocationInput = {
  addressLine1?: InputMaybe<Scalars['String']['input']>;
  addressLine2?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  stateOrProvince?: InputMaybe<Scalars['String']['input']>;
};

export type CreateMemoData = {
  __typename?: 'CreateMemoData';
  markdown?: Maybe<Scalars['Markdown']['output']>;
  profile?: Maybe<CreateProfileData>;
};

export type CreateMemoInput = {
  markdown?: InputMaybe<Scalars['Markdown']['input']>;
  profile?: InputMaybe<CreateProfileInput>;
};

export type CreateNvpInput = {
  name: Scalars['String']['input'];
  sortOrder: Scalars['Float']['input'];
  value: Scalars['String']['input'];
};

export type CreateOrganizationInput = {
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  domain?: InputMaybe<Scalars['String']['input']>;
  legalEntityName?: InputMaybe<Scalars['String']['input']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profileData: CreateProfileInput;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type CreatePostData = {
  __typename?: 'CreatePostData';
  tags?: Maybe<Array<Scalars['String']['output']>>;
};

export type CreatePostInput = {
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profileData: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type CreateProfileData = {
  __typename?: 'CreateProfileData';
  description?: Maybe<Scalars['Markdown']['output']>;
  /** The display name for the entity. */
  displayName: Scalars['String']['output'];
  location?: Maybe<CreateLocationData>;
  referencesData?: Maybe<Array<CreateReferenceData>>;
  /** A memorable short description for this entity. */
  tagline?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Scalars['String']['output']>>;
  tagsets?: Maybe<Array<CreateTagsetData>>;
  /** The visuals URLs */
  visuals?: Maybe<Array<CreateVisualOnProfileData>>;
};

export type CreateProfileInput = {
  description?: InputMaybe<Scalars['Markdown']['input']>;
  /** The display name for the entity. */
  displayName: Scalars['String']['input'];
  location?: InputMaybe<CreateLocationInput>;
  referencesData?: InputMaybe<Array<CreateReferenceInput>>;
  /** A memorable short description for this entity. */
  tagline?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  tagsets?: InputMaybe<Array<CreateTagsetInput>>;
  /** The visuals URLs */
  visuals?: InputMaybe<Array<CreateVisualOnProfileInput>>;
};

export type CreateReferenceData = {
  __typename?: 'CreateReferenceData';
  description?: Maybe<Scalars['String']['output']>;
  name: Scalars['String']['output'];
  uri?: Maybe<Scalars['String']['output']>;
};

export type CreateReferenceInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  uri?: InputMaybe<Scalars['String']['input']>;
};

export type CreateReferenceOnProfileInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  profileID: Scalars['UUID']['input'];
  uri?: InputMaybe<Scalars['String']['input']>;
};

export type CreateSpaceAboutInput = {
  /** The CommunityGuidelines for the Space */
  guidelines?: InputMaybe<CreateCommunityGuidelinesInput>;
  profileData: CreateProfileInput;
  who?: InputMaybe<Scalars['Markdown']['input']>;
  why?: InputMaybe<Scalars['Markdown']['input']>;
};

export type CreateSpaceOnAccountInput = {
  about: CreateSpaceAboutInput;
  /** The Account where the Space is to be created. */
  accountID: Scalars['UUID']['input'];
  collaborationData: CreateCollaborationOnSpaceInput;
  /** The license plan the user wishes to use when creating the space. */
  licensePlanID?: InputMaybe<Scalars['UUID']['input']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  settings?: InputMaybe<CreateSpaceSettingsInput>;
  /** The Template to use for instantiating the Collaboration. */
  spaceTemplateID?: InputMaybe<Scalars['UUID']['input']>;
};

export type CreateSpaceSettingsCollaborationInput = {
  /** Flag to control if events from Subspaces are visible on this Space calendar as well. */
  allowEventsFromSubspaces: Scalars['Boolean']['input'];
  /** Flag to control if members can create callouts. */
  allowMembersToCreateCallouts: Scalars['Boolean']['input'];
  /** Flag to control if members can create subspaces. */
  allowMembersToCreateSubspaces: Scalars['Boolean']['input'];
  /** Flag to control if ability to contribute is inherited from parent Space. */
  inheritMembershipRights: Scalars['Boolean']['input'];
};

export type CreateSpaceSettingsInput = {
  collaboration?: InputMaybe<CreateSpaceSettingsCollaborationInput>;
  membership?: InputMaybe<CreateSpaceSettingsMembershipInput>;
  privacy?: InputMaybe<CreateSpaceSettingsPrivacyInput>;
};

export type CreateSpaceSettingsMembershipInput = {
  /** Flag to control if Subspace admins can invite for this Space. */
  allowSubspaceAdminsToInviteMembers: Scalars['Boolean']['input'];
  /** The membership policy in usage for this Space */
  policy: CommunityMembershipPolicy;
  /** The organizations that are trusted to Join as members for this Space */
  trustedOrganizations: Array<Scalars['UUID']['input']>;
};

export type CreateSpaceSettingsPrivacyInput = {
  /** Flag to control if Platform Support has admin rights. */
  allowPlatformSupportAsAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  mode?: InputMaybe<SpacePrivacyMode>;
};

export type CreateStateOnInnovationFlowInput = {
  /** The explanation text to clarify the State. */
  description?: InputMaybe<Scalars['Markdown']['input']>;
  /** The display name for the State */
  displayName: Scalars['String']['input'];
  innovationFlowID: Scalars['UUID']['input'];
  settings?: InputMaybe<CreateInnovationFlowStateSettingsInput>;
  /** The sort order for the State; if not specified, it will be set to the next highest order. */
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
};

export type CreateSubspaceInput = {
  about: CreateSpaceAboutInput;
  collaborationData: CreateCollaborationOnSpaceInput;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  settings?: InputMaybe<CreateSpaceSettingsInput>;
  spaceID: Scalars['UUID']['input'];
  /** The Template to use for instantiating the Collaboration. */
  spaceTemplateID?: InputMaybe<Scalars['UUID']['input']>;
};

export type CreateTagsetData = {
  __typename?: 'CreateTagsetData';
  name: Scalars['String']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  type?: Maybe<TagsetType>;
};

export type CreateTagsetInput = {
  name: Scalars['String']['input'];
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  type?: InputMaybe<TagsetType>;
};

export type CreateTagsetOnProfileInput = {
  name: Scalars['String']['input'];
  profileID?: InputMaybe<Scalars['UUID']['input']>;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  type?: InputMaybe<TagsetType>;
};

export type CreateTemplateContentSpaceInput = {
  about: CreateSpaceAboutInput;
  collaborationData: CreateCollaborationInput;
  level: SpaceLevel;
  /** Create the settings for the Space. */
  settings: CreateSpaceSettingsInput;
  subspaces?: InputMaybe<Array<CreateTemplateContentSpaceInput>>;
};

export type CreateTemplateFromContentSpaceOnTemplatesSetInput = {
  /** The ID of the ContentSpace to use as for the Template. */
  contentSpaceID: Scalars['UUID']['input'];
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profileData: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  templatesSetID: Scalars['UUID']['input'];
};

export type CreateTemplateFromSpaceOnTemplatesSetInput = {
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profileData: CreateProfileInput;
  /** Whether to reproduce the hierarchy or just the space. */
  recursive?: InputMaybe<Scalars['Boolean']['input']>;
  /** The ID of the Space to use as the content for the Template. */
  spaceID: Scalars['UUID']['input'];
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  templatesSetID: Scalars['UUID']['input'];
};

export type CreateTemplateOnTemplatesSetInput = {
  /** The Callout to associate with this template. */
  calloutData?: InputMaybe<CreateCalloutInput>;
  /** The Community guidelines to associate with this template. */
  communityGuidelinesData?: InputMaybe<CreateCommunityGuidelinesInput>;
  /** The Template Content for a Space to associate with this template. */
  contentSpaceData?: InputMaybe<CreateTemplateContentSpaceInput>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** Post Template: The default description to be pre-filled. */
  postDefaultDescription?: InputMaybe<Scalars['Markdown']['input']>;
  profileData: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
  templatesSetID: Scalars['UUID']['input'];
  /** The type of the Template to be created. */
  type: TemplateType;
  /** The Whiteboard to associate with this template. */
  whiteboard?: InputMaybe<CreateWhiteboardInput>;
};

export type CreateUserGroupInput = {
  parentID: Scalars['UUID']['input'];
  profile: CreateProfileInput;
};

export type CreateUserInput = {
  accountUpn?: InputMaybe<Scalars['String']['input']>;
  email: Scalars['String']['input'];
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  profileData: CreateProfileInput;
};

export type CreateVirtualContributorOnAccountInput = {
  /** The Account where the VirtualContributor is to be created. */
  accountID: Scalars['UUID']['input'];
  /** Data used to create the AI Persona */
  aiPersona: CreateAiPersonaInput;
  /** The KnowledgeBase to use for this Collaboration. */
  knowledgeBaseData?: InputMaybe<CreateKnowledgeBaseInput>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profileData: CreateProfileInput;
};

export type CreateVisualOnProfileData = {
  __typename?: 'CreateVisualOnProfileData';
  /** The type of visual. */
  name: VisualType;
  /** The URI of the image. Needs to be a url inside Alkemio already uploaded to a StorageBucket. It will be then copied to the Profile holding this Visual. */
  uri: Scalars['String']['output'];
};

export type CreateVisualOnProfileInput = {
  /** The type of visual. */
  name: VisualType;
  /** The URI of the image. Needs to be a url inside Alkemio already uploaded to a StorageBucket. It will be then copied to the Profile holding this Visual. */
  uri: Scalars['String']['input'];
};

export type CreateWhiteboardData = {
  __typename?: 'CreateWhiteboardData';
  content?: Maybe<Scalars['WhiteboardContent']['output']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: Maybe<Scalars['NameID']['output']>;
  profile?: Maybe<CreateProfileData>;
};

export type CreateWhiteboardInput = {
  content?: InputMaybe<Scalars['WhiteboardContent']['input']>;
  /** A readable identifier, unique within the containing scope. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  profile?: InputMaybe<CreateProfileInput>;
};

export type Credential = {
  __typename?: 'Credential';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The timestamp for the expiry of this credential. */
  expires?: Maybe<Scalars['Float']['output']>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The User issuing the credential */
  issuer?: Maybe<Scalars['UUID']['output']>;
  resourceID: Scalars['String']['output'];
  type: CredentialType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type CredentialDefinition = {
  __typename?: 'CredentialDefinition';
  /** The resourceID for this CredentialDefinition */
  resourceID: Scalars['String']['output'];
  /** The type for this CredentialDefinition */
  type: Scalars['String']['output'];
};

export type CredentialMetadataOutput = {
  __typename?: 'CredentialMetadataOutput';
  /** A json description of what the claim contains and schema validation definition */
  context: Scalars['String']['output'];
  /** The purpose of the credential */
  description: Scalars['String']['output'];
  /** The display name of the credential */
  name: Scalars['String']['output'];
  /** The schema that the credential will be validated against */
  schema: Scalars['String']['output'];
  /** The credential types that are associated with this credential */
  types: Array<Scalars['String']['output']>;
  /** System recognized unique type for the credential */
  uniqueType: Scalars['String']['output'];
};

export enum CredentialType {
  AccountAdmin = 'ACCOUNT_ADMIN',
  AccountLicensePlus = 'ACCOUNT_LICENSE_PLUS',
  BetaTester = 'BETA_TESTER',
  GlobalAdmin = 'GLOBAL_ADMIN',
  GlobalAnonymous = 'GLOBAL_ANONYMOUS',
  GlobalCommunityRead = 'GLOBAL_COMMUNITY_READ',
  GlobalLicenseManager = 'GLOBAL_LICENSE_MANAGER',
  GlobalPlatformManager = 'GLOBAL_PLATFORM_MANAGER',
  GlobalRegistered = 'GLOBAL_REGISTERED',
  GlobalSpacesReader = 'GLOBAL_SPACES_READER',
  GlobalSupport = 'GLOBAL_SUPPORT',
  GlobalSupportManager = 'GLOBAL_SUPPORT_MANAGER',
  OrganizationAdmin = 'ORGANIZATION_ADMIN',
  OrganizationAssociate = 'ORGANIZATION_ASSOCIATE',
  OrganizationOwner = 'ORGANIZATION_OWNER',
  SpaceAdmin = 'SPACE_ADMIN',
  SpaceFeatureMemoMultiUser = 'SPACE_FEATURE_MEMO_MULTI_USER',
  SpaceFeatureSaveAsTemplate = 'SPACE_FEATURE_SAVE_AS_TEMPLATE',
  SpaceFeatureVirtualContributors = 'SPACE_FEATURE_VIRTUAL_CONTRIBUTORS',
  SpaceFeatureWhiteboardMultiUser = 'SPACE_FEATURE_WHITEBOARD_MULTI_USER',
  SpaceLead = 'SPACE_LEAD',
  SpaceLicenseEnterprise = 'SPACE_LICENSE_ENTERPRISE',
  SpaceLicenseFree = 'SPACE_LICENSE_FREE',
  SpaceLicensePlus = 'SPACE_LICENSE_PLUS',
  SpaceLicensePremium = 'SPACE_LICENSE_PREMIUM',
  SpaceMember = 'SPACE_MEMBER',
  SpaceMemberInvitee = 'SPACE_MEMBER_INVITEE',
  SpaceSubspaceAdmin = 'SPACE_SUBSPACE_ADMIN',
  UserGroupMember = 'USER_GROUP_MEMBER',
  UserSelfManagement = 'USER_SELF_MANAGEMENT',
  VcCampaign = 'VC_CAMPAIGN',
}

export type DeleteAiPersonaServiceInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteApplicationInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteCalendarEventInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteCalloutInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteDiscussionInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteDocumentInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteInnovationHubInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteInnovationPackInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteInvitationInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteLicensePlanInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteLinkInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteMemoInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteOrganizationInput = {
  ID: Scalars['UUID']['input'];
};

export type DeletePlatformInvitationInput = {
  ID: Scalars['UUID']['input'];
};

export type DeletePostInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteReferenceInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteSpaceInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteStateOnInnovationFlowInput = {
  ID: Scalars['UUID']['input'];
  innovationFlowID: Scalars['UUID']['input'];
};

export type DeleteStorageBuckeetInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteTemplateInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteUserGroupInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteUserInput = {
  ID: Scalars['UUID']['input'];
  deleteIdentity?: InputMaybe<Scalars['Boolean']['input']>;
};

export type DeleteVirtualContributorInput = {
  ID: Scalars['UUID']['input'];
};

export type DeleteWhiteboardInput = {
  ID: Scalars['UUID']['input'];
};

export type DirectRoom = {
  __typename?: 'DirectRoom';
  /** The display name of the room */
  displayName: Scalars['String']['output'];
  /** The identifier of the room */
  id: Scalars['String']['output'];
  /** The messages that have been sent to the Room. */
  messages: Array<Message>;
  /** The recipient userID */
  receiverID?: Maybe<Scalars['String']['output']>;
};

export type Discussion = {
  __typename?: 'Discussion';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The category assigned to this Discussion. */
  category: ForumDiscussionCategory;
  /** The comments for this Discussion. */
  comments: Room;
  /** The id of the user that created this discussion */
  createdBy?: Maybe<Scalars['UUID']['output']>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** Privacy mode for the Discussion. Note: this is not yet implemented in the authorization policy. */
  privacy: ForumDiscussionPrivacy;
  /** The Profile for this Discussion. */
  profile: Profile;
  /** The timestamp for the creation of this Discussion. */
  timestamp?: Maybe<Scalars['Float']['output']>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type DiscussionsInput = {
  /** The number of Discussion entries to return; if omitted return all Discussions. */
  limit?: InputMaybe<Scalars['Float']['input']>;
  /** The sort order of the Discussions to return. */
  orderBy?: InputMaybe<DiscussionsOrderBy>;
};

export enum DiscussionsOrderBy {
  DiscussionsCreatedateAsc = 'DISCUSSIONS_CREATEDATE_ASC',
  DiscussionsCreatedateDesc = 'DISCUSSIONS_CREATEDATE_DESC',
}

export type Document = {
  __typename?: 'Document';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The user that created this Document */
  createdBy?: Maybe<User>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The display name. */
  displayName: Scalars['String']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Mime type for this Document. */
  mimeType: MimeType;
  /** Size of the Document. */
  size: Scalars['Float']['output'];
  /** The tagset in use on this Document. */
  tagset: Tagset;
  /** Whether this Document is in its end location or not. */
  temporaryLocation: Scalars['Boolean']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The uploaded date of this Document */
  uploadedDate: Scalars['DateTime']['output'];
  /** The URL to be used to retrieve the Document */
  url: Scalars['String']['output'];
};

export type ExploreSpacesInput = {
  /** Take into account only the activity in the past X days. */
  daysOld?: InputMaybe<Scalars['Float']['input']>;
  /** Amount of Spaces returned. */
  limit?: InputMaybe<Scalars['Float']['input']>;
};

export type ExternalConfig = {
  __typename?: 'ExternalConfig';
  /** The API key for the external LLM provider. */
  apiKey?: Maybe<Scalars['String']['output']>;
  /** The assistant ID backing the service in OpenAI`s assistant API */
  assistantId?: Maybe<Scalars['String']['output']>;
  /** The OpenAI model to use for the service */
  model: OpenAiModel;
};

export type ExternalConfigInput = {
  /** The API key for the external LLM provider. */
  apiKey?: InputMaybe<Scalars['String']['input']>;
  /** The assistant ID backing the service in OpenAI`s assistant API */
  assistantId?: InputMaybe<Scalars['String']['input']>;
  /** The OpenAI model to use for the service */
  model?: OpenAiModel;
};

export type FileStorageConfig = {
  __typename?: 'FileStorageConfig';
  /** Max file size, in bytes. */
  maxFileSize: Scalars['Float']['output'];
};

export type Form = {
  __typename?: 'Form';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** A description of the purpose of this Form. */
  description?: Maybe<Scalars['Markdown']['output']>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The set of Questions in this Form. */
  questions: Array<FormQuestion>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type FormQuestion = {
  __typename?: 'FormQuestion';
  /** The explation text to clarify the question. */
  explanation: Scalars['String']['output'];
  /** The maxiumum length of the answer, in characters, up to a limit of 512. */
  maxLength: Scalars['Float']['output'];
  /** The question to be answered */
  question: Scalars['String']['output'];
  /** Whether this Question requires an answer or not. */
  required: Scalars['Boolean']['output'];
  /** The sort order of this question in a wider set of questions. */
  sortOrder: Scalars['Float']['output'];
};

export type Forum = {
  __typename?: 'Forum';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** A particular Discussions active in this Forum. */
  discussion?: Maybe<Discussion>;
  discussionCategories: Array<ForumDiscussionCategory>;
  /** The Discussions active in this Forum. */
  discussions?: Maybe<Array<Discussion>>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type ForumDiscussionArgs = {
  ID: Scalars['UUID']['input'];
};

export type ForumDiscussionsArgs = {
  queryData?: InputMaybe<DiscussionsInput>;
};

export type ForumCreateDiscussionInput = {
  /** The category for the Discussion */
  category: ForumDiscussionCategory;
  /** The identifier for the Forum entity the Discussion is being created on. */
  forumID: Scalars['UUID']['input'];
  profile: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};

export enum ForumDiscussionCategory {
  ChallengeCentric = 'CHALLENGE_CENTRIC',
  CommunityBuilding = 'COMMUNITY_BUILDING',
  Help = 'HELP',
  Other = 'OTHER',
  PlatformFunctionalities = 'PLATFORM_FUNCTIONALITIES',
  Releases = 'RELEASES',
}

export enum ForumDiscussionPrivacy {
  Authenticated = 'AUTHENTICATED',
  Author = 'AUTHOR',
  Public = 'PUBLIC',
}

export type Geo = {
  __typename?: 'Geo';
  /** Endpoint where geo information is consumed from. */
  endpoint: Scalars['String']['output'];
};

export type GeoLocation = {
  __typename?: 'GeoLocation';
  /** The Latitude for this Location, derived from (City, Country) if those are set. */
  latitude?: Maybe<Scalars['Float']['output']>;
  /** The Longitude for this Location, derived from (City, Country) if those are set. */
  longitude?: Maybe<Scalars['Float']['output']>;
};

export type GrantAuthorizationCredentialInput = {
  /** The resource to which this credential is tied. */
  resourceID?: InputMaybe<Scalars['UUID']['input']>;
  type: AuthorizationCredential;
  /** The user to whom the credential is being granted. */
  userID: Scalars['UUID']['input'];
};

export type GrantOrganizationAuthorizationCredentialInput = {
  /** The Organization to whom the credential is being granted. */
  organizationID: Scalars['UUID']['input'];
  /** The resource to which this credential is tied. */
  resourceID?: InputMaybe<Scalars['UUID']['input']>;
  type: AuthorizationCredential;
};

export type Groupable = {
  /** The groups contained by this entity. */
  groups?: Maybe<Array<UserGroup>>;
};

export type ISearchCategoryResult = {
  __typename?: 'ISearchCategoryResult';
  /** Provide this with your next search query to fetch the next set of results. */
  cursor?: Maybe<Scalars['SearchCursor']['output']>;
  /** The ranked search results for this category, sorted by relevance */
  results: Array<SearchResult>;
  /** The total number of search results. Not implemented yet. */
  total: Scalars['Float']['output'];
};

export type ISearchResults = {
  __typename?: 'ISearchResults';
  /** The search results for Callouts. */
  calloutResults: ISearchCategoryResult;
  /** The search results for contributions (Posts, Whiteboards etc). */
  contributionResults: ISearchCategoryResult;
  /** The search results for contributors (Users, Organizations). */
  contributorResults: ISearchCategoryResult;
  /** The search results for Spaces / Subspaces. */
  spaceResults: ISearchCategoryResult;
};

export type InAppNotification = {
  __typename?: 'InAppNotification';
  /** The category of the notification event. */
  category: NotificationEventCategory;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The payload of the notification. */
  payload: InAppNotificationPayload;
  /** The receiver of the notification. */
  receiver: Contributor;
  /** The state of the notification event. */
  state: NotificationEventInAppState;
  /** The triggered date of the notification event. */
  triggeredAt: Scalars['DateTime']['output'];
  /** The Contributor who triggered the notification. */
  triggeredBy?: Maybe<Contributor>;
  /** The type of the notification event. */
  type: NotificationEvent;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

/** An in-app notification payload. To not be queried directly */
export type InAppNotificationPayload = {
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadOrganization = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadOrganization';
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadOrganizationMessageDirect = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadOrganizationMessageDirect';
  /** The message content. */
  message: Scalars['String']['output'];
  /** The organization. */
  organization: Contributor;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadOrganizationMessageRoom = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadOrganizationMessageRoom';
  /** The comment that mentioned the organization. */
  comment?: Maybe<Scalars['String']['output']>;
  /** The organization. */
  organization: Organization;
  /** The Room ID with of the comment. */
  roomID?: Maybe<Scalars['String']['output']>;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadPlatform = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadPlatform';
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadPlatformForumDiscussion = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadPlatformForumDiscussion';
  /** The comment ID. */
  comment: Scalars['String']['output'];
  /** The discussion ID. */
  discussion: Scalars['String']['output'];
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadPlatformGlobalRoleChange = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadPlatformGlobalRoleChange';
  /** The new role. */
  role?: Maybe<Scalars['String']['output']>;
  /** The payload type. */
  type: NotificationEventPayload;
  /** The User whose role was changed. */
  user?: Maybe<User>;
};

export type InAppNotificationPayloadPlatformUser = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadPlatformUser';
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadPlatformUserMessageRoom = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadPlatformUserMessageRoom';
  /** The details of the message. */
  messageDetails: MessageDetails;
  /** The payload type. */
  type: NotificationEventPayload;
  /** The User for the message. */
  user?: Maybe<User>;
};

export type InAppNotificationPayloadPlatformUserProfileRemoved = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadPlatformUserProfileRemoved';
  /** The payload type. */
  type: NotificationEventPayload;
  /** The display name of the User that was removed. */
  userDisplayName?: Maybe<Scalars['String']['output']>;
  /** The email of the User that was removed. */
  userEmail?: Maybe<Scalars['String']['output']>;
};

export type InAppNotificationPayloadSpace = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpace';
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadSpaceCollaborationCallout = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpaceCollaborationCallout';
  /** The Callout that was published. */
  callout?: Maybe<Callout>;
  /** Where the callout is located. */
  space?: Maybe<Space>;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadSpaceCollaborationCalloutPostComment = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpaceCollaborationCalloutPostComment';
  /** The Callout that was published. */
  callout?: Maybe<Callout>;
  /** The details of the message. */
  messageDetails: MessageDetails;
  /** The Space where the comment was made. */
  space?: Maybe<Space>;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadSpaceCommunicationMessageDirect = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpaceCommunicationMessageDirect';
  /** The message content. */
  message: Scalars['String']['output'];
  /** The Space where the message was sent. */
  space?: Maybe<Space>;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadSpaceCommunicationUpdate = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpaceCommunicationUpdate';
  /** The Space where the update was sent. */
  space?: Maybe<Space>;
  /** The payload type. */
  type: NotificationEventPayload;
  /** The update content. */
  update?: Maybe<Scalars['String']['output']>;
};

export type InAppNotificationPayloadSpaceCommunityApplication = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpaceCommunityApplication';
  /** The Application that the notification is related to. */
  application?: Maybe<Application>;
  /** The Space that the application was made to. */
  space?: Maybe<Space>;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadSpaceCommunityContributor = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpaceCommunityContributor';
  /** The Contributor that joined. */
  contributor?: Maybe<Contributor>;
  /** The Space that was joined. */
  space?: Maybe<Space>;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadSpaceCommunityInvitation = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpaceCommunityInvitation';
  /** The Space that the invitation is for. */
  space?: Maybe<Space>;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadSpaceCommunityInvitationPlatform = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadSpaceCommunityInvitationPlatform';
  /** The Space that the invitation is for. */
  space?: Maybe<Space>;
  /** The payload type. */
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadUserMessageDirect = InAppNotificationPayload & {
  __typename?: 'InAppNotificationPayloadUserMessageDirect';
  /** The message content. */
  message?: Maybe<Scalars['String']['output']>;
  /** The payload type. */
  type: NotificationEventPayload;
  /** The User that was sent the message. */
  user?: Maybe<User>;
};

export type InnovationFlow = {
  __typename?: 'InnovationFlow';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The currently selected State in this Flow. */
  currentState?: Maybe<InnovationFlowState>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The Profile for this InnovationFlow. */
  profile: Profile;
  /** The settings for this InnovationFlow. */
  settings: InnovationFlowSettings;
  /** The States for this InnovationFlow. */
  states: Array<InnovationFlowState>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type InnovationFlowSettings = {
  __typename?: 'InnovationFlowSettings';
  /** The maximum number of allowed states. */
  maximumNumberOfStates: Scalars['Float']['output'];
  /** The minimum number of allowed states */
  minimumNumberOfStates: Scalars['Float']['output'];
};

export type InnovationFlowState = {
  __typename?: 'InnovationFlowState';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The explanation text to clarify the state. */
  description?: Maybe<Scalars['Markdown']['output']>;
  /** The display name for the State */
  displayName: Scalars['String']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The Settings associated with this InnovationFlowState. */
  settings: InnovationFlowStateSettings;
  /** The sorting order for this State. */
  sortOrder: Scalars['Float']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type InnovationFlowStateSettings = {
  __typename?: 'InnovationFlowStateSettings';
  /** Whether new callouts can be added to this State. */
  allowNewCallouts: Scalars['Boolean']['output'];
};

export type InnovationHub = {
  __typename?: 'InnovationHub';
  /** The Innovation Hub account. */
  account: Account;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Flag to control if this InnovationHub is listed in the platform store. */
  listedInStore: Scalars['Boolean']['output'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The Innovation Hub profile. */
  profile: Profile;
  /** The InnovationHub provider. */
  provider: Contributor;
  /** Visibility of the InnovationHub in searches. */
  searchVisibility: SearchVisibility;
  spaceListFilter?: Maybe<Array<Space>>;
  /** If defined, what type of visibility to filter the Spaces on. You can have only one type of filter active at any given time. */
  spaceVisibilityFilter?: Maybe<SpaceVisibility>;
  /** The subdomain associated with this Innovation Hub. */
  subdomain: Scalars['String']['output'];
  /** Type of Innovation Hub */
  type: InnovationHubType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export enum InnovationHubType {
  List = 'LIST',
  Visibility = 'VISIBILITY',
}

export type InnovationPack = {
  __typename?: 'InnovationPack';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Flag to control if this InnovationPack is listed in the platform store. */
  listedInStore: Scalars['Boolean']['output'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The Profile for this InnovationPack. */
  profile: Profile;
  /** The InnovationPack provider. */
  provider: Contributor;
  /** Visibility of the InnovationPack in searches. */
  searchVisibility: SearchVisibility;
  /** The templatesSet in use by this InnovationPack */
  templatesSet?: Maybe<TemplatesSet>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type InnovationPacksInput = {
  /** The number of Discussion entries to return; if omitted return all InnovationPacks. */
  limit?: InputMaybe<Scalars['Float']['input']>;
  /** The sort order of the InnovationPacks to return. Defaults to number of templates Descending. */
  orderBy?: InputMaybe<InnovationPacksOrderBy>;
};

export enum InnovationPacksOrderBy {
  NumberOfTemplatesAsc = 'NUMBER_OF_TEMPLATES_ASC',
  NumberOfTemplatesDesc = 'NUMBER_OF_TEMPLATES_DESC',
  Random = 'RANDOM',
}

export type InputCreatorQueryResults = {
  __typename?: 'InputCreatorQueryResults';
  /** Create an input based on the provided Callout */
  callout?: Maybe<CreateCalloutData>;
  /** Create an input based on the provided Collaboration */
  collaboration?: Maybe<CreateCollaborationData>;
  /** Create an input based on the provided Community Guidelines */
  communityGuidelines?: Maybe<CreateCommunityGuidelinesData>;
  /** Create an input based on the provided InnovationFlow */
  innovationFlow?: Maybe<CreateInnovationFlowData>;
  /** Create an input based on the provided Whiteboard */
  whiteboard?: Maybe<CreateWhiteboardData>;
};

export type InputCreatorQueryResultsCalloutArgs = {
  ID: Scalars['UUID']['input'];
};

export type InputCreatorQueryResultsCollaborationArgs = {
  ID: Scalars['UUID']['input'];
};

export type InputCreatorQueryResultsCommunityGuidelinesArgs = {
  ID: Scalars['UUID']['input'];
};

export type InputCreatorQueryResultsInnovationFlowArgs = {
  ID: Scalars['UUID']['input'];
};

export type InputCreatorQueryResultsWhiteboardArgs = {
  ID: Scalars['UUID']['input'];
};

export type Invitation = {
  __typename?: 'Invitation';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Contributor who is invited. */
  contributor: Contributor;
  /** The type of contributor that is invited. */
  contributorType: RoleSetContributorType;
  /** The User who triggered the invitation. */
  createdBy?: Maybe<User>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** Additional roles to assign to the Contributor, in addition to the entry Role. */
  extraRoles: Array<RoleName>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Whether to also add the invited contributor to the parent community. */
  invitedToParent: Scalars['Boolean']['output'];
  /** Is this lifecycle in a final state (done). */
  isFinalized: Scalars['Boolean']['output'];
  lifecycle: Lifecycle;
  /** The next events of this Lifecycle. */
  nextEvents: Array<Scalars['String']['output']>;
  /** The current state of this Lifecycle. */
  state: Scalars['String']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  welcomeMessage?: Maybe<Scalars['String']['output']>;
};

export type InvitationEventInput = {
  eventName: Scalars['String']['input'];
  invitationID: Scalars['UUID']['input'];
};

export type InviteForEntryRoleOnRoleSetInput = {
  /** Additional roles to assign in addition to the entry Role. */
  extraRoles: Array<RoleName>;
  /** The identifiers for the contributors being invited. */
  invitedContributorIDs: Array<Scalars['UUID']['input']>;
  invitedUserEmails: Array<Scalars['String']['input']>;
  roleSetID: Scalars['UUID']['input'];
  /** The welcome message to send */
  welcomeMessage?: InputMaybe<Scalars['String']['input']>;
};

export type JoinAsEntryRoleOnRoleSetInput = {
  roleSetID: Scalars['UUID']['input'];
};

export type KnowledgeBase = {
  __typename?: 'KnowledgeBase';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The calloutsSet with Callouts in use by this KnowledgeBase */
  calloutsSet: CalloutsSet;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The Profile for describing this KnowledgeBase. */
  profile: Profile;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type LatestReleaseDiscussion = {
  __typename?: 'LatestReleaseDiscussion';
  /** Id of the latest release discussion. */
  id: Scalars['String']['output'];
  /** NameID of the latest release discussion. */
  nameID: Scalars['String']['output'];
};

export type Library = {
  __typename?: 'Library';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The InnovationHub listed on this platform */
  innovationHubs: Array<InnovationHub>;
  /** The Innovation Packs in the platform Innovation Library. */
  innovationPacks: Array<InnovationPack>;
  /** The Templates in the Innovation Library, together with information about the InnovationPack. */
  templates: Array<TemplateResult>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The VirtualContributors listed on this platform */
  virtualContributors: Array<VirtualContributor>;
};

export type LibraryInnovationPacksArgs = {
  queryData?: InputMaybe<InnovationPacksInput>;
};

export type LibraryTemplatesArgs = {
  filter?: InputMaybe<LibraryTemplatesFilterInput>;
};

export type LibraryTemplatesFilterInput = {
  /** Return Templates within the Library matching the specified Template Types. */
  types?: InputMaybe<Array<TemplateType>>;
};

export type License = {
  __typename?: 'License';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The set of License Entitlement Types on that entity. */
  availableEntitlements?: Maybe<Array<LicenseEntitlementType>>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The set of Entitlements associated with the License applicable to this entity. */
  entitlements: Array<LicenseEntitlement>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The type of entity that this License is being used with. */
  type?: Maybe<LicenseType>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type LicenseEntitlement = {
  __typename?: 'LicenseEntitlement';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** Data type of the entitlement, e.g. Limit, Feature flag etc. */
  dataType: LicenseEntitlementDataType;
  /** If the Entitlement is enabled */
  enabled: Scalars['Boolean']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Whether the specified entitlement is available. */
  isAvailable: Scalars['Boolean']['output'];
  /** Limit of the entitlement */
  limit: Scalars['Float']['output'];
  /** Type of the entitlement, e.g. Space, Whiteboard contributors etc. */
  type: LicenseEntitlementType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The amount of the spcified entitlement used. */
  usage: Scalars['Float']['output'];
};

export enum LicenseEntitlementDataType {
  Flag = 'FLAG',
  Limit = 'LIMIT',
}

export enum LicenseEntitlementType {
  AccountInnovationHub = 'ACCOUNT_INNOVATION_HUB',
  AccountInnovationPack = 'ACCOUNT_INNOVATION_PACK',
  AccountSpaceFree = 'ACCOUNT_SPACE_FREE',
  AccountSpacePlus = 'ACCOUNT_SPACE_PLUS',
  AccountSpacePremium = 'ACCOUNT_SPACE_PREMIUM',
  AccountVirtualContributor = 'ACCOUNT_VIRTUAL_CONTRIBUTOR',
  SpaceFlagMemoMultiUser = 'SPACE_FLAG_MEMO_MULTI_USER',
  SpaceFlagSaveAsTemplate = 'SPACE_FLAG_SAVE_AS_TEMPLATE',
  SpaceFlagVirtualContributorAccess = 'SPACE_FLAG_VIRTUAL_CONTRIBUTOR_ACCESS',
  SpaceFlagWhiteboardMultiUser = 'SPACE_FLAG_WHITEBOARD_MULTI_USER',
  SpaceFree = 'SPACE_FREE',
  SpacePlus = 'SPACE_PLUS',
  SpacePremium = 'SPACE_PREMIUM',
}

export type LicensePlan = {
  __typename?: 'LicensePlan';
  /** Assign this plan to all new Organization accounts */
  assignToNewOrganizationAccounts: Scalars['Boolean']['output'];
  /** Assign this plan to all new User accounts */
  assignToNewUserAccounts: Scalars['Boolean']['output'];
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** Is this plan enabled? */
  enabled: Scalars['Boolean']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Is this plan free? */
  isFree: Scalars['Boolean']['output'];
  /** The credential to represent this plan */
  licenseCredential: LicensingCredentialBasedCredentialType;
  /** The name of the License Plan */
  name: Scalars['String']['output'];
  /** The price per month of this plan. */
  pricePerMonth?: Maybe<Scalars['Float']['output']>;
  /** Does this plan require contact support */
  requiresContactSupport: Scalars['Boolean']['output'];
  /** Does this plan require a payment method? */
  requiresPaymentMethod: Scalars['Boolean']['output'];
  /** The sorting order for this Plan. */
  sortOrder: Scalars['Float']['output'];
  /** Is there a trial period enabled */
  trialEnabled: Scalars['Boolean']['output'];
  /** The type of this License Plan. */
  type: LicensingCredentialBasedPlanType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type LicensePolicy = {
  __typename?: 'LicensePolicy';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The set of credential rules that are contained by this License Policy. */
  credentialRules: Array<LicensingCredentialBasedPolicyCredentialRule>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export enum LicenseType {
  Account = 'ACCOUNT',
  Collaboration = 'COLLABORATION',
  Roleset = 'ROLESET',
  Space = 'SPACE',
  TemplateContentSpace = 'TEMPLATE_CONTENT_SPACE',
  Whiteboard = 'WHITEBOARD',
}

export type Licensing = {
  __typename?: 'Licensing';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The License Plans in use on the platform. */
  plans: Array<LicensePlan>;
  /** The LicensePolicy in use by the Licensing setup. */
  policy: LicensePolicy;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export enum LicensingCredentialBasedCredentialType {
  AccountLicensePlus = 'ACCOUNT_LICENSE_PLUS',
  SpaceFeatureMemoMultiUser = 'SPACE_FEATURE_MEMO_MULTI_USER',
  SpaceFeatureSaveAsTemplate = 'SPACE_FEATURE_SAVE_AS_TEMPLATE',
  SpaceFeatureVirtualContributors = 'SPACE_FEATURE_VIRTUAL_CONTRIBUTORS',
  SpaceFeatureWhiteboardMultiUser = 'SPACE_FEATURE_WHITEBOARD_MULTI_USER',
  SpaceLicenseEnterprise = 'SPACE_LICENSE_ENTERPRISE',
  SpaceLicenseFree = 'SPACE_LICENSE_FREE',
  SpaceLicensePlus = 'SPACE_LICENSE_PLUS',
  SpaceLicensePremium = 'SPACE_LICENSE_PREMIUM',
}

export enum LicensingCredentialBasedPlanType {
  AccountFeatureFlag = 'ACCOUNT_FEATURE_FLAG',
  AccountPlan = 'ACCOUNT_PLAN',
  SpaceFeatureFlag = 'SPACE_FEATURE_FLAG',
  SpacePlan = 'SPACE_PLAN',
}

export type LicensingCredentialBasedPolicyCredentialRule = {
  __typename?: 'LicensingCredentialBasedPolicyCredentialRule';
  credentialType: LicensingCredentialBasedCredentialType;
  grantedEntitlements: Array<LicensingGrantedEntitlement>;
  name?: Maybe<Scalars['String']['output']>;
};

export type LicensingGrantedEntitlement = {
  __typename?: 'LicensingGrantedEntitlement';
  limit: Scalars['Float']['output'];
  /** The entitlement that is granted. */
  type: LicenseEntitlementType;
};

export type Lifecycle = {
  __typename?: 'Lifecycle';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type Link = {
  __typename?: 'Link';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The Profile for framing the associated Link Contribution. */
  profile: Profile;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** URI of the Link */
  uri: Scalars['String']['output'];
};

export type Location = {
  __typename?: 'Location';
  addressLine1?: Maybe<Scalars['String']['output']>;
  addressLine2?: Maybe<Scalars['String']['output']>;
  /** City of the location. */
  city?: Maybe<Scalars['String']['output']>;
  country?: Maybe<Scalars['String']['output']>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The GeoLocation for this Location, derived from (City, Country) if those are set. */
  geoLocation: GeoLocation;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  postalCode?: Maybe<Scalars['String']['output']>;
  stateOrProvince?: Maybe<Scalars['String']['output']>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type LookupByNameQueryResults = {
  __typename?: 'LookupByNameQueryResults';
  /** Lookup the ID of the specified InnovationHub using a NameID */
  innovationHub?: Maybe<Scalars['String']['output']>;
  /** Lookup the ID of the specified InnovationPack using a NameID */
  innovationPack?: Maybe<Scalars['String']['output']>;
  /** Lookup the ID of the specified Organization using a NameID */
  organization?: Maybe<Scalars['String']['output']>;
  /** Lookup a Space using a NameID */
  space?: Maybe<Space>;
  /** Lookup the ID of the specified Template using a templatesSetId and the template NameID */
  template?: Maybe<Scalars['String']['output']>;
  /** Lookup the ID of the specified User using a NameID */
  user?: Maybe<Scalars['String']['output']>;
  /** Lookup the ID of the specified Virtual Contributor using a NameID */
  virtualContributor?: Maybe<Scalars['String']['output']>;
};

export type LookupByNameQueryResultsInnovationHubArgs = {
  NAMEID: Scalars['NameID']['input'];
};

export type LookupByNameQueryResultsInnovationPackArgs = {
  NAMEID: Scalars['NameID']['input'];
};

export type LookupByNameQueryResultsOrganizationArgs = {
  NAMEID: Scalars['NameID']['input'];
};

export type LookupByNameQueryResultsSpaceArgs = {
  NAMEID: Scalars['NameID']['input'];
};

export type LookupByNameQueryResultsTemplateArgs = {
  NAMEID: Scalars['NameID']['input'];
  templatesSetID: Scalars['UUID']['input'];
};

export type LookupByNameQueryResultsUserArgs = {
  NAMEID: Scalars['NameID']['input'];
};

export type LookupByNameQueryResultsVirtualContributorArgs = {
  NAMEID: Scalars['NameID']['input'];
};

export type LookupMyPrivilegesQueryResults = {
  __typename?: 'LookupMyPrivilegesQueryResults';
  /** Lookup myPrivileges on the specified Account */
  account?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Application */
  application?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Calendar */
  calendar?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified CalendarEvent */
  calendarEvent?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Callout */
  callout?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Collaboration */
  collaboration?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Community */
  community?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Community guidelines */
  communityGuidelines?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Document */
  document?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified InnovationFlow */
  innovationFlow?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified InnovationHub */
  innovationHub?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified InnovationPack */
  innovationPack?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Invitation */
  invitation?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified License */
  license?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Post */
  post?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Profile */
  profile?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified RoleSet */
  roleSet?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Room */
  room?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Space */
  space?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified SpaceAbout */
  spaceAbout?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified StorageAggregator */
  storageAggregator?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified StorageBucket */
  storageBucket?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Template */
  template?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified TemplatesManager */
  templatesManager?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified TemplatesSet */
  templatesSet?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified User */
  user?: Maybe<Array<AuthorizationPrivilege>>;
  /** A particular VirtualContributor */
  virtualContributor?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup myPrivileges on the specified Whiteboard */
  whiteboard?: Maybe<Array<AuthorizationPrivilege>>;
};

export type LookupMyPrivilegesQueryResultsAccountArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsApplicationArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsCalendarArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsCalendarEventArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsCalloutArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsCollaborationArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsCommunityArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsCommunityGuidelinesArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsDocumentArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsInnovationFlowArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsInnovationHubArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsInnovationPackArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsInvitationArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsLicenseArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsPostArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsProfileArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsRoleSetArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsRoomArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsSpaceArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsSpaceAboutArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsStorageAggregatorArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsStorageBucketArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsTemplateArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsTemplatesManagerArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsTemplatesSetArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsUserArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsVirtualContributorArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupMyPrivilegesQueryResultsWhiteboardArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResults = {
  __typename?: 'LookupQueryResults';
  /** Lookup the specified SpaceAbout */
  about?: Maybe<SpaceAbout>;
  /** Lookup the specified Account */
  account?: Maybe<Account>;
  /** Lookup the specified Application */
  application?: Maybe<Application>;
  /** Lookup the specified Authorization Policy */
  authorizationPolicy?: Maybe<Authorization>;
  /** The privileges granted to the specified user based on this Authorization Policy. */
  authorizationPrivilegesForUser?: Maybe<Array<AuthorizationPrivilege>>;
  /** Lookup the specified Calendar */
  calendar?: Maybe<Calendar>;
  /** Lookup the specified CalendarEvent */
  calendarEvent?: Maybe<CalendarEvent>;
  /** Lookup the specified Callout */
  callout?: Maybe<Callout>;
  /** Lookup the specified CalloutsSet */
  calloutsSet?: Maybe<CalloutsSet>;
  /** Lookup the specified Collaboration */
  collaboration?: Maybe<Collaboration>;
  /** Lookup the specified Community */
  community?: Maybe<Community>;
  /** Lookup the specified Community guidelines */
  communityGuidelines?: Maybe<CommunityGuidelines>;
  /** Lookup the specified Document */
  document?: Maybe<Document>;
  /** Lookup the specified InnovationFlow */
  innovationFlow?: Maybe<InnovationFlow>;
  /** Lookup the specified InnovationHub */
  innovationHub?: Maybe<InnovationHub>;
  /** Lookup the specified InnovationPack */
  innovationPack?: Maybe<InnovationPack>;
  /** Lookup the specified Invitation */
  invitation?: Maybe<Invitation>;
  /** Lookup as specific KnowledgeBase */
  knowledgeBase: KnowledgeBase;
  /** Lookup the specified License */
  license?: Maybe<License>;
  /** Lookup the specified Memo */
  memo?: Maybe<Memo>;
  /** Lookup myPrivileges on the specified entity. */
  myPrivileges?: Maybe<LookupMyPrivilegesQueryResults>;
  /** Lookup the specified Organization using a ID */
  organization?: Maybe<Organization>;
  /** Lookup the specified PlatformInvitation */
  platformInvitation?: Maybe<PlatformInvitation>;
  /** Lookup the specified Post */
  post?: Maybe<Post>;
  /** Lookup the specified Profile */
  profile?: Maybe<Profile>;
  /** Lookup the specified RoleSet */
  roleSet?: Maybe<RoleSet>;
  /** Lookup the specified Room */
  room?: Maybe<Room>;
  /** Lookup the specified Space */
  space?: Maybe<Space>;
  /** Lookup the specified StorageAggregator */
  storageAggregator?: Maybe<StorageAggregator>;
  /** Lookup the specified StorageBucket */
  storageBucket?: Maybe<StorageBucket>;
  /** Lookup the specified Template */
  template?: Maybe<Template>;
  /** Lookup the specified Space Content Template */
  templateContentSpace?: Maybe<TemplateContentSpace>;
  /** Lookup the specified TemplatesManager */
  templatesManager?: Maybe<TemplatesManager>;
  /** Lookup the specified TemplatesSet */
  templatesSet?: Maybe<TemplatesSet>;
  /** A particular User */
  user?: Maybe<User>;
  /** A particular VirtualContributor */
  virtualContributor?: Maybe<VirtualContributor>;
  /** Lookup the specified Whiteboard */
  whiteboard?: Maybe<Whiteboard>;
};

export type LookupQueryResultsAboutArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsAccountArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsApplicationArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsAuthorizationPolicyArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsAuthorizationPrivilegesForUserArgs = {
  authorizationPolicyID: Scalars['UUID']['input'];
  userID: Scalars['UUID']['input'];
};

export type LookupQueryResultsCalendarArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsCalendarEventArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsCalloutArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsCalloutsSetArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsCollaborationArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsCommunityArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsCommunityGuidelinesArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsDocumentArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsInnovationFlowArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsInnovationHubArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsInnovationPackArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsInvitationArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsKnowledgeBaseArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsLicenseArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsMemoArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsOrganizationArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsPlatformInvitationArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsPostArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsProfileArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsRoleSetArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsRoomArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsSpaceArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsStorageAggregatorArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsStorageBucketArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsTemplateArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsTemplateContentSpaceArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsTemplatesManagerArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsTemplatesSetArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsUserArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsVirtualContributorArgs = {
  ID: Scalars['UUID']['input'];
};

export type LookupQueryResultsWhiteboardArgs = {
  ID: Scalars['UUID']['input'];
};

export type MeQueryResults = {
  __typename?: 'MeQueryResults';
  /** The community applications current authenticated user can act on. */
  communityApplications: Array<CommunityApplicationResult>;
  /** The invitations the current authenticated user can act on. */
  communityInvitations: Array<CommunityInvitationResult>;
  /** The number of invitations the current authenticated user can act on. */
  communityInvitationsCount: Scalars['Float']['output'];
  /** The query id */
  id: Scalars['String']['output'];
  /** The Spaces I am contributing to */
  mySpaces: Array<MySpaceResults>;
  /** Get all notifications for the logged in user. */
  notifications: Array<InAppNotification>;
  /** The number of unread notifications for the current authenticated user. */
  notificationsUnreadCount: Scalars['Float']['output'];
  /** The Spaces the current user is a member of as a flat list. */
  spaceMembershipsFlat: Array<CommunityMembershipResult>;
  /** The hierarchy of the Spaces the current user is a member. */
  spaceMembershipsHierarchical: Array<CommunityMembershipResult>;
  /** The current authenticated User;  null if not yet registered on the platform */
  user?: Maybe<User>;
};

export type MeQueryResultsCommunityApplicationsArgs = {
  states?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type MeQueryResultsCommunityInvitationsArgs = {
  states?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type MeQueryResultsCommunityInvitationsCountArgs = {
  states?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type MeQueryResultsMySpacesArgs = {
  limit?: InputMaybe<Scalars['Float']['input']>;
};

export type MeQueryResultsNotificationsArgs = {
  filter?: InputMaybe<NotificationEventsFilterInput>;
};

export type MeQueryResultsNotificationsUnreadCountArgs = {
  filter?: InputMaybe<NotificationEventsFilterInput>;
};

export type MeQueryResultsSpaceMembershipsHierarchicalArgs = {
  limit?: InputMaybe<Scalars['Float']['input']>;
};

export type Memo = {
  __typename?: 'Memo';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The last saved binary stateV2 of the Yjs document, used to collaborate on the Memo, represented in base64. */
  content?: Maybe<Scalars['String']['output']>;
  /** The policy governing who can update the Memo content. */
  contentUpdatePolicy: ContentUpdatePolicy;
  /** The user that created this Memo */
  createdBy?: Maybe<User>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Whether the Memo is multi-user enabled on Space level. */
  isMultiUser: Scalars['Boolean']['output'];
  /** The last saved content of the Memo, represented in Markdown. */
  markdown?: Maybe<Scalars['Markdown']['output']>;
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The Profile for this Memo. */
  profile: Profile;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

/** A message that was sent in a chat room */
export type Message = {
  __typename?: 'Message';
  /** The id for the message event. */
  id: Scalars['MessageID']['output'];
  /** The message being sent */
  message: Scalars['Markdown']['output'];
  /** Reactions on this message */
  reactions: Array<Reaction>;
  /** The User or Virtual Contributor that created this Message */
  sender?: Maybe<Contributor>;
  /** The message being replied to */
  threadID?: Maybe<Scalars['String']['output']>;
  /** The server timestamp in UTC */
  timestamp: Scalars['Float']['output'];
};

/** A detailed answer to a question, typically from an AI service. */
export type MessageAnswerQuestion = {
  __typename?: 'MessageAnswerQuestion';
  /** Error message if an error occurred */
  error?: Maybe<Scalars['String']['output']>;
  /** The id of the answer; null if an error was returned */
  id?: Maybe<Scalars['String']['output']>;
  /** The original question */
  question: Scalars['String']['output'];
  /** Message successfully sent. If false, error will have the reason. */
  success: Scalars['Boolean']['output'];
};

/** Details about a message, including the room it was sent in and the parent entity that is using the room. */
export type MessageDetails = {
  __typename?: 'MessageDetails';
  /** The message that was sent. */
  message: Scalars['String']['output'];
  /** The parent entity that is using the room the message was sent in. */
  parent: MessageParent;
  /** The Room in which the message that was sent. */
  room: Room;
};

/** Details about the parent entity that is using the room the message was sent in. */
export type MessageParent = {
  __typename?: 'MessageParent';
  /** The display name of the parent entity. */
  displayName: Scalars['String']['output'];
  /** The ID of the parent entity. */
  id: Scalars['String']['output'];
  /** The URL of the parent entity. */
  url: Scalars['String']['output'];
};

export type Metadata = {
  __typename?: 'Metadata';
  /** Collection of metadata about Alkemio services. */
  services: Array<ServiceMetadata>;
};

export type MigrateEmbeddings = {
  __typename?: 'MigrateEmbeddings';
  /** Result from the mutation execution. */
  success: Scalars['Boolean']['output'];
};

export enum MimeType {
  Avif = 'AVIF',
  Bmp = 'BMP',
  Doc = 'DOC',
  Docx = 'DOCX',
  Gif = 'GIF',
  Jpeg = 'JPEG',
  Jpg = 'JPG',
  Odp = 'ODP',
  Ods = 'ODS',
  Odt = 'ODT',
  Pdf = 'PDF',
  Png = 'PNG',
  Potm = 'POTM',
  Potx = 'POTX',
  Ppsm = 'PPSM',
  Ppsx = 'PPSX',
  Ppt = 'PPT',
  Pptm = 'PPTM',
  Pptx = 'PPTX',
  Svg = 'SVG',
  Webp = 'WEBP',
  Xls = 'XLS',
  Xlsx = 'XLSX',
  Xpng = 'XPNG',
}

export type ModelCardAiEngineResult = {
  __typename?: 'ModelCardAiEngineResult';
  /** Access to detailed information on the underlying models specifications */
  additionalTechnicalDetails: Scalars['String']['output'];
  /** Is the VC prompted to limit the responses to a specific body of knowledge? */
  areAnswersRestrictedToBodyOfKnowledge: Scalars['String']['output'];
  /** Can the VC access or search the web? */
  canAccessWebWhenAnswering: Scalars['Boolean']['output'];
  /** Where is the AI service hosted? */
  hostingLocation: Scalars['String']['output'];
  /** Is the AI Persona using an AI Engine not provided by Alkemio? */
  isExternal: Scalars['Boolean']['output'];
  /** Is interaction data used in any way for model training? Null means Unknown. */
  isInteractionDataUsedForTraining?: Maybe<Scalars['Boolean']['output']>;
  /** Does the VC use an open-weight model? */
  isUsingOpenWeightsModel: Scalars['Boolean']['output'];
};

export type ModelCardMonitoringResult = {
  __typename?: 'ModelCardMonitoringResult';
  /** Since Alkemio facilitates the interaction with the external provider, it holds an operational responsibility to monitor the service. As with all data and interactions on the platform, these are governed by our <a href="https://welcome.alkem.io/legal/#tc" target="_blank" ref="noreferer">Terms & Conditions</a>. */
  isUsageMonitoredByAlkemio: Scalars['Boolean']['output'];
};

export type ModelCardSpaceUsageResult = {
  __typename?: 'ModelCardSpaceUsageResult';
  /** The Flags for this Model Card Entry. */
  flags: Array<AiPersonaModelCardFlag>;
  /** The Model Card Entry type. */
  modelCardEntry: AiPersonaModelCardEntry;
};

export type MoveCalloutContributionInput = {
  /** ID of the Callout to move the Contribution to. */
  calloutID: Scalars['UUID']['input'];
  /** ID of the Contribution to move. */
  contributionID: Scalars['UUID']['input'];
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Adds an Iframe Allowed URL to the Platform Settings */
  addIframeAllowedURL: Array<Scalars['String']['output']>;
  /** Add a reaction to a message from the specified Room. */
  addReactionToMessageInRoom: Reaction;
  /** Ensure all community members are registered for communications. */
  adminCommunicationEnsureAccessToCommunications: Scalars['Boolean']['output'];
  /** Remove an orphaned room from messaging platform. */
  adminCommunicationRemoveOrphanedRoom: Scalars['Boolean']['output'];
  /** Allow updating the state flags of a particular rule. */
  adminCommunicationUpdateRoomState: Scalars['Boolean']['output'];
  /** Ingests new data into Elasticsearch from scratch. This will delete all existing data and ingest new data from the source. This is an admin only operation. */
  adminSearchIngestFromScratch: Scalars['String']['output'];
  /** Update the Avatar on the Profile with the spedified profileID to be stored as a Document. */
  adminUpdateContributorAvatars: Profile;
  /** Updates the GeoLocation data where required on the platform. */
  adminUpdateGeoLocationData: Scalars['Boolean']['output'];
  /** Remove the Kratos account associated with the specified User. Note: the Users profile on the platform is not deleted. */
  adminUserAccountDelete: User;
  /** Create a test customer on wingback. */
  adminWingbackCreateTestCustomer: Scalars['String']['output'];
  /** Get wingback customer entitlements. */
  adminWingbackGetCustomerEntitlements: Array<LicensingGrantedEntitlement>;
  /** Reset the Authorization Policy on the specified AiServer. */
  aiServerAuthorizationPolicyReset: AiServer;
  /** Creates a new AiPersonaService on the aiServer. */
  aiServerCreateAiPersonaService: AiPersonaService;
  /** Deletes the specified AiPersonaService. */
  aiServerDeleteAiPersonaService: AiPersonaService;
  /** Updates the specified AI Persona. */
  aiServerUpdateAiPersonaService: AiPersonaService;
  /** Apply to join the specified RoleSet in the entry Role. */
  applyForEntryRoleOnRoleSet: Application;
  /** Ask the chat engine for guidance. */
  askChatGuidanceQuestion: MessageAnswerQuestion;
  /** Assign the specified LicensePlan to an Account. */
  assignLicensePlanToAccount: Account;
  /** Assign the specified LicensePlan to a Space. */
  assignLicensePlanToSpace: Space;
  /** Assigns a User to a role on the Platform. */
  assignPlatformRoleToUser: User;
  /** Assigns an Organization a Role in the specified Community. */
  assignRoleToOrganization: Organization;
  /** Assigns a User to a role in the specified Community. */
  assignRoleToUser: User;
  /** Assigns a Virtual Contributor to a role in the specified Community. */
  assignRoleToVirtualContributor: VirtualContributor;
  /** Assigns a User as a member of the specified User Group. */
  assignUserToGroup: UserGroup;
  /** Ensure all access privileges for the platform roles are re-calculated */
  authorizationPlatformRolesAccessReset: Scalars['Boolean']['output'];
  /** Reset the Authorization Policy on all entities */
  authorizationPolicyResetAll: Scalars['String']['output'];
  /** Reset the Authorization Policy on the specified Account. */
  authorizationPolicyResetOnAccount: Account;
  /** Reset the Authorization Policy on the specified Organization. */
  authorizationPolicyResetOnOrganization: Organization;
  /** Reset the Authorization Policy on the specified Platform. */
  authorizationPolicyResetOnPlatform: Platform;
  /** Reset the Authorization policy on the specified User. */
  authorizationPolicyResetOnUser: User;
  /** Reset the specified Authorization Policy to global admin privileges */
  authorizationPolicyResetToGlobalAdminsAccess: Authorization;
  /** Generate Alkemio user credential offer */
  beginAlkemioUserVerifiedCredentialOfferInteraction: AgentBeginVerifiedCredentialOfferOutput;
  /** Generate community member credential offer */
  beginCommunityMemberVerifiedCredentialOfferInteraction: AgentBeginVerifiedCredentialOfferOutput;
  /** Generate verified credential share request */
  beginVerifiedCredentialRequestInteraction: AgentBeginVerifiedCredentialRequestOutput;
  /** Deletes collections nameID-... */
  cleanupCollections: MigrateEmbeddings;
  /** Move an L1 Space up in the hierarchy, to be a L0 Space. */
  convertSpaceL1ToSpaceL0: Space;
  /** Move an L1 Space down in the hierarchy within the same L0 Space, to be a L2 Space.       Restrictions: the Space L1 must remain within the same L0 Space.       Roles: all user, organization and virtual contributor role assignments are removed, with       the exception of Admin role assignments for Users. */
  convertSpaceL1ToSpaceL2: Space;
  /** Move an L2 Space up in the hierarchy, to be a L1 Space. */
  convertSpaceL2ToSpaceL1: Space;
  /** Convert a VC of type ALKEMIO_SPACE to be of type KNOWLEDGE_BASE. All Callouts from the Space currently being used are moved to the Knowledge Base. Note: only allowed for VCs using a Space within the same Account. */
  convertVirtualContributorToUseKnowledgeBase: VirtualContributor;
  /** Create a new Callout on the CalloutsSet. */
  createCalloutOnCalloutsSet: Callout;
  /** Create a guidance chat room. */
  createChatGuidanceRoom?: Maybe<Room>;
  /** Create a new Contribution on the Callout. */
  createContributionOnCallout: CalloutContribution;
  /** Creates a new Discussion as part of this Forum. */
  createDiscussion: Discussion;
  /** Create a new CalendarEvent on the Calendar. */
  createEventOnCalendar: CalendarEvent;
  /** Creates a new User Group in the specified Community. */
  createGroupOnCommunity: UserGroup;
  /** Creates a new User Group for the specified Organization. */
  createGroupOnOrganization: UserGroup;
  /** Create an Innovation Hub on the specified account */
  createInnovationHub: InnovationHub;
  /** Creates a new InnovationPack on an Account. */
  createInnovationPack: InnovationPack;
  /** Create a new LicensePlan on the Licensing. */
  createLicensePlan: LicensePlan;
  /** Creates a new Organization on the platform. */
  createOrganization: Organization;
  /** Creates a new Reference on the specified Profile. */
  createReferenceOnProfile: Reference;
  /** Creates a new Level Zero Space within the specified Account. */
  createSpace: Space;
  /** Create a new State on the InnovationFlow. */
  createStateOnInnovationFlow: InnovationFlowState;
  /** Creates a new Subspace within the specified Space. */
  createSubspace: Space;
  /** Creates a new Tagset on the specified Profile */
  createTagsetOnProfile: Tagset;
  /** Creates a new Template on the specified TemplatesSet. */
  createTemplate: Template;
  /** Creates a new Template on the specified TemplatesSet using the provided ContentSpace as content. */
  createTemplateFromContentSpace: Template;
  /** Creates a new Template on the specified TemplatesSet using the provided Space as content. */
  createTemplateFromSpace: Template;
  /** Creates a new User on the platform. */
  createUser: User;
  /** Creates a new User profile on the platform for a user that has a valid Authentication session. */
  createUserNewRegistration: User;
  /** Creates a new VirtualContributor on an Account. */
  createVirtualContributor: VirtualContributor;
  /** Creates an account in Wingback */
  createWingbackAccount: Scalars['String']['output'];
  /** Deletes the specified CalendarEvent. */
  deleteCalendarEvent: CalendarEvent;
  /** Delete a Callout. */
  deleteCallout: Callout;
  /** Deletes a contribution. */
  deleteContribution: CalloutContribution;
  /** Deletes the specified Discussion. */
  deleteDiscussion: Discussion;
  /** Deletes the specified Document. */
  deleteDocument: Document;
  /** Delete Innovation Hub. */
  deleteInnovationHub: InnovationHub;
  /** Deletes the specified InnovationPack. */
  deleteInnovationPack: InnovationPack;
  /** Removes the specified User invitation. */
  deleteInvitation: Invitation;
  /** Deletes the specified LicensePlan. */
  deleteLicensePlan: LicensePlan;
  /** Deletes the specified Link. */
  deleteLink: Link;
  /** Deletes the specified Memo. */
  deleteMemo: Memo;
  /** Deletes the specified Organization. */
  deleteOrganization: Organization;
  /** Removes the specified User platformInvitation. */
  deletePlatformInvitation: PlatformInvitation;
  /** Deletes the specified Post. */
  deletePost: Post;
  /** Deletes the specified Reference. */
  deleteReference: Reference;
  /** Deletes the specified Space. */
  deleteSpace: Space;
  /** Delete a  State on the InnovationFlow. */
  deleteStateOnInnovationFlow: InnovationFlowState;
  /** Deletes a Storage Bucket */
  deleteStorageBucket: StorageBucket;
  /** Deletes the specified Template. */
  deleteTemplate: Template;
  /** Deletes the specified User. */
  deleteUser: User;
  /** Removes the specified User Application. */
  deleteUserApplication: Application;
  /** Deletes the specified User Group. */
  deleteUserGroup: UserGroup;
  /** Deletes the specified VirtualContributor. */
  deleteVirtualContributor: VirtualContributor;
  /** Deletes the specified Whiteboard. */
  deleteWhiteboard: Whiteboard;
  /** Trigger an event on the Application. */
  eventOnApplication: Application;
  /** Trigger an event on the Invitation. */
  eventOnInvitation: Invitation;
  /** Trigger an event on the Organization Verification. */
  eventOnOrganizationVerification: OrganizationVerification;
  /** Grants an authorization credential to an Organization. */
  grantCredentialToOrganization: Organization;
  /** Grants an authorization credential to a User. */
  grantCredentialToUser: User;
  /** Invite new Contributors or users by email to join the specified RoleSet in the Entry Role. */
  inviteForEntryRoleOnRoleSet: Array<RoleSetInvitationResult>;
  /** Join the specified RoleSet using the entry Role, without going through an approval process. */
  joinRoleSet: RoleSet;
  /** Reset the License with Entitlements on the specified Account. */
  licenseResetOnAccount: Account;
  /** Mark multiple notifications as read. */
  markNotificationsAsRead: Scalars['Boolean']['output'];
  /** Mark multiple notifications as unread. */
  markNotificationsAsUnread: Scalars['Boolean']['output'];
  /** Sends a message on the specified User`s behalf and returns the room id */
  messageUser: Scalars['String']['output'];
  /** Moves the specified Contribution to another Callout. */
  moveContributionToCallout: CalloutContribution;
  /** Refresh the Bodies of Knowledge on All VCs */
  refreshAllBodiesOfKnowledge: Scalars['Boolean']['output'];
  /** Triggers a request to the backing AI Service to refresh the knowledge that is available to it. */
  refreshVirtualContributorBodyOfKnowledge: Scalars['Boolean']['output'];
  /** Empties the CommunityGuidelines. */
  removeCommunityGuidelinesContent: CommunityGuidelines;
  /** Removes an Iframe Allowed URL from the Platform Settings */
  removeIframeAllowedURL: Array<Scalars['String']['output']>;
  /** Removes a message. */
  removeMessageOnRoom: Scalars['MessageID']['output'];
  /** Removes a User from a Role on the Platform. */
  removePlatformRoleFromUser: User;
  /** Remove a reaction on a message from the specified Room. */
  removeReactionToMessageInRoom: Scalars['Boolean']['output'];
  /** Removes an Organization from a Role in the specified Community. */
  removeRoleFromOrganization: Organization;
  /** Removes a User from a Role in the specified Community. */
  removeRoleFromUser: User;
  /** Removes a Virtual from a Role in the specified Community. */
  removeRoleFromVirtualContributor: VirtualContributor;
  /** Removes the specified User from specified user group */
  removeUserFromGroup: UserGroup;
  /** Resets the interaction with the chat engine. */
  resetChatGuidance: Scalars['Boolean']['output'];
  /** Reset all license plans on Accounts */
  resetLicenseOnAccounts: Space;
  /** Removes an authorization credential from an Organization. */
  revokeCredentialFromOrganization: Organization;
  /** Removes an authorization credential from a User. */
  revokeCredentialFromUser: User;
  /** Revokes the specified LicensePlan on an Account. */
  revokeLicensePlanFromAccount: Account;
  /** Revokes the specified LicensePlan on a Space. */
  revokeLicensePlanFromSpace: Space;
  /** Sends a reply to a message from the specified Room. */
  sendMessageReplyToRoom: Message;
  /** Send message to Community Leads. */
  sendMessageToCommunityLeads: Scalars['Boolean']['output'];
  /** Send message to an Organization. */
  sendMessageToOrganization: Scalars['Boolean']['output'];
  /** Sends an comment message. Returns the id of the new Update message. */
  sendMessageToRoom: Message;
  /** Send message to a User. */
  sendMessageToUser: Scalars['Boolean']['output'];
  /** Transfer the specified Callout from its current CalloutsSet to the target CalloutsSet. Note: this is experimental, and only for GlobalAdmins. The user that executes the transfer becomes the creator of the Callout. */
  transferCallout: Callout;
  /** Transfer the specified InnovationHub to another Account. */
  transferInnovationHubToAccount: InnovationHub;
  /** Transfer the specified Innovation Pack to another Account. */
  transferInnovationPackToAccount: InnovationPack;
  /** Transfer the specified Space to another Account. */
  transferSpaceToAccount: Space;
  /** Transfer the specified Virtual Contributor to another Account. */
  transferVirtualContributorToAccount: InnovationPack;
  /** Updates the specified AiPersona. */
  updateAiPersona: AiPersona;
  /** User vote if a specific answer is relevant. */
  updateAnswerRelevance: Scalars['Boolean']['output'];
  /** Update the Application Form used by this RoleSet. */
  updateApplicationFormOnRoleSet: RoleSet;
  /** Update the baseline License Plan on the specified Account. */
  updateBaselineLicensePlanOnAccount: Account;
  /** Updates the specified CalendarEvent. */
  updateCalendarEvent: CalendarEvent;
  /** Update a Callout. */
  updateCallout: Callout;
  /** Update the information describing the publishing of the specified Callout. */
  updateCalloutPublishInfo: Callout;
  /** Update the visibility of the specified Callout. */
  updateCalloutVisibility: Callout;
  /** Update the sortOrder field of the supplied Callouts to increase as per the order that they are provided in. */
  updateCalloutsSortOrder: Array<Callout>;
  /** Updates a Tagset on a Classification. */
  updateClassificationTagset: Tagset;
  /** Updates a Collaboration, including InnovationFlow states, using the Space content from the specified Template. */
  updateCollaborationFromSpaceTemplate: Collaboration;
  /** Updates the CommunityGuidelines. */
  updateCommunityGuidelines: CommunityGuidelines;
  /** Update the sortOrder field of the Contributions of s Callout. */
  updateContributionsSortOrder: Array<CalloutContribution>;
  /** Updates the specified Discussion. */
  updateDiscussion: Discussion;
  /** Updates the specified Document. */
  updateDocument: Document;
  /** Updates the InnovationFlow. */
  updateInnovationFlow: InnovationFlow;
  /** Updates the InnovationFlow. */
  updateInnovationFlowCurrentState: InnovationFlow;
  /** Updates the specified InnovationFlowState. */
  updateInnovationFlowState: InnovationFlowState;
  /** Update the sortOrder field of the supplied InnovationFlowStates to increase as per the order that they are provided in. */
  updateInnovationFlowStatesSortOrder: Array<InnovationFlowState>;
  /** Update Innovation Hub. */
  updateInnovationHub: InnovationHub;
  /** Updates the InnovationPack. */
  updateInnovationPack: InnovationPack;
  /** Updates the LicensePlan. */
  updateLicensePlan: LicensePlan;
  /** Updates the specified Link. */
  updateLink: Link;
  /** Updates the specified Memo. */
  updateMemo: Memo;
  /** Update notification state and return the notification. */
  updateNotificationState: NotificationEventInAppState;
  /** Updates the specified Organization. */
  updateOrganization: Organization;
  /** Updates the specified Organization platform settings. */
  updateOrganizationPlatformSettings: Organization;
  /** Updates one of the Setting on an Organization */
  updateOrganizationSettings: Organization;
  /** Updates one of the Setting on the Platform */
  updatePlatformSettings: PlatformSettings;
  /** Updates the specified Post. */
  updatePost: Post;
  /** Updates the specified Profile. */
  updateProfile: Profile;
  /** Updates the specified Reference. */
  updateReference: Reference;
  /** Updates the Space. */
  updateSpace: Space;
  /** Update the platform settings, such as nameID, of the specified Space. */
  updateSpacePlatformSettings: Space;
  /** Updates one of the Setting on a Space */
  updateSpaceSettings: Space;
  /** Updates the specified Tagset. */
  updateTagset: Tagset;
  /** Updates the specified Template. */
  updateTemplate: Template;
  /** Updates the TemplateContentSpace. */
  updateTemplateContentSpace: TemplateContentSpace;
  /** Updates the specified Template Defaults. */
  updateTemplateDefault: TemplateDefault;
  /** Updates the specified Space Content Template using the provided Space. */
  updateTemplateFromSpace: Template;
  /** Updates the User. */
  updateUser: User;
  /** Updates the specified User Group. */
  updateUserGroup: UserGroup;
  /** Update the platform settings, such as nameID, email, for the specified User. */
  updateUserPlatformSettings: User;
  /** Updates one of the Setting on a User */
  updateUserSettings: User;
  /** Updates the specified VirtualContributor. */
  updateVirtualContributor: VirtualContributor;
  /** Updates one of the Setting on an Organization */
  updateVirtualContributorSettings: VirtualContributor;
  /** Updates the image URI for the specified Visual. */
  updateVisual: Visual;
  /** Updates the specified Whiteboard. */
  updateWhiteboard: Whiteboard;
  /** Create a new Document on the Storage and return the value as part of the returned Link. */
  uploadFileOnLink: Link;
  /** Create a new Document on the Storage and return the value as part of the returned Reference. */
  uploadFileOnReference: Reference;
  /** Create a new Document on the Storage and return the public Url. */
  uploadFileOnStorageBucket: Scalars['String']['output'];
  /** Uploads and sets an image for the specified Visual. */
  uploadImageOnVisual: Visual;
};

export type MutationAddIframeAllowedUrlArgs = {
  whitelistedURL: Scalars['String']['input'];
};

export type MutationAddReactionToMessageInRoomArgs = {
  reactionData: RoomAddReactionToMessageInput;
};

export type MutationAdminCommunicationEnsureAccessToCommunicationsArgs = {
  communicationData: CommunicationAdminEnsureAccessInput;
};

export type MutationAdminCommunicationRemoveOrphanedRoomArgs = {
  orphanedRoomData: CommunicationAdminRemoveOrphanedRoomInput;
};

export type MutationAdminCommunicationUpdateRoomStateArgs = {
  roomStateData: CommunicationAdminUpdateRoomStateInput;
};

export type MutationAdminUpdateContributorAvatarsArgs = {
  profileID: Scalars['UUID']['input'];
};

export type MutationAdminUserAccountDeleteArgs = {
  userID: Scalars['UUID']['input'];
};

export type MutationAdminWingbackGetCustomerEntitlementsArgs = {
  customerID: Scalars['String']['input'];
};

export type MutationAiServerCreateAiPersonaServiceArgs = {
  aiPersonaServiceData: CreateAiPersonaServiceInput;
};

export type MutationAiServerDeleteAiPersonaServiceArgs = {
  deleteData: DeleteAiPersonaServiceInput;
};

export type MutationAiServerUpdateAiPersonaServiceArgs = {
  aiPersonaServiceData: UpdateAiPersonaServiceInput;
};

export type MutationApplyForEntryRoleOnRoleSetArgs = {
  applicationData: ApplyForEntryRoleOnRoleSetInput;
};

export type MutationAskChatGuidanceQuestionArgs = {
  chatData: ChatGuidanceInput;
};

export type MutationAssignLicensePlanToAccountArgs = {
  planData: AssignLicensePlanToAccount;
};

export type MutationAssignLicensePlanToSpaceArgs = {
  planData: AssignLicensePlanToSpace;
};

export type MutationAssignPlatformRoleToUserArgs = {
  roleData: AssignPlatformRoleInput;
};

export type MutationAssignRoleToOrganizationArgs = {
  roleData: AssignRoleOnRoleSetToOrganizationInput;
};

export type MutationAssignRoleToUserArgs = {
  roleData: AssignRoleOnRoleSetToUserInput;
};

export type MutationAssignRoleToVirtualContributorArgs = {
  roleData: AssignRoleOnRoleSetToVirtualContributorInput;
};

export type MutationAssignUserToGroupArgs = {
  membershipData: AssignUserGroupMemberInput;
};

export type MutationAuthorizationPolicyResetOnAccountArgs = {
  authorizationResetData: AccountAuthorizationResetInput;
};

export type MutationAuthorizationPolicyResetOnOrganizationArgs = {
  authorizationResetData: OrganizationAuthorizationResetInput;
};

export type MutationAuthorizationPolicyResetOnUserArgs = {
  authorizationResetData: UserAuthorizationResetInput;
};

export type MutationAuthorizationPolicyResetToGlobalAdminsAccessArgs = {
  authorizationID: Scalars['String']['input'];
};

export type MutationBeginCommunityMemberVerifiedCredentialOfferInteractionArgs = {
  communityID: Scalars['String']['input'];
};

export type MutationBeginVerifiedCredentialRequestInteractionArgs = {
  types: Array<Scalars['String']['input']>;
};

export type MutationConvertSpaceL1ToSpaceL0Args = {
  convertData: ConvertSpaceL1ToSpaceL0Input;
};

export type MutationConvertSpaceL1ToSpaceL2Args = {
  convertData: ConvertSpaceL1ToSpaceL2Input;
};

export type MutationConvertSpaceL2ToSpaceL1Args = {
  convertData: ConvertSpaceL2ToSpaceL1Input;
};

export type MutationConvertVirtualContributorToUseKnowledgeBaseArgs = {
  conversionData: ConversionVcSpaceToVcKnowledgeBaseInput;
};

export type MutationCreateCalloutOnCalloutsSetArgs = {
  calloutData: CreateCalloutOnCalloutsSetInput;
};

export type MutationCreateContributionOnCalloutArgs = {
  contributionData: CreateContributionOnCalloutInput;
};

export type MutationCreateDiscussionArgs = {
  createData: ForumCreateDiscussionInput;
};

export type MutationCreateEventOnCalendarArgs = {
  eventData: CreateCalendarEventOnCalendarInput;
};

export type MutationCreateGroupOnCommunityArgs = {
  groupData: CreateUserGroupInput;
};

export type MutationCreateGroupOnOrganizationArgs = {
  groupData: CreateUserGroupInput;
};

export type MutationCreateInnovationHubArgs = {
  createData: CreateInnovationHubOnAccountInput;
};

export type MutationCreateInnovationPackArgs = {
  innovationPackData: CreateInnovationPackOnAccountInput;
};

export type MutationCreateLicensePlanArgs = {
  planData: CreateLicensePlanOnLicensingFrameworkInput;
};

export type MutationCreateOrganizationArgs = {
  organizationData: CreateOrganizationInput;
};

export type MutationCreateReferenceOnProfileArgs = {
  referenceInput: CreateReferenceOnProfileInput;
};

export type MutationCreateSpaceArgs = {
  spaceData: CreateSpaceOnAccountInput;
};

export type MutationCreateStateOnInnovationFlowArgs = {
  stateData: CreateStateOnInnovationFlowInput;
};

export type MutationCreateSubspaceArgs = {
  subspaceData: CreateSubspaceInput;
};

export type MutationCreateTagsetOnProfileArgs = {
  tagsetData: CreateTagsetOnProfileInput;
};

export type MutationCreateTemplateArgs = {
  templateData: CreateTemplateOnTemplatesSetInput;
};

export type MutationCreateTemplateFromContentSpaceArgs = {
  templateData: CreateTemplateFromContentSpaceOnTemplatesSetInput;
};

export type MutationCreateTemplateFromSpaceArgs = {
  templateData: CreateTemplateFromSpaceOnTemplatesSetInput;
};

export type MutationCreateUserArgs = {
  userData: CreateUserInput;
};

export type MutationCreateVirtualContributorArgs = {
  virtualContributorData: CreateVirtualContributorOnAccountInput;
};

export type MutationCreateWingbackAccountArgs = {
  accountID: Scalars['UUID']['input'];
};

export type MutationDeleteCalendarEventArgs = {
  deleteData: DeleteCalendarEventInput;
};

export type MutationDeleteCalloutArgs = {
  deleteData: DeleteCalloutInput;
};

export type MutationDeleteContributionArgs = {
  contributionID: Scalars['String']['input'];
};

export type MutationDeleteDiscussionArgs = {
  deleteData: DeleteDiscussionInput;
};

export type MutationDeleteDocumentArgs = {
  deleteData: DeleteDocumentInput;
};

export type MutationDeleteInnovationHubArgs = {
  deleteData: DeleteInnovationHubInput;
};

export type MutationDeleteInnovationPackArgs = {
  deleteData: DeleteInnovationPackInput;
};

export type MutationDeleteInvitationArgs = {
  deleteData: DeleteInvitationInput;
};

export type MutationDeleteLicensePlanArgs = {
  deleteData: DeleteLicensePlanInput;
};

export type MutationDeleteLinkArgs = {
  deleteData: DeleteLinkInput;
};

export type MutationDeleteMemoArgs = {
  memoData: DeleteMemoInput;
};

export type MutationDeleteOrganizationArgs = {
  deleteData: DeleteOrganizationInput;
};

export type MutationDeletePlatformInvitationArgs = {
  deleteData: DeletePlatformInvitationInput;
};

export type MutationDeletePostArgs = {
  deleteData: DeletePostInput;
};

export type MutationDeleteReferenceArgs = {
  deleteData: DeleteReferenceInput;
};

export type MutationDeleteSpaceArgs = {
  deleteData: DeleteSpaceInput;
};

export type MutationDeleteStateOnInnovationFlowArgs = {
  stateData: DeleteStateOnInnovationFlowInput;
};

export type MutationDeleteStorageBucketArgs = {
  deleteData: DeleteStorageBuckeetInput;
};

export type MutationDeleteTemplateArgs = {
  deleteData: DeleteTemplateInput;
};

export type MutationDeleteUserArgs = {
  deleteData: DeleteUserInput;
};

export type MutationDeleteUserApplicationArgs = {
  deleteData: DeleteApplicationInput;
};

export type MutationDeleteUserGroupArgs = {
  deleteData: DeleteUserGroupInput;
};

export type MutationDeleteVirtualContributorArgs = {
  deleteData: DeleteVirtualContributorInput;
};

export type MutationDeleteWhiteboardArgs = {
  whiteboardData: DeleteWhiteboardInput;
};

export type MutationEventOnApplicationArgs = {
  eventData: ApplicationEventInput;
};

export type MutationEventOnInvitationArgs = {
  eventData: InvitationEventInput;
};

export type MutationEventOnOrganizationVerificationArgs = {
  eventData: OrganizationVerificationEventInput;
};

export type MutationGrantCredentialToOrganizationArgs = {
  grantCredentialData: GrantOrganizationAuthorizationCredentialInput;
};

export type MutationGrantCredentialToUserArgs = {
  grantCredentialData: GrantAuthorizationCredentialInput;
};

export type MutationInviteForEntryRoleOnRoleSetArgs = {
  invitationData: InviteForEntryRoleOnRoleSetInput;
};

export type MutationJoinRoleSetArgs = {
  joinData: JoinAsEntryRoleOnRoleSetInput;
};

export type MutationLicenseResetOnAccountArgs = {
  resetData: AccountLicenseResetInput;
};

export type MutationMarkNotificationsAsReadArgs = {
  notificationIds: Array<Scalars['String']['input']>;
};

export type MutationMarkNotificationsAsUnreadArgs = {
  notificationIds: Array<Scalars['String']['input']>;
};

export type MutationMessageUserArgs = {
  messageData: UserSendMessageInput;
};

export type MutationMoveContributionToCalloutArgs = {
  moveContributionData: MoveCalloutContributionInput;
};

export type MutationRefreshVirtualContributorBodyOfKnowledgeArgs = {
  refreshData: RefreshVirtualContributorBodyOfKnowledgeInput;
};

export type MutationRemoveCommunityGuidelinesContentArgs = {
  communityGuidelinesData: RemoveCommunityGuidelinesContentInput;
};

export type MutationRemoveIframeAllowedUrlArgs = {
  whitelistedURL: Scalars['String']['input'];
};

export type MutationRemoveMessageOnRoomArgs = {
  messageData: RoomRemoveMessageInput;
};

export type MutationRemovePlatformRoleFromUserArgs = {
  roleData: RemovePlatformRoleInput;
};

export type MutationRemoveReactionToMessageInRoomArgs = {
  reactionData: RoomRemoveReactionToMessageInput;
};

export type MutationRemoveRoleFromOrganizationArgs = {
  roleData: RemoveRoleOnRoleSetFromOrganizationInput;
};

export type MutationRemoveRoleFromUserArgs = {
  roleData: RemoveRoleOnRoleSetFromUserInput;
};

export type MutationRemoveRoleFromVirtualContributorArgs = {
  roleData: RemoveRoleOnRoleSetFromVirtualContributorInput;
};

export type MutationRemoveUserFromGroupArgs = {
  membershipData: RemoveUserGroupMemberInput;
};

export type MutationRevokeCredentialFromOrganizationArgs = {
  revokeCredentialData: RevokeOrganizationAuthorizationCredentialInput;
};

export type MutationRevokeCredentialFromUserArgs = {
  revokeCredentialData: RevokeAuthorizationCredentialInput;
};

export type MutationRevokeLicensePlanFromAccountArgs = {
  planData: RevokeLicensePlanFromAccount;
};

export type MutationRevokeLicensePlanFromSpaceArgs = {
  planData: RevokeLicensePlanFromSpace;
};

export type MutationSendMessageReplyToRoomArgs = {
  messageData: RoomSendMessageReplyInput;
};

export type MutationSendMessageToCommunityLeadsArgs = {
  messageData: CommunicationSendMessageToCommunityLeadsInput;
};

export type MutationSendMessageToOrganizationArgs = {
  messageData: CommunicationSendMessageToOrganizationInput;
};

export type MutationSendMessageToRoomArgs = {
  messageData: RoomSendMessageInput;
};

export type MutationSendMessageToUserArgs = {
  messageData: CommunicationSendMessageToUserInput;
};

export type MutationTransferCalloutArgs = {
  transferData: TransferCalloutInput;
};

export type MutationTransferInnovationHubToAccountArgs = {
  transferData: TransferAccountInnovationHubInput;
};

export type MutationTransferInnovationPackToAccountArgs = {
  transferData: TransferAccountInnovationPackInput;
};

export type MutationTransferSpaceToAccountArgs = {
  transferData: TransferAccountSpaceInput;
};

export type MutationTransferVirtualContributorToAccountArgs = {
  transferData: TransferAccountVirtualContributorInput;
};

export type MutationUpdateAiPersonaArgs = {
  aiPersonaData: UpdateAiPersonaInput;
};

export type MutationUpdateAnswerRelevanceArgs = {
  input: ChatGuidanceAnswerRelevanceInput;
};

export type MutationUpdateApplicationFormOnRoleSetArgs = {
  applicationFormData: UpdateApplicationFormOnRoleSetInput;
};

export type MutationUpdateBaselineLicensePlanOnAccountArgs = {
  updateData: UpdateBaselineLicensePlanOnAccount;
};

export type MutationUpdateCalendarEventArgs = {
  eventData: UpdateCalendarEventInput;
};

export type MutationUpdateCalloutArgs = {
  calloutData: UpdateCalloutEntityInput;
};

export type MutationUpdateCalloutPublishInfoArgs = {
  calloutData: UpdateCalloutPublishInfoInput;
};

export type MutationUpdateCalloutVisibilityArgs = {
  calloutData: UpdateCalloutVisibilityInput;
};

export type MutationUpdateCalloutsSortOrderArgs = {
  sortOrderData: UpdateCalloutsSortOrderInput;
};

export type MutationUpdateClassificationTagsetArgs = {
  updateData: UpdateClassificationSelectTagsetValueInput;
};

export type MutationUpdateCollaborationFromSpaceTemplateArgs = {
  updateData: UpdateCollaborationFromSpaceTemplateInput;
};

export type MutationUpdateCommunityGuidelinesArgs = {
  communityGuidelinesData: UpdateCommunityGuidelinesEntityInput;
};

export type MutationUpdateContributionsSortOrderArgs = {
  sortOrderData: UpdateContributionCalloutsSortOrderInput;
};

export type MutationUpdateDiscussionArgs = {
  updateData: UpdateDiscussionInput;
};

export type MutationUpdateDocumentArgs = {
  documentData: UpdateDocumentInput;
};

export type MutationUpdateInnovationFlowArgs = {
  innovationFlowData: UpdateInnovationFlowInput;
};

export type MutationUpdateInnovationFlowCurrentStateArgs = {
  innovationFlowStateData: UpdateInnovationFlowCurrentStateInput;
};

export type MutationUpdateInnovationFlowStateArgs = {
  stateData: UpdateInnovationFlowStateInput;
};

export type MutationUpdateInnovationFlowStatesSortOrderArgs = {
  sortOrderData: UpdateInnovationFlowStatesSortOrderInput;
};

export type MutationUpdateInnovationHubArgs = {
  updateData: UpdateInnovationHubInput;
};

export type MutationUpdateInnovationPackArgs = {
  innovationPackData: UpdateInnovationPackInput;
};

export type MutationUpdateLicensePlanArgs = {
  updateData: UpdateLicensePlanInput;
};

export type MutationUpdateLinkArgs = {
  linkData: UpdateLinkInput;
};

export type MutationUpdateMemoArgs = {
  memoData: UpdateMemoEntityInput;
};

export type MutationUpdateNotificationStateArgs = {
  notificationData: UpdateNotificationStateInput;
};

export type MutationUpdateOrganizationArgs = {
  organizationData: UpdateOrganizationInput;
};

export type MutationUpdateOrganizationPlatformSettingsArgs = {
  organizationData: UpdateOrganizationPlatformSettingsInput;
};

export type MutationUpdateOrganizationSettingsArgs = {
  settingsData: UpdateOrganizationSettingsInput;
};

export type MutationUpdatePlatformSettingsArgs = {
  settingsData: UpdatePlatformSettingsInput;
};

export type MutationUpdatePostArgs = {
  postData: UpdatePostInput;
};

export type MutationUpdateProfileArgs = {
  profileData: UpdateProfileDirectInput;
};

export type MutationUpdateReferenceArgs = {
  referenceData: UpdateReferenceInput;
};

export type MutationUpdateSpaceArgs = {
  spaceData: UpdateSpaceInput;
};

export type MutationUpdateSpacePlatformSettingsArgs = {
  updateData: UpdateSpacePlatformSettingsInput;
};

export type MutationUpdateSpaceSettingsArgs = {
  settingsData: UpdateSpaceSettingsInput;
};

export type MutationUpdateTagsetArgs = {
  updateData: UpdateTagsetInput;
};

export type MutationUpdateTemplateArgs = {
  updateData: UpdateTemplateInput;
};

export type MutationUpdateTemplateContentSpaceArgs = {
  templateContentSpaceData: UpdateTemplateContentSpaceInput;
};

export type MutationUpdateTemplateDefaultArgs = {
  templateDefaultData: UpdateTemplateDefaultTemplateInput;
};

export type MutationUpdateTemplateFromSpaceArgs = {
  updateData: UpdateTemplateFromSpaceInput;
};

export type MutationUpdateUserArgs = {
  userData: UpdateUserInput;
};

export type MutationUpdateUserGroupArgs = {
  userGroupData: UpdateUserGroupInput;
};

export type MutationUpdateUserPlatformSettingsArgs = {
  updateData: UpdateUserPlatformSettingsInput;
};

export type MutationUpdateUserSettingsArgs = {
  settingsData: UpdateUserSettingsInput;
};

export type MutationUpdateVirtualContributorArgs = {
  virtualContributorData: UpdateVirtualContributorInput;
};

export type MutationUpdateVirtualContributorSettingsArgs = {
  settingsData: UpdateVirtualContributorSettingsInput;
};

export type MutationUpdateVisualArgs = {
  updateData: UpdateVisualInput;
};

export type MutationUpdateWhiteboardArgs = {
  whiteboardData: UpdateWhiteboardEntityInput;
};

export type MutationUploadFileOnLinkArgs = {
  file: Scalars['Upload']['input'];
  uploadData: StorageBucketUploadFileOnLinkInput;
};

export type MutationUploadFileOnReferenceArgs = {
  file: Scalars['Upload']['input'];
  uploadData: StorageBucketUploadFileOnReferenceInput;
};

export type MutationUploadFileOnStorageBucketArgs = {
  file: Scalars['Upload']['input'];
  uploadData: StorageBucketUploadFileInput;
};

export type MutationUploadImageOnVisualArgs = {
  file: Scalars['Upload']['input'];
  uploadData: VisualUploadImageInput;
};

export enum MutationType {
  Create = 'CREATE',
  Delete = 'DELETE',
  Update = 'UPDATE',
}

export type MySpaceResults = {
  __typename?: 'MySpaceResults';
  latestActivity?: Maybe<ActivityLogEntry>;
  space: Space;
};

export type Nvp = {
  __typename?: 'NVP';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  value: Scalars['String']['output'];
};

export enum NotificationEvent {
  OrganizationAdminMentioned = 'ORGANIZATION_ADMIN_MENTIONED',
  OrganizationAdminMessage = 'ORGANIZATION_ADMIN_MESSAGE',
  OrganizationMessageSender = 'ORGANIZATION_MESSAGE_SENDER',
  PlatformAdminGlobalRoleChanged = 'PLATFORM_ADMIN_GLOBAL_ROLE_CHANGED',
  PlatformAdminSpaceCreated = 'PLATFORM_ADMIN_SPACE_CREATED',
  PlatformAdminUserProfileCreated = 'PLATFORM_ADMIN_USER_PROFILE_CREATED',
  PlatformAdminUserProfileRemoved = 'PLATFORM_ADMIN_USER_PROFILE_REMOVED',
  PlatformForumDiscussionComment = 'PLATFORM_FORUM_DISCUSSION_COMMENT',
  PlatformForumDiscussionCreated = 'PLATFORM_FORUM_DISCUSSION_CREATED',
  SpaceAdminCollaborationCalloutContribution = 'SPACE_ADMIN_COLLABORATION_CALLOUT_CONTRIBUTION',
  SpaceAdminCommunityApplication = 'SPACE_ADMIN_COMMUNITY_APPLICATION',
  SpaceAdminCommunityNewMember = 'SPACE_ADMIN_COMMUNITY_NEW_MEMBER',
  SpaceCollaborationCalloutComment = 'SPACE_COLLABORATION_CALLOUT_COMMENT',
  SpaceCollaborationCalloutContribution = 'SPACE_COLLABORATION_CALLOUT_CONTRIBUTION',
  SpaceCollaborationCalloutPostContributionComment = 'SPACE_COLLABORATION_CALLOUT_POST_CONTRIBUTION_COMMENT',
  SpaceCollaborationCalloutPublished = 'SPACE_COLLABORATION_CALLOUT_PUBLISHED',
  SpaceCommunicationMessageSender = 'SPACE_COMMUNICATION_MESSAGE_SENDER',
  SpaceCommunicationUpdate = 'SPACE_COMMUNICATION_UPDATE',
  SpaceCommunityInvitationUserPlatform = 'SPACE_COMMUNITY_INVITATION_USER_PLATFORM',
  SpaceLeadCommunicationMessage = 'SPACE_LEAD_COMMUNICATION_MESSAGE',
  UserCommentReply = 'USER_COMMENT_REPLY',
  UserMentioned = 'USER_MENTIONED',
  UserMessage = 'USER_MESSAGE',
  UserMessageSender = 'USER_MESSAGE_SENDER',
  UserSignUpWelcome = 'USER_SIGN_UP_WELCOME',
  UserSpaceCommunityApplication = 'USER_SPACE_COMMUNITY_APPLICATION',
  UserSpaceCommunityInvitation = 'USER_SPACE_COMMUNITY_INVITATION',
  UserSpaceCommunityJoined = 'USER_SPACE_COMMUNITY_JOINED',
  VirtualContributorAdminSpaceCommunityInvitation = 'VIRTUAL_CONTRIBUTOR_ADMIN_SPACE_COMMUNITY_INVITATION',
}

/** A categorization of notification type. */
export enum NotificationEventCategory {
  Organization = 'ORGANIZATION',
  Platform = 'PLATFORM',
  SpaceAdmin = 'SPACE_ADMIN',
  SpaceMember = 'SPACE_MEMBER',
  User = 'USER',
  VirtualContributor = 'VIRTUAL_CONTRIBUTOR',
}

export enum NotificationEventInAppState {
  Archived = 'ARCHIVED',
  Read = 'READ',
  Unread = 'UNREAD',
}

export enum NotificationEventPayload {
  OrganizationMessageDirect = 'ORGANIZATION_MESSAGE_DIRECT',
  OrganizationMessageRoom = 'ORGANIZATION_MESSAGE_ROOM',
  PlatformForumDiscussion = 'PLATFORM_FORUM_DISCUSSION',
  PlatformForumDiscussionComment = 'PLATFORM_FORUM_DISCUSSION_COMMENT',
  PlatformGlobalRoleChange = 'PLATFORM_GLOBAL_ROLE_CHANGE',
  PlatformUserProfileRemoved = 'PLATFORM_USER_PROFILE_REMOVED',
  Space = 'SPACE',
  SpaceCollaborationCallout = 'SPACE_COLLABORATION_CALLOUT',
  SpaceCollaborationCalloutPostComment = 'SPACE_COLLABORATION_CALLOUT_POST_COMMENT',
  SpaceCommunicationMessageDirect = 'SPACE_COMMUNICATION_MESSAGE_DIRECT',
  SpaceCommunicationUpdate = 'SPACE_COMMUNICATION_UPDATE',
  SpaceCommunityApplication = 'SPACE_COMMUNITY_APPLICATION',
  SpaceCommunityContributor = 'SPACE_COMMUNITY_CONTRIBUTOR',
  SpaceCommunityInvitation = 'SPACE_COMMUNITY_INVITATION',
  SpaceCommunityInvitationUserPlatform = 'SPACE_COMMUNITY_INVITATION_USER_PLATFORM',
  User = 'USER',
  UserMessageDirect = 'USER_MESSAGE_DIRECT',
  UserMessageRoom = 'USER_MESSAGE_ROOM',
  VirtualContributor = 'VIRTUAL_CONTRIBUTOR',
}

export type NotificationEventsFilterInput = {
  /** Return Notifications with a type matching one of the provided types. */
  types?: InputMaybe<Array<NotificationEvent>>;
};

export type NotificationRecipientResult = {
  __typename?: 'NotificationRecipientResult';
  /** The email recipients for the notification. */
  emailRecipients: Array<User>;
  /** The in-app recipients for the notification. */
  inAppRecipients: Array<User>;
  /** The user that triggered the event. */
  triggeredBy?: Maybe<User>;
};

export type NotificationRecipientsInput = {
  /** The type of notification setting to look up recipients for. */
  eventType: NotificationEvent;
  /** The ID of the Organization to use to determine recipients. */
  organizationID?: InputMaybe<Scalars['UUID']['input']>;
  /** The ID of the space to retrieve the recipients for. */
  spaceID?: InputMaybe<Scalars['UUID']['input']>;
  /** The ID of the User that triggered the event. */
  triggeredBy?: InputMaybe<Scalars['UUID']['input']>;
  /** The ID of the specific user recipient for user-related notifications (e.g., invitations, mentions). */
  userID?: InputMaybe<Scalars['UUID']['input']>;
  /** The ID of the Virtual Contributor to use to determine recipients. */
  virtualContributorID?: InputMaybe<Scalars['UUID']['input']>;
};

export enum OpenAiModel {
  Babbage_002 = 'BABBAGE_002',
  DallE_2 = 'DALL_E_2',
  DallE_3 = 'DALL_E_3',
  Davinci_002 = 'DAVINCI_002',
  Gpt_3_5Turbo = 'GPT_3_5_TURBO',
  Gpt_4 = 'GPT_4',
  Gpt_4O = 'GPT_4O',
  Gpt_4OAudioPreview = 'GPT_4O_AUDIO_PREVIEW',
  Gpt_4OMini = 'GPT_4O_MINI',
  Gpt_4OMiniAudioPreview = 'GPT_4O_MINI_AUDIO_PREVIEW',
  Gpt_4OMiniRealtimePreview = 'GPT_4O_MINI_REALTIME_PREVIEW',
  Gpt_4ORealtimePreview = 'GPT_4O_REALTIME_PREVIEW',
  Gpt_4_5Preview = 'GPT_4_5_PREVIEW',
  Gpt_4Turbo = 'GPT_4_TURBO',
  O1 = 'O1',
  O1Mini = 'O1_MINI',
  O3Mini = 'O3_MINI',
  OmniModerationLatest = 'OMNI_MODERATION_LATEST',
  TextEmbedding_3Large = 'TEXT_EMBEDDING_3_LARGE',
  TextEmbedding_3Small = 'TEXT_EMBEDDING_3_SMALL',
  TextEmbeddingAda_002 = 'TEXT_EMBEDDING_ADA_002',
  TextModerationLatest = 'TEXT_MODERATION_LATEST',
  Tts_1 = 'TTS_1',
  Tts_1Hd = 'TTS_1_HD',
  Whisper_1 = 'WHISPER_1',
}

export type Organization = Contributor &
  Groupable & {
    __typename?: 'Organization';
    /** The account hosted by this Organization. */
    account?: Maybe<Account>;
    /** The Agent representing this User. */
    agent: Agent;
    /** The authorization rules for the Contributor */
    authorization?: Maybe<Authorization>;
    /** Organization contact email */
    contactEmail?: Maybe<Scalars['String']['output']>;
    /** The date at which the entity was created. */
    createdDate: Scalars['DateTime']['output'];
    /** Domain name; what is verified, eg. alkem.io */
    domain?: Maybe<Scalars['String']['output']>;
    /** Group defined on this organization. */
    group?: Maybe<UserGroup>;
    /** Groups defined on this organization. */
    groups?: Maybe<Array<UserGroup>>;
    /** The ID of the Contributor */
    id: Scalars['UUID']['output'];
    /** Legal name - required if hosting an Space */
    legalEntityName?: Maybe<Scalars['String']['output']>;
    /** Metrics about the activity within this Organization. */
    metrics?: Maybe<Array<Nvp>>;
    /** A name identifier of the Contributor, unique within a given scope. */
    nameID: Scalars['NameID']['output'];
    /** The profile for this Organization. */
    profile: Profile;
    /** The RoleSet for this Organization. */
    roleSet: RoleSet;
    /** The settings for this Organization. */
    settings: OrganizationSettings;
    /** The StorageAggregator for managing storage buckets in use by this Organization */
    storageAggregator?: Maybe<StorageAggregator>;
    /** The date at which the entity was last updated. */
    updatedDate: Scalars['DateTime']['output'];
    verification: OrganizationVerification;
    /** Organization website */
    website?: Maybe<Scalars['String']['output']>;
  };

export type OrganizationGroupArgs = {
  ID: Scalars['UUID']['input'];
};

export type OrganizationAuthorizationResetInput = {
  /** The identifier of the Organization whose Authorization Policy should be reset. */
  organizationID: Scalars['UUID']['input'];
};

export type OrganizationFilterInput = {
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  displayName?: InputMaybe<Scalars['String']['input']>;
  domain?: InputMaybe<Scalars['String']['input']>;
  nameID?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type OrganizationSettings = {
  __typename?: 'OrganizationSettings';
  /** The membership settings for this Organization. */
  membership: OrganizationSettingsMembership;
  /** The privacy settings for this Organization */
  privacy: OrganizationSettingsPrivacy;
};

export type OrganizationSettingsMembership = {
  __typename?: 'OrganizationSettingsMembership';
  /** Allow Users with email addresses matching the domain of this Organization to join. */
  allowUsersMatchingDomainToJoin: Scalars['Boolean']['output'];
};

export type OrganizationSettingsPrivacy = {
  __typename?: 'OrganizationSettingsPrivacy';
  /** Allow contribution roles (membership, lead etc) in Spaces to be visible. */
  contributionRolesPubliclyVisible: Scalars['Boolean']['output'];
};

export type OrganizationVerification = {
  __typename?: 'OrganizationVerification';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Is this lifecycle in a final state (done). */
  isFinalized: Scalars['Boolean']['output'];
  lifecycle: Lifecycle;
  /** The next events of this Lifecycle. */
  nextEvents: Array<Scalars['String']['output']>;
  /** The current state of this Lifecycle. */
  state: Scalars['String']['output'];
  /** Organization verification type */
  status: OrganizationVerificationEnum;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export enum OrganizationVerificationEnum {
  NotVerified = 'NOT_VERIFIED',
  VerifiedManualAttestation = 'VERIFIED_MANUAL_ATTESTATION',
}

export type OrganizationVerificationEventInput = {
  eventName: Scalars['String']['input'];
  organizationVerificationID: Scalars['UUID']['input'];
};

export type OrganizationsInRolesResponse = {
  __typename?: 'OrganizationsInRolesResponse';
  organizations: Array<Organization>;
  role: RoleName;
};

export type OryConfig = {
  __typename?: 'OryConfig';
  /** Ory Issuer. */
  issuer: Scalars['String']['output'];
  /** Ory Kratos Public Base URL. Used by all Kratos Public Clients. */
  kratosPublicBaseURL: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  /** The last cursor of the page result */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** Indicate whether more items exist after the returned ones */
  hasNextPage: Scalars['Boolean']['output'];
  /** Indicate whether more items exist before the returned ones */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** The first cursor of the page result */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type PaginatedOrganization = {
  __typename?: 'PaginatedOrganization';
  organization: Array<Organization>;
  pageInfo: PageInfo;
  total: Scalars['Float']['output'];
};

export type PaginatedSpaces = {
  __typename?: 'PaginatedSpaces';
  pageInfo: PageInfo;
  spaces: Array<Space>;
  total: Scalars['Float']['output'];
};

export type PaginatedUsers = {
  __typename?: 'PaginatedUsers';
  pageInfo: PageInfo;
  total: Scalars['Float']['output'];
  users: Array<User>;
};

export type PaginatedVirtualContributor = {
  __typename?: 'PaginatedVirtualContributor';
  pageInfo: PageInfo;
  total: Scalars['Float']['output'];
  virtualContributors: Array<VirtualContributor>;
};

export type Platform = {
  __typename?: 'Platform';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Virtual Contributor that is used to provide chat help on the platform. */
  chatGuidanceVirtualContributor: VirtualContributor;
  /** Alkemio configuration. Provides configuration to external services in the Alkemio ecosystem. */
  configuration: Config;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The Forum for the platform */
  forum: Forum;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Details about the current Innovation Hub you are in. */
  innovationHub?: Maybe<InnovationHub>;
  /** The latest release discussion. */
  latestReleaseDiscussion?: Maybe<LatestReleaseDiscussion>;
  /** The Innovation Library for the platform */
  library: Library;
  /** The Licensing in use by the platform. */
  licensingFramework: Licensing;
  /** Alkemio Services Metadata. */
  metadata: Metadata;
  /** The RoleSet for this Platform. */
  roleSet: RoleSet;
  /** The settings of the Platform. */
  settings: PlatformSettings;
  /** The StorageAggregator with documents in use by Users + Organizations on the Platform. */
  storageAggregator: StorageAggregator;
  /** The TemplatesManager in use by the Platform */
  templatesManager?: Maybe<TemplatesManager>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type PlatformInnovationHubArgs = {
  id?: InputMaybe<Scalars['UUID']['input']>;
  subdomain?: InputMaybe<Scalars['String']['input']>;
};

export type PlatformAccessRole = {
  __typename?: 'PlatformAccessRole';
  /** The privileges to be granted for this Platform Access Role. */
  grantedPrivileges: Array<AuthorizationPrivilege>;
  /** The role name for this Platform Access Role. */
  roleName: RoleName;
};

export type PlatformAdminCommunicationQueryResults = {
  __typename?: 'PlatformAdminCommunicationQueryResults';
  /** All Users that are members of a given room */
  adminCommunicationMembership: CommunicationAdminMembershipResult;
  /** Usage of the messaging platform that are not tied to the domain model. */
  adminCommunicationOrphanedUsage: CommunicationAdminOrphanedUsageResult;
};

export type PlatformAdminCommunicationQueryResultsAdminCommunicationMembershipArgs = {
  communicationData: CommunicationAdminMembershipInput;
};

export type PlatformAdminQueryResults = {
  __typename?: 'PlatformAdminQueryResults';
  /** Lookup Communication related information. */
  communication: PlatformAdminCommunicationQueryResults;
  /** Retrieve all Innovation Hubs on the Platform. This is only available to Platform Admins. */
  innovationHubs: Array<InnovationHub>;
  /** Retrieve all Innovation Packs on the Platform. This is only available to Platform Admins. */
  innovationPacks: Array<InnovationPack>;
  /** Retrieve all Organizations on the Platform. This is only available to Platform Admins. */
  organizations: PaginatedOrganization;
  /** Retrieve all Spaces on the Platform. This is only available to Platform Admins. */
  spaces: Array<Space>;
  /** Retrieve all Users on the Platform. This is only available to Platform Admins. */
  users: PaginatedUsers;
  /** Retrieve all Virtual Contributors on the Platform. This is only available to Platform Admins. */
  virtualContributors: Array<VirtualContributor>;
};

export type PlatformAdminQueryResultsInnovationPacksArgs = {
  queryData?: InputMaybe<InnovationPacksInput>;
};

export type PlatformAdminQueryResultsOrganizationsArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<OrganizationFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<OrganizationVerificationEnum>;
};

export type PlatformAdminQueryResultsSpacesArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  filter?: InputMaybe<SpaceFilterInput>;
};

export type PlatformAdminQueryResultsUsersArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  withTags?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PlatformAdminQueryResultsVirtualContributorsArgs = {
  filter?: InputMaybe<ContributorFilterInput>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  shuffle?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PlatformFeatureFlag = {
  __typename?: 'PlatformFeatureFlag';
  /** Is this feature flag enabled? */
  enabled: Scalars['Boolean']['output'];
  /** The name of the feature flag */
  name: PlatformFeatureFlagName;
};

export enum PlatformFeatureFlagName {
  Communications = 'COMMUNICATIONS',
  CommunicationsDiscussions = 'COMMUNICATIONS_DISCUSSIONS',
  GuidenceEngine = 'GUIDENCE_ENGINE',
  LandingPage = 'LANDING_PAGE',
  Memo = 'MEMO',
  Notifications = 'NOTIFICATIONS',
  Ssi = 'SSI',
  Subscriptions = 'SUBSCRIPTIONS',
  Whiteboards = 'WHITEBOARDS',
}

export type PlatformIntegrationSettings = {
  __typename?: 'PlatformIntegrationSettings';
  /** The list of allowed URLs for iFrames within Markdown content. */
  iframeAllowedUrls: Array<Scalars['String']['output']>;
};

export type PlatformInvitation = {
  __typename?: 'PlatformInvitation';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The User who created the platformInvitation. */
  createdBy: User;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The email address of the external user being invited */
  email: Scalars['String']['output'];
  firstName?: Maybe<Scalars['String']['output']>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  lastName?: Maybe<Scalars['String']['output']>;
  /** The platform role the user will receive when they sign up */
  platformRole?: Maybe<RoleName>;
  /** Whether a new user profile has been created. */
  profileCreated: Scalars['Boolean']['output'];
  /** Additional roles to assign to the Contributor, in addition to the entry Role. */
  roleSetExtraRoles: Array<RoleName>;
  /** Whether to also add the invited user to the parent community. */
  roleSetInvitedToParent: Scalars['Boolean']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  welcomeMessage?: Maybe<Scalars['String']['output']>;
};

export type PlatformLocations = {
  __typename?: 'PlatformLocations';
  /** URL to a page about the platform */
  about: Scalars['String']['output'];
  /** URL where users can get tips and tricks */
  aup: Scalars['String']['output'];
  /** URL to the blog of the platform */
  blog: Scalars['String']['output'];
  /** URL where users can see the community forum */
  community: Scalars['String']['output'];
  /** URL for the link Contact in the HomePage and to create a new space with Enterprise plan */
  contactsupport: Scalars['String']['output'];
  /** URL for the documentation site */
  documentation: Scalars['String']['output'];
  /** Main domain of the environment */
  domain: Scalars['String']['output'];
  /** Name of the environment */
  environment: Scalars['String']['output'];
  /** URL to a form for providing feedback */
  feedback: Scalars['String']['output'];
  /** URL to latest forum release discussion where users can get information about the latest release */
  forumreleases: Scalars['String']['output'];
  /** URL for the link Foundation in the HomePage of the application */
  foundation: Scalars['String']['output'];
  /** URL where users can get help */
  help: Scalars['String']['output'];
  /** URL for the link Impact in the HomePage of the application */
  impact: Scalars['String']['output'];
  /** URL to a page about the innovation library */
  innovationLibrary: Scalars['String']['output'];
  /** URL to a page about the collaboration tools */
  inspiration: Scalars['String']['output'];
  /** URL to the landing page of the platform */
  landing: Scalars['String']['output'];
  /** URL where new users can get onboarding help */
  newuser: Scalars['String']['output'];
  /** URL for the link Opensource in the HomePage of the application */
  opensource: Scalars['String']['output'];
  /** URL to the privacy policy for the platform */
  privacy: Scalars['String']['output'];
  /** URL where users can get information about previous releases */
  releases: Scalars['String']['output'];
  /** URL to the security policy for the platform */
  security: Scalars['String']['output'];
  /** URL where users can get support for the platform */
  support: Scalars['String']['output'];
  /** URL for the link Contact in the HomePage to switch between plans */
  switchplan: Scalars['String']['output'];
  /** URL to the terms of usage for the platform */
  terms: Scalars['String']['output'];
  /** URL where users can get tips and tricks */
  tips: Scalars['String']['output'];
};

export type PlatformRolesAccess = {
  __typename?: 'PlatformRolesAccess';
  /** The platform roles with their associated privileges. */
  roles: Array<PlatformAccessRole>;
};

export type PlatformSettings = {
  __typename?: 'PlatformSettings';
  /** The integration settings for this Platform */
  integration: PlatformIntegrationSettings;
};

export type Post = {
  __typename?: 'Post';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The comments on this Post. */
  comments: Room;
  /** The user that created this Post */
  createdBy?: Maybe<User>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The Profile for this Post. */
  profile: Profile;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type Profile = {
  __typename?: 'Profile';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** A description of the entity associated with this profile. */
  description?: Maybe<Scalars['Markdown']['output']>;
  /** The display name. */
  displayName: Scalars['String']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The location for this Profile. */
  location?: Maybe<Location>;
  /** A list of URLs to relevant information. */
  references?: Maybe<Array<Reference>>;
  /** The storage bucket for this Profile. */
  storageBucket: StorageBucket;
  /** The tagline for this entity. */
  tagline?: Maybe<Scalars['String']['output']>;
  /** The default or named tagset. */
  tagset?: Maybe<Tagset>;
  /** A list of named tagsets, each of which has a list of tags. */
  tagsets?: Maybe<Array<Tagset>>;
  /** A type of entity that this Profile is being used with. */
  type?: Maybe<ProfileType>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The URL at which this profile can be viewed. */
  url: Scalars['String']['output'];
  /** A particular type of visual for this Profile. */
  visual?: Maybe<Visual>;
  /** A list of visuals for this Profile. */
  visuals: Array<Visual>;
};

export type ProfileTagsetArgs = {
  tagsetName?: InputMaybe<TagsetReservedName>;
};

export type ProfileVisualArgs = {
  type: VisualType;
};

export type ProfileCredentialVerified = {
  __typename?: 'ProfileCredentialVerified';
  /** The email */
  userEmail: Scalars['String']['output'];
  /** The vc. */
  vc: Scalars['String']['output'];
};

export enum ProfileType {
  CalendarEvent = 'CALENDAR_EVENT',
  CalloutFraming = 'CALLOUT_FRAMING',
  CommunityGuidelines = 'COMMUNITY_GUIDELINES',
  ContributionLink = 'CONTRIBUTION_LINK',
  Discussion = 'DISCUSSION',
  InnovationFlow = 'INNOVATION_FLOW',
  InnovationHub = 'INNOVATION_HUB',
  InnovationPack = 'INNOVATION_PACK',
  KnowledgeBase = 'KNOWLEDGE_BASE',
  Memo = 'MEMO',
  Organization = 'ORGANIZATION',
  Post = 'POST',
  SpaceAbout = 'SPACE_ABOUT',
  Template = 'TEMPLATE',
  User = 'USER',
  UserGroup = 'USER_GROUP',
  VirtualContributor = 'VIRTUAL_CONTRIBUTOR',
  VirtualPersona = 'VIRTUAL_PERSONA',
  Whiteboard = 'WHITEBOARD',
}

export type Query = {
  __typename?: 'Query';
  /** The Accounts on this platform; If accessed through an Innovation Hub will return ONLY the Accounts defined in it. */
  accounts: Array<Account>;
  /** Activity events related to the current user. */
  activityFeed: ActivityFeed;
  /** Activity events related to the current user grouped by Activity type and resource. */
  activityFeedGrouped: Array<ActivityLogEntry>;
  /** Retrieve the ActivityLog for the specified Collaboration */
  activityLogOnCollaboration: Array<ActivityLogEntry>;
  /** Alkemio AiServer */
  aiServer: AiServer;
  /** Active Spaces only, order by most active in the past X days. */
  exploreSpaces: Array<Space>;
  /** Get supported credential metadata */
  getSupportedVerifiedCredentialMetadata: Array<CredentialMetadataOutput>;
  /** Allow creation of inputs based on existing entities in the domain model */
  inputCreator: InputCreatorQueryResults;
  /** Allow direct lookup of entities from the domain model */
  lookup: LookupQueryResults;
  /** Allow direct lookup of entities using their NameIDs */
  lookupByName: LookupByNameQueryResults;
  /** Information about the current authenticated user */
  me: MeQueryResults;
  /** The notificationRecipients for the provided event on the given entity. */
  notificationRecipients: NotificationRecipientResult;
  /** A particular Organization */
  organization: Organization;
  /** The Organizations on this platform */
  organizations: Array<Organization>;
  /** The Organizations on this platform in paginated format */
  organizationsPaginated: PaginatedOrganization;
  /** Alkemio Platform */
  platform: Platform;
  /** Allow looking up of information for Platform administration. */
  platformAdmin: PlatformAdminQueryResults;
  /** Get the list of restricted space names. */
  restrictedSpaceNames: Array<Scalars['String']['output']>;
  /** The roles that the specified Organization has. */
  rolesOrganization: ContributorRoles;
  /** The roles that that the specified User has. */
  rolesUser: ContributorRoles;
  /** The roles that the specified VirtualContributor has. */
  rolesVirtualContributor: ContributorRoles;
  /** Search the platform for terms supplied */
  search: ISearchResults;
  /** The Spaces on this platform; If accessed through an Innovation Hub will return ONLY the Spaces defined in it. */
  spaces: Array<Space>;
  /** The Spaces on this platform */
  spacesPaginated: PaginatedSpaces;
  /** Information about a specific task */
  task: Task;
  /** All tasks with filtering applied */
  tasks: Array<Task>;
  /** Allow resolving of a URL into a set of IDs. */
  urlResolver: UrlResolverQueryResults;
  /** A particular user, identified by the ID or by email */
  user: User;
  /** The users who have profiles on this platform */
  users: Array<User>;
  /** The users who have profiles on this platform */
  usersPaginated: PaginatedUsers;
  /** All Users that hold credentials matching the supplied criteria. */
  usersWithAuthorizationCredential: Array<User>;
  /** A particular VirtualContributor */
  virtualContributor: VirtualContributor;
  /** The VirtualContributors on this platform; only accessible to platform admins */
  virtualContributors: Array<VirtualContributor>;
};

export type QueryActivityFeedArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  args?: InputMaybe<ActivityFeedQueryArgs>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type QueryActivityFeedGroupedArgs = {
  args?: InputMaybe<ActivityFeedGroupedQueryArgs>;
};

export type QueryActivityLogOnCollaborationArgs = {
  queryData: ActivityLogInput;
};

export type QueryExploreSpacesArgs = {
  options?: InputMaybe<ExploreSpacesInput>;
};

export type QueryNotificationRecipientsArgs = {
  eventData: NotificationRecipientsInput;
};

export type QueryOrganizationArgs = {
  ID: Scalars['UUID']['input'];
};

export type QueryOrganizationsArgs = {
  filter?: InputMaybe<ContributorFilterInput>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  shuffle?: InputMaybe<Scalars['Boolean']['input']>;
};

export type QueryOrganizationsPaginatedArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<OrganizationFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  status?: InputMaybe<OrganizationVerificationEnum>;
};

export type QueryRolesOrganizationArgs = {
  rolesData: RolesOrganizationInput;
};

export type QueryRolesUserArgs = {
  rolesData: RolesUserInput;
};

export type QueryRolesVirtualContributorArgs = {
  rolesData: RolesVirtualContributorInput;
};

export type QuerySearchArgs = {
  searchData: SearchInput;
};

export type QuerySpacesArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  filter?: InputMaybe<SpaceFilterInput>;
};

export type QuerySpacesPaginatedArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<SpaceFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type QueryTaskArgs = {
  id: Scalars['UUID']['input'];
};

export type QueryTasksArgs = {
  status?: InputMaybe<TaskStatus>;
};

export type QueryUrlResolverArgs = {
  url: Scalars['String']['input'];
};

export type QueryUserArgs = {
  ID: Scalars['UUID']['input'];
};

export type QueryUsersArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  filter?: InputMaybe<ContributorFilterInput>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  shuffle?: InputMaybe<Scalars['Boolean']['input']>;
};

export type QueryUsersPaginatedArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  withTags?: InputMaybe<Scalars['Boolean']['input']>;
};

export type QueryUsersWithAuthorizationCredentialArgs = {
  credentialsCriteriaData: UsersWithAuthorizationCredentialInput;
};

export type QueryVirtualContributorArgs = {
  ID: Scalars['UUID']['input'];
};

export type QueryVirtualContributorsArgs = {
  filter?: InputMaybe<ContributorFilterInput>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  shuffle?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Question = {
  __typename?: 'Question';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  value: Scalars['String']['output'];
};

/** A reaction to a message. */
export type Reaction = {
  __typename?: 'Reaction';
  /** The reaction Emoji */
  emoji: Scalars['Emoji']['output'];
  /** The id for the reaction. */
  id: Scalars['MessageID']['output'];
  /** The user that reacted */
  sender?: Maybe<User>;
  /** The server timestamp in UTC */
  timestamp: Scalars['Float']['output'];
};

export type Reference = {
  __typename?: 'Reference';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** Description of this reference */
  description?: Maybe<Scalars['String']['output']>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Name of the reference, e.g. Linkedin, Twitter etc. */
  name: Scalars['String']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** URI of the reference */
  uri: Scalars['String']['output'];
};

export type RefreshVirtualContributorBodyOfKnowledgeInput = {
  /** The ID of the Virtual Contributor to update. */
  virtualContributorID: Scalars['UUID']['input'];
};

export type RelayPaginatedSpace = {
  __typename?: 'RelayPaginatedSpace';
  /** About this space. */
  about: SpaceAbout;
  /** The Account that this Space is part of. */
  account: Account;
  /** The "highest" subscription active for this Space. */
  activeSubscription?: Maybe<SpaceSubscription>;
  /** The Agent representing this Space. */
  agent: Agent;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The collaboration for the Space. */
  collaboration: Collaboration;
  /** Get the Community for the Space.  */
  community: Community;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The level of this Space, representing the number of Spaces above this one. */
  level: SpaceLevel;
  /** The ID of the level zero space for this tree. */
  levelZeroSpaceID: Scalars['String']['output'];
  /** The License operating on this Space. */
  license: License;
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The calculated platform access for this Space. */
  platformAccess: PlatformRolesAccess;
  /** The settings for this Space. */
  settings: SpaceSettings;
  /** The StorageAggregator in use by this Space */
  storageAggregator: StorageAggregator;
  /** The subscriptions active for this Space. */
  subscriptions: Array<SpaceSubscription>;
  /** A particular subspace by its nameID */
  subspaceByNameID: Space;
  /** The subspaces for the space. */
  subspaces: Array<Space>;
  /** The TemplatesManager in use by this Space */
  templatesManager?: Maybe<TemplatesManager>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** Visibility of the Space. */
  visibility: SpaceVisibility;
};

export type RelayPaginatedSpaceSubspaceByNameIdArgs = {
  NAMEID: Scalars['NameID']['input'];
};

export type RelayPaginatedSpaceSubspacesArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  shuffle?: InputMaybe<Scalars['Boolean']['input']>;
};

export type RelayPaginatedSpaceEdge = {
  __typename?: 'RelayPaginatedSpaceEdge';
  node: RelayPaginatedSpace;
};

export type RelayPaginatedSpacePageInfo = {
  __typename?: 'RelayPaginatedSpacePageInfo';
  /** The last cursor of the page result */
  endCursor?: Maybe<Scalars['String']['output']>;
  /** Indicate whether more items exist after the returned ones */
  hasNextPage: Scalars['Boolean']['output'];
  /** Indicate whether more items exist before the returned ones */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** The first cursor of the page result */
  startCursor?: Maybe<Scalars['String']['output']>;
};

export type RemoveCommunityGuidelinesContentInput = {
  /** ID of the CommunityGuidelines that will be emptied */
  communityGuidelinesID: Scalars['UUID']['input'];
};

export type RemovePlatformRoleInput = {
  contributorID: Scalars['UUID']['input'];
  role: RoleName;
};

export type RemoveRoleOnRoleSetFromOrganizationInput = {
  contributorID: Scalars['UUID']['input'];
  role: RoleName;
  roleSetID: Scalars['UUID']['input'];
};

export type RemoveRoleOnRoleSetFromUserInput = {
  contributorID: Scalars['UUID']['input'];
  role: RoleName;
  roleSetID: Scalars['UUID']['input'];
};

export type RemoveRoleOnRoleSetFromVirtualContributorInput = {
  contributorID: Scalars['UUID']['input'];
  role: RoleName;
  roleSetID: Scalars['UUID']['input'];
};

export type RemoveUserGroupMemberInput = {
  groupID: Scalars['UUID']['input'];
  userID: Scalars['UUID']['input'];
};

export type RevokeAuthorizationCredentialInput = {
  /** The resource to which access is being removed. */
  resourceID: Scalars['String']['input'];
  type: AuthorizationCredential;
  /** The user from whom the credential is being removed. */
  userID: Scalars['UUID']['input'];
};

export type RevokeLicensePlanFromAccount = {
  /** The ID of the Account to assign the LicensePlan to. */
  accountID: Scalars['UUID']['input'];
  /** The ID of the LicensePlan to assign. */
  licensePlanID: Scalars['UUID']['input'];
  /** The ID of the Licensing to use. */
  licensingID?: InputMaybe<Scalars['UUID']['input']>;
};

export type RevokeLicensePlanFromSpace = {
  /** The ID of the LicensePlan to assign. */
  licensePlanID: Scalars['UUID']['input'];
  /** The ID of the Licensing to use. */
  licensingID?: InputMaybe<Scalars['UUID']['input']>;
  /** The ID of the Space to assign the LicensePlan to. */
  spaceID: Scalars['UUID']['input'];
};

export type RevokeOrganizationAuthorizationCredentialInput = {
  /** The Organization from whom the credential is being removed. */
  organizationID: Scalars['UUID']['input'];
  /** The resource to which access is being removed. */
  resourceID?: InputMaybe<Scalars['UUID']['input']>;
  type: AuthorizationCredential;
};

export type Role = {
  __typename?: 'Role';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The Credential associated with this Role. */
  credential: CredentialDefinition;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The CommunityRole that this role definition is for. */
  name: RoleName;
  /** The role policy that applies for Organizations in this Role. */
  organizationPolicy: ContributorRolePolicy;
  /** The Credential associated with this Role. */
  parentCredentials: Array<CredentialDefinition>;
  /** Flag to indicate if this Role requires the entry level role to be held. */
  requiresEntryRole: Scalars['Boolean']['output'];
  /** Flag to indicate if this Role requires having the same role in the Parent RoleSet. */
  requiresSameRoleInParentRoleSet: Scalars['Boolean']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The role policy that applies for Users in this Role. */
  userPolicy: ContributorRolePolicy;
  /** The role policy that applies for VirtualContributors in this Role. */
  virtualContributorPolicy: ContributorRolePolicy;
};

export enum RoleName {
  Admin = 'ADMIN',
  Anonymous = 'ANONYMOUS',
  Associate = 'ASSOCIATE',
  GlobalAdmin = 'GLOBAL_ADMIN',
  GlobalCommunityReader = 'GLOBAL_COMMUNITY_READER',
  GlobalLicenseManager = 'GLOBAL_LICENSE_MANAGER',
  GlobalPlatformManager = 'GLOBAL_PLATFORM_MANAGER',
  GlobalSpacesReader = 'GLOBAL_SPACES_READER',
  GlobalSupport = 'GLOBAL_SUPPORT',
  GlobalSupportManager = 'GLOBAL_SUPPORT_MANAGER',
  Lead = 'LEAD',
  Member = 'MEMBER',
  Owner = 'OWNER',
  PlatformBetaTester = 'PLATFORM_BETA_TESTER',
  PlatformVcCampaign = 'PLATFORM_VC_CAMPAIGN',
  Registered = 'REGISTERED',
}

export type RoleSet = {
  __typename?: 'RoleSet';
  /** The Form used for Applications to this roleSet. */
  applicationForm: Form;
  /** Applications available for this RoleSet. */
  applications: Array<Application>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** All users that have the entryRole in the RoleSet, minus those already in the specified role. */
  availableUsersForElevatedRole: PaginatedUsers;
  /** All available users that are could join this RoleSet in the entry role. */
  availableUsersForEntryRole: PaginatedUsers;
  /** All available VirtualContributors that are eligible to invite to this RoleSet in the entry role. */
  availableVirtualContributorsForEntryRole: PaginatedVirtualContributor;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The Role that acts as the entry Role for the RoleSet, so other roles potentially require it. */
  entryRoleName: RoleName;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Invitations for this roleSet. */
  invitations: Array<Invitation>;
  /** The License operating on this RoleSet. */
  license: License;
  /** The membership status of the currently logged in user. */
  myMembershipStatus?: Maybe<CommunityMembershipStatus>;
  /** The roles on this community for the currently logged in user. */
  myRoles: Array<RoleName>;
  /** The implicit roles on this community for the currently logged in user. */
  myRolesImplicit: Array<RoleSetRoleImplicit>;
  /** All Organizations that have the specified Role in this Community. */
  organizationsInRole: Array<Organization>;
  /** All organizations that have a role in this RoleSet in the specified Roles. */
  organizationsInRoles: Array<OrganizationsInRolesResponse>;
  /** Invitations to join this RoleSet in an entry role for users not yet on the Alkemio platform. */
  platformInvitations: Array<PlatformInvitation>;
  /** The Role Definitions from this RoleSet to return. */
  roleDefinition: Role;
  /** The Role Definitions included in this roleSet. */
  roleDefinitions: Array<Role>;
  /** The Roles available in this roleSet. */
  roleNames: Array<RoleName>;
  /** A type of entity that this RoleSet is being used with. */
  type?: Maybe<RoleSetType>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** All users that are contributing to this Community in the specified Role. */
  usersInRole: Array<User>;
  /** All users that have a Role in this RoleSet in the specified Roles. */
  usersInRoles: Array<UsersInRolesResponse>;
  /** All Virtual Contributors that have the specified Role in this Community. */
  virtualContributorsInRole: Array<VirtualContributor>;
  /** All Virtual Contributors that are available from the current or parent RoleSets. */
  virtualContributorsInRoleInHierarchy: Array<VirtualContributor>;
  /** All VirtualContributors that have a role in this RoleSet in the specified Roles. */
  virtualContributorsInRoles: Array<VirtualContributorsInRolesResponse>;
};

export type RoleSetAvailableUsersForElevatedRoleArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
  role: RoleName;
};

export type RoleSetAvailableUsersForEntryRoleArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type RoleSetAvailableVirtualContributorsForEntryRoleArgs = {
  after?: InputMaybe<Scalars['UUID']['input']>;
  before?: InputMaybe<Scalars['UUID']['input']>;
  first?: InputMaybe<Scalars['Int']['input']>;
  last?: InputMaybe<Scalars['Int']['input']>;
};

export type RoleSetOrganizationsInRoleArgs = {
  role: RoleName;
};

export type RoleSetOrganizationsInRolesArgs = {
  roles: Array<RoleName>;
};

export type RoleSetRoleDefinitionArgs = {
  role: RoleName;
};

export type RoleSetRoleDefinitionsArgs = {
  roles?: InputMaybe<Array<RoleName>>;
};

export type RoleSetUsersInRoleArgs = {
  limit?: InputMaybe<Scalars['Float']['input']>;
  role: RoleName;
};

export type RoleSetUsersInRolesArgs = {
  limit?: InputMaybe<Scalars['Float']['input']>;
  roles: Array<RoleName>;
};

export type RoleSetVirtualContributorsInRoleArgs = {
  role: RoleName;
};

export type RoleSetVirtualContributorsInRoleInHierarchyArgs = {
  role: RoleName;
};

export type RoleSetVirtualContributorsInRolesArgs = {
  roles: Array<RoleName>;
};

export enum RoleSetContributorType {
  Organization = 'ORGANIZATION',
  User = 'USER',
  Virtual = 'VIRTUAL',
}

export type RoleSetInvitationResult = {
  __typename?: 'RoleSetInvitationResult';
  invitation?: Maybe<Invitation>;
  platformInvitation?: Maybe<PlatformInvitation>;
  type: RoleSetInvitationResultType;
};

export enum RoleSetInvitationResultType {
  AlreadyInvitedToPlatformAndRoleSet = 'ALREADY_INVITED_TO_PLATFORM_AND_ROLE_SET',
  AlreadyInvitedToRoleSet = 'ALREADY_INVITED_TO_ROLE_SET',
  InvitationToParentNotAuthorized = 'INVITATION_TO_PARENT_NOT_AUTHORIZED',
  InvitedToPlatformAndRoleSet = 'INVITED_TO_PLATFORM_AND_ROLE_SET',
  InvitedToRoleSet = 'INVITED_TO_ROLE_SET',
}

export enum RoleSetRoleImplicit {
  AccountAdmin = 'ACCOUNT_ADMIN',
  SubspaceAdmin = 'SUBSPACE_ADMIN',
}

export enum RoleSetType {
  Organization = 'ORGANIZATION',
  Platform = 'PLATFORM',
  Space = 'SPACE',
}

export type RolesOrganizationInput = {
  /** Return membership in Spaces matching the provided filter. */
  filter?: InputMaybe<SpaceFilterInput>;
  /** The ID of the organization to retrieve the roles of. */
  organizationID: Scalars['UUID']['input'];
};

export type RolesResult = {
  __typename?: 'RolesResult';
  /** Display name of the entity */
  displayName: Scalars['String']['output'];
  /** A unique identifier for this membership result. */
  id: Scalars['String']['output'];
  /** Name Identifier of the entity */
  nameID: Scalars['NameID']['output'];
  /** The roles held by the contributor */
  roles: Array<Scalars['String']['output']>;
};

export type RolesResultCommunity = {
  __typename?: 'RolesResultCommunity';
  /** Display name of the entity */
  displayName: Scalars['String']['output'];
  /** A unique identifier for this membership result. */
  id: Scalars['String']['output'];
  /** The level of the Space e.g. L0/L1/L2. */
  level: SpaceLevel;
  /** Name Identifier of the entity */
  nameID: Scalars['NameID']['output'];
  /** The roles held by the contributor */
  roles: Array<Scalars['String']['output']>;
};

export type RolesResultOrganization = {
  __typename?: 'RolesResultOrganization';
  /** Display name of the entity */
  displayName: Scalars['String']['output'];
  /** A unique identifier for this membership result. */
  id: Scalars['String']['output'];
  /** Name Identifier of the entity */
  nameID: Scalars['NameID']['output'];
  /** The Organization ID. */
  organizationID: Scalars['String']['output'];
  /** The roles held by the contributor */
  roles: Array<Scalars['String']['output']>;
  /** Details of the Groups in the Organizations the user is a member of */
  userGroups: Array<RolesResult>;
};

export type RolesResultSpace = {
  __typename?: 'RolesResultSpace';
  /** Display name of the entity */
  displayName: Scalars['String']['output'];
  /** A unique identifier for this membership result. */
  id: Scalars['String']['output'];
  /** The level of the Space e.g. L0/L1/L2. */
  level: SpaceLevel;
  /** Name Identifier of the entity */
  nameID: Scalars['NameID']['output'];
  /** The roles held by the contributor */
  roles: Array<Scalars['String']['output']>;
  /** The Space ID */
  spaceID: Scalars['String']['output'];
  /** Details of the Subspace the user is a member of */
  subspaces: Array<RolesResultCommunity>;
  /** Visibility of the Space. */
  visibility: SpaceVisibility;
};

export type RolesUserInput = {
  /** Return membership in Spaces matching the provided filter. */
  filter?: InputMaybe<SpaceFilterInput>;
  /** The ID of the user to retrieve the roles of. */
  userID: Scalars['UUID']['input'];
};

export type RolesVirtualContributorInput = {
  /** The ID or nameID of the VC to retrieve the roles of. */
  virtualContributorID: Scalars['UUID']['input'];
};

export type Room = {
  __typename?: 'Room';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Messages in this Room. */
  messages: Array<Message>;
  /** The number of messages in the Room. */
  messagesCount: Scalars['Float']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** Virtual Contributor Interactions in this Room. */
  vcInteractions: Array<VcInteraction>;
};

export type RoomAddReactionToMessageInput = {
  /** The reaction to the message. */
  emoji: Scalars['Emoji']['input'];
  /** The message id that is being reacted to */
  messageID: Scalars['MessageID']['input'];
  /** The Room to remove a message from. */
  roomID: Scalars['UUID']['input'];
};

/** The event happened in the subscribed room */
export type RoomEventSubscriptionResult = {
  __typename?: 'RoomEventSubscriptionResult';
  /** A message related event. */
  message?: Maybe<RoomMessageEventSubscriptionResult>;
  /** A message reaction related event. */
  reaction?: Maybe<RoomMessageReactionEventSubscriptionResult>;
  /** The Room on which the event happened. */
  room: Room;
  /** The identifier for the Room on which the event happened. */
  roomID: Scalars['String']['output'];
};

/** A message event happened in the subscribed room */
export type RoomMessageEventSubscriptionResult = {
  __typename?: 'RoomMessageEventSubscriptionResult';
  /** A message related event. */
  data: Message;
  /** The type of event. */
  type: MutationType;
};

/** A message reaction event happened in the subscribed room */
export type RoomMessageReactionEventSubscriptionResult = {
  __typename?: 'RoomMessageReactionEventSubscriptionResult';
  /** A message related event. */
  data: Reaction;
  /** The message on which the reaction event happened. */
  messageID?: Maybe<Scalars['String']['output']>;
  /** The type of event. */
  type: MutationType;
};

export type RoomRemoveMessageInput = {
  /** The message id that should be removed */
  messageID: Scalars['MessageID']['input'];
  /** The Room to remove a message from. */
  roomID: Scalars['UUID']['input'];
};

export type RoomRemoveReactionToMessageInput = {
  /** The reaction that is being removed */
  reactionID: Scalars['MessageID']['input'];
  /** The Room to remove a message from. */
  roomID: Scalars['UUID']['input'];
};

export type RoomSendMessageInput = {
  /** The message being sent */
  message: Scalars['String']['input'];
  /** The Room the message is being sent to */
  roomID: Scalars['UUID']['input'];
};

export type RoomSendMessageReplyInput = {
  /** The message being sent */
  message: Scalars['String']['input'];
  /** The Room the message is being sent to */
  roomID: Scalars['UUID']['input'];
  /** The message starting the thread being replied to */
  threadID: Scalars['MessageID']['input'];
};

/** The category in which to search. A category may include a couple of entity types, e.g. "responses" include posts, whiteboard, etc. */
export enum SearchCategory {
  CollaborationTools = 'COLLABORATION_TOOLS',
  Contributors = 'CONTRIBUTORS',
  Responses = 'RESPONSES',
  Spaces = 'SPACES',
}

export type SearchFilterInput = {
  /** Include this category in the search results. */
  category: SearchCategory;
  /** The cursor after which we want results (offset) - pass this from your previous search to request additional results. Useful for paginating results. */
  cursor?: InputMaybe<Scalars['SearchCursor']['input']>;
  /** How many results per category to return. Useful for paginating results. */
  size?: InputMaybe<Scalars['Float']['input']>;
  /** Which types to include. Defaults to all in the category. */
  types?: InputMaybe<Array<SearchResultType>>;
};

export type SearchInput = {
  /** Return results that satisfy these conditions. */
  filters?: InputMaybe<Array<SearchFilterInput>>;
  /** Restrict the search to only the specified Space. Default is all Spaces. */
  searchInSpaceFilter?: InputMaybe<Scalars['UUID']['input']>;
  /** Expand the search to includes Tagsets with the provided names. Max 2. */
  tagsetNames?: InputMaybe<Array<Scalars['String']['input']>>;
  /** The terms to be searched for within this Space. Max 5. */
  terms: Array<Scalars['String']['input']>;
};

export type SearchResult = {
  /** The identifier of the search result. Does not represent the entity in Alkemio. */
  id: Scalars['UUID']['output'];
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float']['output'];
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']['output']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export type SearchResultCallout = SearchResult & {
  __typename?: 'SearchResultCallout';
  /** The Callout that was found. */
  callout: Callout;
  /** The identifier of the search result. Does not represent the entity in Alkemio. */
  id: Scalars['UUID']['output'];
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float']['output'];
  /** The parent Space of the Callout. */
  space: Space;
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']['output']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export type SearchResultOrganization = SearchResult & {
  __typename?: 'SearchResultOrganization';
  /** The identifier of the search result. Does not represent the entity in Alkemio. */
  id: Scalars['UUID']['output'];
  /** The Organization that was found. */
  organization: Organization;
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float']['output'];
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']['output']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export type SearchResultPost = SearchResult & {
  __typename?: 'SearchResultPost';
  /** The Callout of the Post. */
  callout: Callout;
  /** The identifier of the search result. Does not represent the entity in Alkemio. */
  id: Scalars['UUID']['output'];
  /** The Post that was found. */
  post: Post;
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float']['output'];
  /** The Space of the Post. */
  space: Space;
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']['output']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

export type SearchResultSpace = SearchResult & {
  __typename?: 'SearchResultSpace';
  /** The identifier of the search result. Does not represent the entity in Alkemio. */
  id: Scalars['UUID']['output'];
  /** The parent of this Space, if any. */
  parentSpace?: Maybe<Space>;
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float']['output'];
  /** The Space that was found. */
  space: Space;
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']['output']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
};

/** The different types of available search results. */
export enum SearchResultType {
  Callout = 'CALLOUT',
  Memo = 'MEMO',
  Organization = 'ORGANIZATION',
  Post = 'POST',
  Space = 'SPACE',
  Subspace = 'SUBSPACE',
  User = 'USER',
  Whiteboard = 'WHITEBOARD',
}

export type SearchResultUser = SearchResult & {
  __typename?: 'SearchResultUser';
  /** The identifier of the search result. Does not represent the entity in Alkemio. */
  id: Scalars['UUID']['output'];
  /** The score for this search result; more matches means a higher score. */
  score: Scalars['Float']['output'];
  /** The terms that were matched for this result */
  terms: Array<Scalars['String']['output']>;
  /** The type of returned result for this search. */
  type: SearchResultType;
  /** The User that was found. */
  user: User;
};

export enum SearchVisibility {
  Account = 'ACCOUNT',
  Hidden = 'HIDDEN',
  Public = 'PUBLIC',
}

export type Sentry = {
  __typename?: 'Sentry';
  /** Flag indicating if the client should use Sentry for monitoring. */
  enabled: Scalars['Boolean']['output'];
  /** URL to the Sentry endpoint. */
  endpoint: Scalars['String']['output'];
  /** The Sentry environment to report to. */
  environment: Scalars['String']['output'];
  /** Flag indicating if PII should be submitted on Sentry events. */
  submitPII: Scalars['Boolean']['output'];
};

export type ServiceMetadata = {
  __typename?: 'ServiceMetadata';
  /** Service name e.g. CT Server */
  name?: Maybe<Scalars['String']['output']>;
  /** Version in the format {major.minor.patch} - using SemVer. */
  version?: Maybe<Scalars['String']['output']>;
};

export type Space = {
  __typename?: 'Space';
  /** About this space. */
  about: SpaceAbout;
  /** The Account that this Space is part of. */
  account: Account;
  /** The "highest" subscription active for this Space. */
  activeSubscription?: Maybe<SpaceSubscription>;
  /** The Agent representing this Space. */
  agent: Agent;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The collaboration for the Space. */
  collaboration: Collaboration;
  /** Get the Community for the Space.  */
  community: Community;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The level of this Space, representing the number of Spaces above this one. */
  level: SpaceLevel;
  /** The ID of the level zero space for this tree. */
  levelZeroSpaceID: Scalars['String']['output'];
  /** The License operating on this Space. */
  license: License;
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The calculated platform access for this Space. */
  platformAccess: PlatformRolesAccess;
  /** The settings for this Space. */
  settings: SpaceSettings;
  /** The StorageAggregator in use by this Space */
  storageAggregator: StorageAggregator;
  /** The subscriptions active for this Space. */
  subscriptions: Array<SpaceSubscription>;
  /** A particular subspace by its nameID */
  subspaceByNameID: Space;
  /** The subspaces for the space. */
  subspaces: Array<Space>;
  /** The TemplatesManager in use by this Space */
  templatesManager?: Maybe<TemplatesManager>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** Visibility of the Space. */
  visibility: SpaceVisibility;
};

export type SpaceSubspaceByNameIdArgs = {
  NAMEID: Scalars['NameID']['input'];
};

export type SpaceSubspacesArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  limit?: InputMaybe<Scalars['Float']['input']>;
  shuffle?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SpaceAbout = {
  __typename?: 'SpaceAbout';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The guidelines for members of this Community. */
  guidelines: CommunityGuidelines;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Is the content of this Space visible to non-Members?. */
  isContentPublic: Scalars['Boolean']['output'];
  /** The membership information for this Space. */
  membership: SpaceAboutMembership;
  /** Metrics about activity within this Space. */
  metrics?: Maybe<Array<Nvp>>;
  /** The Profile for the Space. */
  profile: Profile;
  /** The Space provider (host). */
  provider: Contributor;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** Who should get involved in this challenge */
  who?: Maybe<Scalars['Markdown']['output']>;
  /** The goal that is being pursued */
  why?: Maybe<Scalars['Markdown']['output']>;
};

export type SpaceAboutMembership = {
  __typename?: 'SpaceAboutMembership';
  /** The Form used for Applications to this Space. */
  applicationForm: Form;
  /** The identifier of the Community within the Space. */
  communityID: Scalars['UUID']['output'];
  /** The Lead Organizations that are associated with this Space. */
  leadOrganizations: Array<Organization>;
  /** The Lead Users that are associated with this Space. */
  leadUsers: Array<User>;
  /** The membership status of the currently logged in user. */
  myMembershipStatus?: Maybe<CommunityMembershipStatus>;
  /** The privileges granted to the current user based on the Space membership policy. */
  myPrivileges?: Maybe<Array<AuthorizationPrivilege>>;
  /** The identifier of the RoleSet within the Space. */
  roleSetID: Scalars['UUID']['output'];
};

export type SpaceFilterInput = {
  /** Return Spaces with a Visibility matching one of the provided types. */
  visibilities?: InputMaybe<Array<SpaceVisibility>>;
};

export enum SpaceLevel {
  L0 = 'L0',
  L1 = 'L1',
  L2 = 'L2',
}

export type SpacePendingMembershipInfo = {
  __typename?: 'SpacePendingMembershipInfo';
  /** About the Space */
  about: SpaceAbout;
  /** The CommunityGuidelines for the Space */
  communityGuidelines: CommunityGuidelines;
  /** The Space ID */
  id: Scalars['UUID']['output'];
  /** The Level of the Space */
  level: SpaceLevel;
};

export enum SpacePrivacyMode {
  Private = 'PRIVATE',
  Public = 'PUBLIC',
}

export type SpaceSettings = {
  __typename?: 'SpaceSettings';
  /** The collaboration settings for this Space. */
  collaboration: SpaceSettingsCollaboration;
  /** The membership settings for this Space. */
  membership: SpaceSettingsMembership;
  /** The privacy settings for this Space */
  privacy: SpaceSettingsPrivacy;
};

export type SpaceSettingsCollaboration = {
  __typename?: 'SpaceSettingsCollaboration';
  /** Flag to control if events from Subspaces are visible on this Space calendar as well. */
  allowEventsFromSubspaces: Scalars['Boolean']['output'];
  /** Flag to control if members can create callouts. */
  allowMembersToCreateCallouts: Scalars['Boolean']['output'];
  /** Flag to control if members can create subspaces. */
  allowMembersToCreateSubspaces: Scalars['Boolean']['output'];
  /** Flag to control if ability to contribute is inherited from parent Space. */
  inheritMembershipRights: Scalars['Boolean']['output'];
};

export type SpaceSettingsMembership = {
  __typename?: 'SpaceSettingsMembership';
  /** Allow subspace admins to invite to this Space. */
  allowSubspaceAdminsToInviteMembers: Scalars['Boolean']['output'];
  /** The membership policy in usage for this Space */
  policy: CommunityMembershipPolicy;
  /** The organizations that are trusted to Join as members for this Space */
  trustedOrganizations: Array<Scalars['UUID']['output']>;
};

export type SpaceSettingsPrivacy = {
  __typename?: 'SpaceSettingsPrivacy';
  /** Flag to control if Platform Support has admin rights. */
  allowPlatformSupportAsAdmin: Scalars['Boolean']['output'];
  /** The privacy mode for this Space */
  mode: SpacePrivacyMode;
};

export type SpaceSubscription = {
  __typename?: 'SpaceSubscription';
  /** The expiry date of this subscription, null if it does never expire. */
  expires?: Maybe<Scalars['DateTime']['output']>;
  /** The name of the Subscription. */
  name: LicensingCredentialBasedCredentialType;
};

export enum SpaceVisibility {
  Active = 'ACTIVE',
  Archived = 'ARCHIVED',
  Demo = 'DEMO',
}

export type StorageAggregator = {
  __typename?: 'StorageAggregator';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The Storage Bucket for files directly on this Storage Aggregator (legacy). */
  directStorageBucket: StorageBucket;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The key information about the entity using this StorageAggregator, if any. */
  parentEntity?: Maybe<StorageAggregatorParent>;
  /** The aggregate size of all StorageBuckets for this StorageAggregator. */
  size: Scalars['Float']['output'];
  /** The list of child storageAggregators for this StorageAggregator. */
  storageAggregators: Array<StorageAggregator>;
  /** The Storage Buckets that are being managed via this StorageAggregators. */
  storageBuckets: Array<StorageBucket>;
  /** A type of entity that this StorageAggregator is being used with. */
  type?: Maybe<StorageAggregatorType>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

/** Valid parent is Account, Space, User, Organization, Platform */
export type StorageAggregatorParent = {
  __typename?: 'StorageAggregatorParent';
  /** The display name. */
  displayName: Scalars['String']['output'];
  /** The UUID of the parent entity. */
  id: Scalars['UUID']['output'];
  /** If the parent entity is a Space, then the level of the Space. */
  level?: Maybe<SpaceLevel>;
  /** The URL that can be used to access the parent entity. */
  url: Scalars['String']['output'];
};

export enum StorageAggregatorType {
  Account = 'ACCOUNT',
  Organization = 'ORGANIZATION',
  Platform = 'PLATFORM',
  Space = 'SPACE',
  User = 'USER',
}

export type StorageBucket = {
  __typename?: 'StorageBucket';
  /** Mime types allowed to be stored on this StorageBucket. */
  allowedMimeTypes: Array<Scalars['String']['output']>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** A single Document */
  document?: Maybe<Document>;
  /** The list of Documents for this StorageBucket. */
  documents: Array<Document>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Maximum allowed file size on this StorageBucket. */
  maxFileSize: Scalars['Float']['output'];
  /** The key information about the entity using this StorageBucket, if any. */
  parentEntity?: Maybe<StorageBucketParent>;
  /** The aggregate size of all Documents for this StorageBucket. */
  size: Scalars['Float']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type StorageBucketDocumentArgs = {
  ID: Scalars['UUID']['input'];
};

export type StorageBucketDocumentsArgs = {
  IDs?: InputMaybe<Array<Scalars['UUID']['input']>>;
  limit?: InputMaybe<Scalars['Float']['input']>;
};

export type StorageBucketParent = {
  __typename?: 'StorageBucketParent';
  /** The display name. */
  displayName: Scalars['String']['output'];
  /** The UUID of the parent entity. */
  id: Scalars['UUID']['output'];
  /** The type of entity that this StorageBucket is being used with. */
  type: ProfileType;
  /** The URL that can be used to access the parent entity. */
  url: Scalars['String']['output'];
};

export type StorageBucketUploadFileInput = {
  storageBucketId: Scalars['String']['input'];
  /** Is this a temporary Document that will be moved later to another StorageBucket. */
  temporaryLocation?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StorageBucketUploadFileOnLinkInput = {
  linkID: Scalars['String']['input'];
};

export type StorageBucketUploadFileOnReferenceInput = {
  referenceID: Scalars['String']['input'];
};

export type StorageConfig = {
  __typename?: 'StorageConfig';
  /** Config for uploading files to Alkemio. */
  file: FileStorageConfig;
};

export type Subscription = {
  __typename?: 'Subscription';
  activityCreated: ActivityCreatedSubscriptionResult;
  /** Receive new Update messages on Communities the currently authenticated User is a member of. */
  calloutPostCreated: CalloutPostCreated;
  /** Receive updates on Discussions */
  forumDiscussionUpdated: Discussion;
  /** New in-app notification received for the currently authenticated user. */
  inAppNotificationReceived: InAppNotification;
  /** Received on verified credentials change */
  profileVerifiedCredential: ProfileCredentialVerified;
  /** Receive Room event */
  roomEvents: RoomEventSubscriptionResult;
  /** Receive new Subspaces created on the Space. */
  subspaceCreated: SubspaceCreated;
  /** Receive updates on virtual contributors */
  virtualContributorUpdated: VirtualContributorUpdatedSubscriptionResult;
};

export type SubscriptionActivityCreatedArgs = {
  input: ActivityCreatedSubscriptionInput;
};

export type SubscriptionCalloutPostCreatedArgs = {
  calloutID: Scalars['UUID']['input'];
};

export type SubscriptionForumDiscussionUpdatedArgs = {
  forumID: Scalars['UUID']['input'];
};

export type SubscriptionRoomEventsArgs = {
  roomID: Scalars['UUID']['input'];
};

export type SubscriptionSubspaceCreatedArgs = {
  spaceID: Scalars['UUID']['input'];
};

export type SubscriptionVirtualContributorUpdatedArgs = {
  virtualContributorID: Scalars['UUID']['input'];
};

export type SubspaceCreated = {
  __typename?: 'SubspaceCreated';
  /** The identifier for the Space on which the subspace was created. */
  spaceID: Scalars['UUID']['output'];
  /** The subspace that has been created. */
  subspace: Space;
};

export type Tagset = {
  __typename?: 'Tagset';
  /** The allowed values for this Tagset. */
  allowedValues: Array<Scalars['String']['output']>;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  tags: Array<Scalars['String']['output']>;
  type: TagsetType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type TagsetArgs = {
  /** Return only Callouts that match one of the tagsets and any of the tags in them. */
  name: TagsetReservedName;
  /** A list of tags to include. */
  tags?: InputMaybe<Array<Scalars['String']['input']>>;
};

export enum TagsetReservedName {
  Capabilities = 'CAPABILITIES',
  Default = 'DEFAULT',
  FlowState = 'FLOW_STATE',
  Keywords = 'KEYWORDS',
  Skills = 'SKILLS',
}

export type TagsetTemplate = {
  __typename?: 'TagsetTemplate';
  allowedValues: Array<Scalars['String']['output']>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** For Tagsets of type SELECT_ONE, the default selected value. */
  defaultSelectedValue?: Maybe<Scalars['String']['output']>;
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  name: Scalars['String']['output'];
  type: TagsetType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export enum TagsetType {
  Freeform = 'FREEFORM',
  SelectMany = 'SELECT_MANY',
  SelectOne = 'SELECT_ONE',
}

export type Task = {
  __typename?: 'Task';
  /** The timestamp when the task was created */
  created: Scalars['Float']['output'];
  /** the timestamp when the task was completed */
  end?: Maybe<Scalars['Float']['output']>;
  /** info about the errors of the task */
  errors?: Maybe<Array<Scalars['String']['output']>>;
  /** The UUID of the task */
  id: Scalars['UUID']['output'];
  /** Amount of items that need to be processed */
  itemsCount?: Maybe<Scalars['Float']['output']>;
  /** Amount of items that are already processed */
  itemsDone?: Maybe<Scalars['Float']['output']>;
  /** The progress  of the task if the total item count is defined */
  progress?: Maybe<Scalars['Float']['output']>;
  /** info about the completed part of the task */
  results?: Maybe<Array<Scalars['String']['output']>>;
  /** The timestamp when the task was started */
  start: Scalars['Float']['output'];
  /** The current status of the task */
  status: TaskStatus;
  /** TBD */
  type?: Maybe<Scalars['String']['output']>;
};

/** The current status of the task */
export enum TaskStatus {
  Completed = 'COMPLETED',
  Errored = 'ERRORED',
  InProgress = 'IN_PROGRESS',
}

export type Template = {
  __typename?: 'Template';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Callout for this Template. */
  callout?: Maybe<Callout>;
  /** The Community Guidelines for this Template. */
  communityGuidelines?: Maybe<CommunityGuidelines>;
  /** The Space for this Template. */
  contentSpace?: Maybe<TemplateContentSpace>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The description for Post Templates to users filling out a new Post based on this Template. */
  postDefaultDescription?: Maybe<Scalars['Markdown']['output']>;
  /** The Profile for this Template. */
  profile: Profile;
  /** The type for this Template. */
  type: TemplateType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The Whiteboard for this Template. */
  whiteboard?: Maybe<Whiteboard>;
};

export type TemplateContentSpace = {
  __typename?: 'TemplateContentSpace';
  /** Template to be used to tell About a new Space. */
  about: SpaceAbout;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The collaboration for the TemplateContentSpace. */
  collaboration: Collaboration;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The level of this TemplateContentSpace */
  level: SpaceLevel;
  /** The settings for this TemplateContentSpace. */
  settings: SpaceSettings;
  /** The template subspaces for the Template Content Space. */
  subspaces: Array<TemplateContentSpace>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type TemplateDefault = {
  __typename?: 'TemplateDefault';
  /** The type of any Template stored here. */
  allowedTemplateType: TemplateType;
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The template accessible via this TemplateDefault, if any. */
  template?: Maybe<Template>;
  /** The type of this TemplateDefault. */
  type: TemplateDefaultType;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export enum TemplateDefaultType {
  PlatformSpace = 'PLATFORM_SPACE',
  PlatformSpaceTutorials = 'PLATFORM_SPACE_TUTORIALS',
  PlatformSubspace = 'PLATFORM_SUBSPACE',
  PlatformSubspaceKnowledge = 'PLATFORM_SUBSPACE_KNOWLEDGE',
  SpaceSubspace = 'SPACE_SUBSPACE',
}

export type TemplateResult = {
  __typename?: 'TemplateResult';
  /** The InnovationPack where this Template is being returned from. */
  innovationPack: InnovationPack;
  /** The Template that is being returned. */
  template: Template;
};

export enum TemplateType {
  Callout = 'CALLOUT',
  CommunityGuidelines = 'COMMUNITY_GUIDELINES',
  Post = 'POST',
  Space = 'SPACE',
  Whiteboard = 'WHITEBOARD',
}

export type TemplatesManager = {
  __typename?: 'TemplatesManager';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The TemplateDefaults in this TemplatesManager. */
  templateDefaults: Array<TemplateDefault>;
  /** The templatesSet in use by this TemplatesManager. */
  templatesSet?: Maybe<TemplatesSet>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type TemplatesSet = {
  __typename?: 'TemplatesSet';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The CalloutTemplates in this TemplatesSet. */
  calloutTemplates: Array<Template>;
  /** The total number of CalloutTemplates in this TemplatesSet. */
  calloutTemplatesCount: Scalars['Float']['output'];
  /** The CommunityGuidelines in this TemplatesSet. */
  communityGuidelinesTemplates: Array<Template>;
  /** The total number of CommunityGuidelinesTemplates in this TemplatesSet. */
  communityGuidelinesTemplatesCount: Scalars['Float']['output'];
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The Post Templates in this TemplatesSet. */
  postTemplates: Array<Template>;
  /** The total number of Post Templates in this TemplatesSet. */
  postTemplatesCount: Scalars['Float']['output'];
  /** The Space Templates in this TemplatesSet. */
  spaceTemplates: Array<Template>;
  /** The total number of Space Templates in this TemplatesSet. */
  spaceTemplatesCount: Scalars['Float']['output'];
  /** The Templates in this TemplatesSet. */
  templates: Array<Template>;
  /** The total number of Templates in this TemplatesSet. */
  templatesCount: Scalars['Float']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  /** The WhiteboardTemplates in this TemplatesSet. */
  whiteboardTemplates: Array<Template>;
  /** The total number of WhiteboardTemplates in this TemplatesSet. */
  whiteboardTemplatesCount: Scalars['Float']['output'];
};

export type Timeline = {
  __typename?: 'Timeline';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The Innovation Library for the timeline */
  calendar: Calendar;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type TransferAccountInnovationHubInput = {
  /** The Innovation Hub to be transferred. */
  innovationHubID: Scalars['UUID']['input'];
  /** The Account to which the Innovation Hub will be transferred. */
  targetAccountID: Scalars['UUID']['input'];
};

export type TransferAccountInnovationPackInput = {
  /** The InnovationPack to be transferred. */
  innovationPackID: Scalars['UUID']['input'];
  /** The Account to which the Innovation Pack will be transferred. */
  targetAccountID: Scalars['UUID']['input'];
};

export type TransferAccountSpaceInput = {
  /** The Space to be transferred. */
  spaceID: Scalars['UUID']['input'];
  /** The Account to which the Space will be transferred. */
  targetAccountID: Scalars['UUID']['input'];
};

export type TransferAccountVirtualContributorInput = {
  /** The Account to which the Virtual Contributor will be transferred. */
  targetAccountID: Scalars['UUID']['input'];
  /** The Virtual Contributor to be transferred. */
  virtualContributorID: Scalars['UUID']['input'];
};

export type TransferCalloutInput = {
  /** The Callout to be transferred. */
  calloutID: Scalars['UUID']['input'];
  /** The target CalloutsSet to which the Callout will be transferred. */
  targetCalloutsSetID: Scalars['UUID']['input'];
};

export type UpdateAiPersonaInput = {
  ID: Scalars['UUID']['input'];
};

export type UpdateAiPersonaServiceInput = {
  ID: Scalars['UUID']['input'];
  bodyOfKnowledgeID?: InputMaybe<Scalars['UUID']['input']>;
  bodyOfKnowledgeType?: InputMaybe<AiPersonaBodyOfKnowledgeType>;
  engine?: InputMaybe<AiPersonaEngine>;
  externalConfig?: InputMaybe<ExternalConfigInput>;
  prompt?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type UpdateApplicationFormOnRoleSetInput = {
  formData: UpdateFormInput;
  roleSetID: Scalars['UUID']['input'];
};

export type UpdateBaselineLicensePlanOnAccount = {
  /** The Account to update the Baseline License Plan. */
  accountID: Scalars['UUID']['input'];
  /** The number of Innovation Packs allowed. */
  innovationPacks?: InputMaybe<Scalars['Int']['input']>;
  /** The number of Free Spaces allowed. */
  spaceFree?: InputMaybe<Scalars['Int']['input']>;
  /** The number of Plus Spaces allowed. */
  spacePlus?: InputMaybe<Scalars['Int']['input']>;
  /** The number of Premium Spaces allowed. */
  spacePremium?: InputMaybe<Scalars['Int']['input']>;
  /** The number of Starting Pages allowed. */
  startingPages?: InputMaybe<Scalars['Int']['input']>;
  /** The number of Virtual Contributors allowed. */
  virtualContributor?: InputMaybe<Scalars['Int']['input']>;
};

export type UpdateCalendarEventInput = {
  ID: Scalars['UUID']['input'];
  /** The length of the event in days. */
  durationDays?: InputMaybe<Scalars['Float']['input']>;
  /** The length of the event in minutes. */
  durationMinutes: Scalars['Float']['input'];
  /** Flag to indicate if this event is for multiple days. */
  multipleDays: Scalars['Boolean']['input'];
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** The state date for the event. */
  startDate: Scalars['DateTime']['input'];
  type?: InputMaybe<CalendarEventType>;
  /** Is the event visible on the parent calendar. */
  visibleOnParentCalendar?: InputMaybe<Scalars['Boolean']['input']>;
  /** Flag to indicate if this event is for a whole day. */
  wholeDay: Scalars['Boolean']['input'];
};

export type UpdateCalloutContributionDefaultsInput = {
  /** The default title to use for new contributions. */
  defaultDisplayName?: InputMaybe<Scalars['String']['input']>;
  /** The default description to use for new Post contributions. */
  postDescription?: InputMaybe<Scalars['Markdown']['input']>;
  /** The default description to use for new Whiteboard contributions. */
  whiteboardContent?: InputMaybe<Scalars['WhiteboardContent']['input']>;
};

export type UpdateCalloutEntityInput = {
  ID: Scalars['UUID']['input'];
  classification?: InputMaybe<UpdateClassificationInput>;
  contributionDefaults?: InputMaybe<UpdateCalloutContributionDefaultsInput>;
  framing?: InputMaybe<UpdateCalloutFramingInput>;
  /** Set Group for this Callout. */
  groupName?: InputMaybe<Scalars['String']['input']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  settings?: InputMaybe<UpdateCalloutSettingsInput>;
  /** The sort order to assign to this Callout. */
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
};

export type UpdateCalloutFramingInput = {
  link?: InputMaybe<UpdateLinkInput>;
  /** The new markdown content for the Memo. */
  memoContent?: InputMaybe<Scalars['Markdown']['input']>;
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
  /** The type of additional content attached to the framing of the callout. */
  type?: InputMaybe<CalloutFramingType>;
  /** The new content to be used. */
  whiteboardContent?: InputMaybe<Scalars['WhiteboardContent']['input']>;
};

export type UpdateCalloutPublishInfoInput = {
  /** The identifier for the Callout whose publisher is to be updated. */
  calloutID: Scalars['UUID']['input'];
  /** The timestamp to set for the publishing of the Callout. */
  publishDate?: InputMaybe<Scalars['Float']['input']>;
  /** The identifier of the publisher of the Callout. */
  publisherID?: InputMaybe<Scalars['UUID']['input']>;
};

export type UpdateCalloutSettingsContributionInput = {
  /** Indicate who can add more contributions to the callout. */
  canAddContributions?: InputMaybe<CalloutAllowedContributors>;
  /** Can comment to contributions callout. */
  commentsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** Can add contributions to the Callout. Allowed Contribution types is going to be readOnly, so this field can be used to enable or disable the contribution temporarily instead of setting allowedTypes to None. */
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateCalloutSettingsFramingInput = {
  /** Can comment to callout framing. */
  commentsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateCalloutSettingsInput = {
  contribution?: InputMaybe<UpdateCalloutSettingsContributionInput>;
  framing?: InputMaybe<UpdateCalloutSettingsFramingInput>;
  /** Visibility of the Callout. */
  visibility?: InputMaybe<CalloutVisibility>;
};

export type UpdateCalloutVisibilityInput = {
  /** The identifier for the Callout whose visibility is to be updated. */
  calloutID: Scalars['String']['input'];
  /** Send a notification on publishing. */
  sendNotification?: InputMaybe<Scalars['Boolean']['input']>;
  /** Visibility of the Callout. */
  visibility: CalloutVisibility;
};

export type UpdateCalloutsSortOrderInput = {
  /** The IDs of the callouts to update the sort order on */
  calloutIDs: Array<Scalars['UUID']['input']>;
  calloutsSetID: Scalars['UUID']['input'];
};

export type UpdateClassificationInput = {
  tagsets?: InputMaybe<Array<UpdateTagsetInput>>;
};

export type UpdateClassificationSelectTagsetValueInput = {
  classificationID: Scalars['UUID']['input'];
  selectedValue: Scalars['String']['input'];
  tagsetName: Scalars['String']['input'];
};

export type UpdateCollaborationFromSpaceTemplateInput = {
  /** Add the Callouts from the Collaboration Template */
  addCallouts?: InputMaybe<Scalars['Boolean']['input']>;
  /** ID of the Collaboration to be updated */
  collaborationID: Scalars['UUID']['input'];
  /** The Space Template whose Collaboration that will be used for updates to the target Collaboration */
  spaceTemplateID: Scalars['UUID']['input'];
};

export type UpdateCommunityGuidelinesEntityInput = {
  /** ID of the CommunityGuidelines */
  communityGuidelinesID: Scalars['UUID']['input'];
  /** The Profile for this community guidelines. */
  profile: UpdateProfileInput;
};

export type UpdateContributionCalloutsSortOrderInput = {
  calloutID: Scalars['UUID']['input'];
  /** The IDs of the contributions to update the sort order on */
  contributionIDs: Array<Scalars['UUID']['input']>;
};

export type UpdateDiscussionInput = {
  ID: Scalars['UUID']['input'];
  /** The category for the Discussion */
  category?: InputMaybe<ForumDiscussionCategory>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
};

export type UpdateDocumentInput = {
  ID: Scalars['UUID']['input'];
  /** The display name for the Document. */
  displayName: Scalars['String']['input'];
  tagset?: InputMaybe<UpdateTagsetInput>;
};

export type UpdateFormInput = {
  description: Scalars['Markdown']['input'];
  questions: Array<UpdateFormQuestionInput>;
};

export type UpdateFormQuestionInput = {
  /** The explation text to clarify the question. */
  explanation: Scalars['String']['input'];
  /** The maxiumum length of the answer, in characters, up to a limit of 512. */
  maxLength: Scalars['Float']['input'];
  /** The question to be answered */
  question: Scalars['String']['input'];
  /** Whether an answer is required for this Question. */
  required: Scalars['Boolean']['input'];
  /** The sort order of this question in a wider set of questions. */
  sortOrder: Scalars['Float']['input'];
};

export type UpdateInnovationFlowCurrentStateInput = {
  /** ID of the Innovation Flow State to be selected as the current one. */
  currentStateID: Scalars['UUID']['input'];
  /** ID of the Innovation Flow */
  innovationFlowID: Scalars['UUID']['input'];
};

export type UpdateInnovationFlowInput = {
  /** ID of the Innovation Flow */
  innovationFlowID: Scalars['UUID']['input'];
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
};

export type UpdateInnovationFlowStateInput = {
  /** The explanation text to clarify the State. */
  description?: InputMaybe<Scalars['Markdown']['input']>;
  /** The display name for the State */
  displayName: Scalars['String']['input'];
  /** ID of the Innovation Flow */
  innovationFlowStateID: Scalars['UUID']['input'];
  settings?: InputMaybe<UpdateInnovationFlowStateSettingsInput>;
};

export type UpdateInnovationFlowStateSettingsInput = {
  /** The flag to set. */
  allowNewCallouts: Scalars['Boolean']['input'];
};

export type UpdateInnovationFlowStatesSortOrderInput = {
  innovationFlowID: Scalars['UUID']['input'];
  /** The IDs of the states to update the sort order on */
  stateIDs: Array<Scalars['UUID']['input']>;
};

export type UpdateInnovationHubInput = {
  ID: Scalars['UUID']['input'];
  /** Flag to control the visibility of the InnovationHub in the platform store. */
  listedInStore?: InputMaybe<Scalars['Boolean']['input']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** Visibility of the InnovationHub in searches. */
  searchVisibility?: InputMaybe<SearchVisibility>;
  /** A list of Spaces to include in this Innovation Hub. Only valid when type 'list' is used. */
  spaceListFilter?: InputMaybe<Array<Scalars['UUID']['input']>>;
  /** Spaces with which visibility this Innovation Hub will display. Only valid when type 'visibility' is used. */
  spaceVisibilityFilter?: InputMaybe<SpaceVisibility>;
};

export type UpdateInnovationPackInput = {
  ID: Scalars['UUID']['input'];
  /** Flag to control the visibility of the InnovationPack in the platform Library. */
  listedInStore?: InputMaybe<Scalars['Boolean']['input']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** Visibility of the InnovationPack in searches. */
  searchVisibility?: InputMaybe<SearchVisibility>;
};

export type UpdateKnowledgeBaseInput = {
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
};

export type UpdateLicensePlanInput = {
  ID: Scalars['UUID']['input'];
  /** Assign this plan to all new Organization accounts */
  assignToNewOrganizationAccounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Assign this plan to all new User accounts */
  assignToNewUserAccounts?: InputMaybe<Scalars['Boolean']['input']>;
  /** Is this plan enabled? */
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  /** Is this plan free? */
  isFree?: InputMaybe<Scalars['Boolean']['input']>;
  /** The credential to represent this plan */
  licenseCredential?: InputMaybe<LicensingCredentialBasedCredentialType>;
  /** The price per month of this plan. */
  pricePerMonth?: InputMaybe<Scalars['Float']['input']>;
  /** Does this plan require contact support */
  requiresContactSupport?: InputMaybe<Scalars['Boolean']['input']>;
  /** Does this plan require a payment method? */
  requiresPaymentMethod?: InputMaybe<Scalars['Boolean']['input']>;
  /** The sorting order for this Plan. */
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
  /** Is there a trial period enabled */
  trialEnabled?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateLinkInput = {
  ID: Scalars['UUID']['input'];
  /** The Profile of the Link. */
  profile?: InputMaybe<UpdateProfileInput>;
  uri?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateLocationInput = {
  addressLine1?: InputMaybe<Scalars['String']['input']>;
  addressLine2?: InputMaybe<Scalars['String']['input']>;
  city?: InputMaybe<Scalars['String']['input']>;
  country?: InputMaybe<Scalars['String']['input']>;
  postalCode?: InputMaybe<Scalars['String']['input']>;
  stateOrProvince?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateMemoEntityInput = {
  ID: Scalars['UUID']['input'];
  contentUpdatePolicy?: InputMaybe<ContentUpdatePolicy>;
  /** The Profile of this entity. */
  profile?: InputMaybe<UpdateProfileInput>;
};

export type UpdateNotificationStateInput = {
  /** The ID of the notification to update. */
  ID: Scalars['UUID']['input'];
  /** The new state of the notification. */
  state: NotificationEventInAppState;
};

export type UpdateOrganizationInput = {
  ID: Scalars['UUID']['input'];
  contactEmail?: InputMaybe<Scalars['String']['input']>;
  domain?: InputMaybe<Scalars['String']['input']>;
  legalEntityName?: InputMaybe<Scalars['String']['input']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateOrganizationPlatformSettingsInput = {
  /** Upate the URL path for the Organization. */
  nameID: Scalars['NameID']['input'];
  /** The ID of the Organization to update. */
  organizationID: Scalars['UUID']['input'];
};

export type UpdateOrganizationSettingsEntityInput = {
  membership?: InputMaybe<UpdateOrganizationSettingsMembershipInput>;
  privacy?: InputMaybe<UpdateOrganizationSettingsPrivacyInput>;
};

export type UpdateOrganizationSettingsInput = {
  /** The identifier for the Organization whose settings are to be updated. */
  organizationID: Scalars['UUID']['input'];
  /** Update the settings for the Organization. */
  settings: UpdateOrganizationSettingsEntityInput;
};

export type UpdateOrganizationSettingsMembershipInput = {
  /** Allow Users with email addresses matching the domain of this Organization to join. */
  allowUsersMatchingDomainToJoin: Scalars['Boolean']['input'];
};

export type UpdateOrganizationSettingsPrivacyInput = {
  /** Allow contribution roles (membership, lead etc) in Spaces to be visible. */
  contributionRolesPubliclyVisible: Scalars['Boolean']['input'];
};

export type UpdatePlatformSettingsInput = {
  integration?: InputMaybe<UpdatePlatformSettingsIntegrationInput>;
};

export type UpdatePlatformSettingsIntegrationInput = {
  /** Update the list of allowed URLs for iFrames within Markdown content. */
  iframeAllowedUrls: Array<Scalars['String']['input']>;
};

export type UpdatePostInput = {
  ID: Scalars['UUID']['input'];
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
};

export type UpdateProfileDirectInput = {
  description?: InputMaybe<Scalars['Markdown']['input']>;
  /** The display name for the entity. */
  displayName?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<UpdateLocationInput>;
  profileID: Scalars['UUID']['input'];
  references?: InputMaybe<Array<UpdateReferenceInput>>;
  /** A memorable short description for this entity. */
  tagline?: InputMaybe<Scalars['String']['input']>;
  tagsets?: InputMaybe<Array<UpdateTagsetInput>>;
};

export type UpdateProfileInput = {
  description?: InputMaybe<Scalars['Markdown']['input']>;
  /** The display name for the entity. */
  displayName?: InputMaybe<Scalars['String']['input']>;
  location?: InputMaybe<UpdateLocationInput>;
  references?: InputMaybe<Array<UpdateReferenceInput>>;
  /** A memorable short description for this entity. */
  tagline?: InputMaybe<Scalars['String']['input']>;
  tagsets?: InputMaybe<Array<UpdateTagsetInput>>;
};

export type UpdateReferenceInput = {
  ID: Scalars['UUID']['input'];
  description?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  uri?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSpaceAboutInput = {
  /** The Profile of this Space. */
  profile?: InputMaybe<UpdateProfileInput>;
  who?: InputMaybe<Scalars['Markdown']['input']>;
  why?: InputMaybe<Scalars['Markdown']['input']>;
};

export type UpdateSpaceInput = {
  ID: Scalars['UUID']['input'];
  /** Update the Space About information. */
  about?: InputMaybe<UpdateSpaceAboutInput>;
};

export type UpdateSpacePlatformSettingsInput = {
  /** Upate the URL path for the Space. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The identifier for the Space whose license etc is to be updated. */
  spaceID: Scalars['UUID']['input'];
  /** Visibility of the Space, only on L0 spaces. */
  visibility?: InputMaybe<SpaceVisibility>;
};

export type UpdateSpaceSettingsCollaborationInput = {
  /** Flag to control if events from Subspaces are visible on this Space calendar as well. */
  allowEventsFromSubspaces: Scalars['Boolean']['input'];
  /** Flag to control if members can create callouts. */
  allowMembersToCreateCallouts: Scalars['Boolean']['input'];
  /** Flag to control if members can create subspaces. */
  allowMembersToCreateSubspaces: Scalars['Boolean']['input'];
  /** Flag to control if ability to contribute is inherited from parent Space. */
  inheritMembershipRights: Scalars['Boolean']['input'];
};

export type UpdateSpaceSettingsEntityInput = {
  collaboration?: InputMaybe<UpdateSpaceSettingsCollaborationInput>;
  membership?: InputMaybe<UpdateSpaceSettingsMembershipInput>;
  privacy?: InputMaybe<UpdateSpaceSettingsPrivacyInput>;
};

export type UpdateSpaceSettingsInput = {
  /** Update the settings for the Space. */
  settings: UpdateSpaceSettingsEntityInput;
  /** The identifier for the Space whose settings are to be updated. */
  spaceID: Scalars['String']['input'];
};

export type UpdateSpaceSettingsMembershipInput = {
  /** Flag to control if Subspace admins can invite for this Space. */
  allowSubspaceAdminsToInviteMembers: Scalars['Boolean']['input'];
  /** The membership policy in usage for this Space */
  policy: CommunityMembershipPolicy;
  /** The organizations that are trusted to Join as members for this Space */
  trustedOrganizations: Array<Scalars['UUID']['input']>;
};

export type UpdateSpaceSettingsPrivacyInput = {
  /** Flag to control if Platform Support has admin rights. */
  allowPlatformSupportAsAdmin?: InputMaybe<Scalars['Boolean']['input']>;
  mode?: InputMaybe<SpacePrivacyMode>;
};

export type UpdateTagsetInput = {
  ID: Scalars['UUID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  tags: Array<Scalars['String']['input']>;
};

export type UpdateTemplateContentSpaceInput = {
  ID: Scalars['UUID']['input'];
  /** Update the TemplateContentSpace About information. */
  about?: InputMaybe<UpdateSpaceAboutInput>;
  /** Update the settings for the Space. */
  settings: UpdateSpaceSettingsEntityInput;
};

export type UpdateTemplateDefaultTemplateInput = {
  /** The identifier for the TemplateDefault to be updated. */
  templateDefaultID: Scalars['UUID']['input'];
  /** The ID for the Template to use. */
  templateID: Scalars['UUID']['input'];
};

export type UpdateTemplateFromSpaceInput = {
  /** Whether to reproduce the hierarchy or just the space. */
  recursive?: InputMaybe<Scalars['Boolean']['input']>;
  /** The Space whose content should be copied to this Template. */
  spaceID: Scalars['UUID']['input'];
  /** The ID of the Template. */
  templateID: Scalars['UUID']['input'];
};

export type UpdateTemplateInput = {
  ID: Scalars['UUID']['input'];
  /** The default description to be pre-filled when users create Posts based on this template. */
  postDefaultDescription?: InputMaybe<Scalars['Markdown']['input']>;
  /** The Profile of the Template. */
  profile?: InputMaybe<UpdateProfileInput>;
  /** The new content to be used. */
  whiteboardContent?: InputMaybe<Scalars['WhiteboardContent']['input']>;
};

export type UpdateUserGroupInput = {
  ID: Scalars['UUID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  profileData?: InputMaybe<UpdateProfileInput>;
};

export type UpdateUserInput = {
  ID: Scalars['UUID']['input'];
  accountUpn?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** Set this user profile as being used as a service account or not. */
  serviceProfile?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserPlatformSettingsInput = {
  email?: InputMaybe<Scalars['String']['input']>;
  /** Upate the URL path for the User. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The identifier for the User whose platform managed information is to be updated. */
  userID: Scalars['String']['input'];
};

export type UpdateUserSettingsCommunicationInput = {
  /** Allow Users to send messages to this User. */
  allowOtherUsersToSendMessages?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsEntityInput = {
  /** Settings related to this users Communication preferences. */
  communication?: InputMaybe<UpdateUserSettingsCommunicationInput>;
  /** Settings related to this users Notifications preferences. */
  notification?: InputMaybe<UpdateUserSettingsNotificationInput>;
  /** Settings related to Privacy. */
  privacy?: InputMaybe<UpdateUserSettingsPrivacyInput>;
};

export type UpdateUserSettingsInput = {
  /** Update the settings for the User. */
  settings: UpdateUserSettingsEntityInput;
  /** The identifier for the User whose settings are to be updated. */
  userID: Scalars['UUID']['input'];
};

export type UpdateUserSettingsNotificationInput = {
  /** Settings related to Organization Notifications. */
  organization?: InputMaybe<UpdateUserSettingsNotificationOrganizationInput>;
  /** Settings related to Platform Notifications. */
  platform?: InputMaybe<UpdateUserSettingsNotificationPlatformInput>;
  /** Settings related to Space Notifications. */
  space?: InputMaybe<UpdateUserSettingsNotificationSpaceInput>;
  /** Settings related to User Notifications. */
  user?: InputMaybe<UpdateUserSettingsNotificationUserInput>;
  /** Settings related to Virtual Contributor Notifications. */
  virtualContributor?: InputMaybe<UpdateUserSettingsNotificationVirtualContributorInput>;
};

export type UpdateUserSettingsNotificationOrganizationInput = {
  /** Receive a notification when the organization you are admin of is mentioned */
  adminMentioned?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive notification when the organization you are admin of is messaged */
  adminMessageReceived?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsNotificationPlatformAdminInput = {
  /** [Admin] Receive a notification when a new L0 Space is created */
  spaceCreated?: InputMaybe<Scalars['Boolean']['input']>;
  /** [Admin] Receive a notification user is assigned or removed from a global role */
  userGlobalRoleChanged?: InputMaybe<Scalars['Boolean']['input']>;
  /** [Admin] Receive notification when a new user signs up */
  userProfileCreated?: InputMaybe<Scalars['Boolean']['input']>;
  /** [Admin] Receive a notification when a user profile is removed */
  userProfileRemoved?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsNotificationPlatformInput = {
  /** Settings related to Platform Admin Notifications. */
  admin?: InputMaybe<UpdateUserSettingsNotificationPlatformAdminInput>;
  /** Receive a notification when a new comment is added to a Discussion I created in the Forum */
  forumDiscussionComment?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification when a new Discussion is created in the Forum */
  forumDiscussionCreated?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsNotificationSpaceAdminInput = {
  /** Receive a notification when a contribution is added (admin) */
  collaborationCalloutContributionCreated?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification when a message is sent to a Space I lead */
  communicationMessageReceived?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification when an application is received */
  communityApplicationReceived?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification when a new member joins the community (admin) */
  communityNewMember?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsNotificationSpaceInput = {
  /** Settings related to Space Admin Notifications. */
  admin?: InputMaybe<UpdateUserSettingsNotificationSpaceAdminInput>;
  /** Receive a notification when a comment is added to a Callout */
  collaborationCalloutComment?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification when a contribution is added */
  collaborationCalloutContributionCreated?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification when a comment is created on a contribution */
  collaborationCalloutPostContributionComment?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification when a callout is published */
  collaborationCalloutPublished?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification for community updates */
  communicationUpdates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsNotificationUserInput = {
  /** Receive a notification when someone replies to a comment I made. */
  commentReply?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive notification I send a message to a User, Organization or Space. */
  copyOfMessageSent?: InputMaybe<Scalars['Boolean']['input']>;
  /** Settings related to User Membership Notifications. */
  membership?: InputMaybe<UpdateUserSettingsNotificationUserMembershipInput>;
  /** Receive a notification you are mentioned */
  mentioned?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive notification when I receive a message. */
  messageReceived?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsNotificationUserMembershipInput = {
  /** Receive a notification when an application is submitted */
  spaceCommunityApplicationSubmitted?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification for community invitation */
  spaceCommunityInvitationReceived?: InputMaybe<Scalars['Boolean']['input']>;
  /** Receive a notification when I join a new community */
  spaceCommunityJoined?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsNotificationVirtualContributorInput = {
  /** Receive notification when a Virtual Contributor receives an invitation to join a Space. */
  adminSpaceCommunityInvitation?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateUserSettingsPrivacyInput = {
  /** Allow contribution roles (communication, lead etc) in Spaces to be visible. */
  contributionRolesPubliclyVisible?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UpdateVirtualContributorInput = {
  ID: Scalars['UUID']['input'];
  /** The KnowledgeBase to use for this Collaboration. */
  knowledgeBaseData?: InputMaybe<UpdateKnowledgeBaseInput>;
  /** Flag to control the visibility of the VC in the platform store. */
  listedInStore?: InputMaybe<Scalars['Boolean']['input']>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The Profile of this entity. */
  profileData?: InputMaybe<UpdateProfileInput>;
  /** Visibility of the VC in searches. */
  searchVisibility?: InputMaybe<SearchVisibility>;
};

export type UpdateVirtualContributorSettingsEntityInput = {
  privacy?: InputMaybe<UpdateVirtualContributorSettingsPrivacyInput>;
};

export type UpdateVirtualContributorSettingsInput = {
  /** Update the settings for the VirtualContributor. */
  settings: UpdateVirtualContributorSettingsEntityInput;
  /** The identifier for the VirtualCOntributor whose settings are to be updated. */
  virtualContributorID: Scalars['UUID']['input'];
};

export type UpdateVirtualContributorSettingsPrivacyInput = {
  /** Enable the content of knowledge bases to be accessed or not. */
  knowledgeBaseContentVisible: Scalars['Boolean']['input'];
};

export type UpdateVisualInput = {
  alternativeText?: InputMaybe<Scalars['String']['input']>;
  uri: Scalars['String']['input'];
  visualID: Scalars['String']['input'];
};

export type UpdateWhiteboardEntityInput = {
  ID: Scalars['UUID']['input'];
  contentUpdatePolicy?: InputMaybe<ContentUpdatePolicy>;
  /** A display identifier, unique within the containing scope. Note: updating the nameID will affect URL on the client. */
  nameID?: InputMaybe<Scalars['NameID']['input']>;
  /** The Profile of this entity. */
  profile?: InputMaybe<UpdateProfileInput>;
};

export type UrlResolverQueryResultCalendar = {
  __typename?: 'UrlResolverQueryResultCalendar';
  calendarEventId?: Maybe<Scalars['UUID']['output']>;
  id: Scalars['UUID']['output'];
};

export type UrlResolverQueryResultCalloutsSet = {
  __typename?: 'UrlResolverQueryResultCalloutsSet';
  calloutId?: Maybe<Scalars['UUID']['output']>;
  contributionId?: Maybe<Scalars['UUID']['output']>;
  id: Scalars['UUID']['output'];
  postId?: Maybe<Scalars['UUID']['output']>;
  type: UrlType;
  whiteboardId?: Maybe<Scalars['UUID']['output']>;
};

export type UrlResolverQueryResultCollaboration = {
  __typename?: 'UrlResolverQueryResultCollaboration';
  calloutsSet: UrlResolverQueryResultCalloutsSet;
  id: Scalars['UUID']['output'];
};

export type UrlResolverQueryResultInnovationPack = {
  __typename?: 'UrlResolverQueryResultInnovationPack';
  id: Scalars['UUID']['output'];
  templatesSet: UrlResolverQueryResultTemplatesSet;
};

export type UrlResolverQueryResultSpace = {
  __typename?: 'UrlResolverQueryResultSpace';
  calendar?: Maybe<UrlResolverQueryResultCalendar>;
  collaboration: UrlResolverQueryResultCollaboration;
  id: Scalars['UUID']['output'];
  level: SpaceLevel;
  levelZeroSpaceID: Scalars['UUID']['output'];
  parentSpaces: Array<Scalars['UUID']['output']>;
  templatesSet?: Maybe<UrlResolverQueryResultTemplatesSet>;
};

export type UrlResolverQueryResultTemplatesSet = {
  __typename?: 'UrlResolverQueryResultTemplatesSet';
  id: Scalars['UUID']['output'];
  templateId?: Maybe<Scalars['UUID']['output']>;
};

export type UrlResolverQueryResultVirtualContributor = {
  __typename?: 'UrlResolverQueryResultVirtualContributor';
  calloutsSet: UrlResolverQueryResultCalloutsSet;
  id: Scalars['UUID']['output'];
};

export type UrlResolverQueryResults = {
  __typename?: 'UrlResolverQueryResults';
  discussionId?: Maybe<Scalars['UUID']['output']>;
  innovationHubId?: Maybe<Scalars['UUID']['output']>;
  innovationPack?: Maybe<UrlResolverQueryResultInnovationPack>;
  organizationId?: Maybe<Scalars['UUID']['output']>;
  space?: Maybe<UrlResolverQueryResultSpace>;
  type: UrlType;
  userId?: Maybe<Scalars['UUID']['output']>;
  virtualContributor?: Maybe<UrlResolverQueryResultVirtualContributor>;
};

export enum UrlType {
  Admin = 'ADMIN',
  Callout = 'CALLOUT',
  CalloutsSet = 'CALLOUTS_SET',
  ContributionPost = 'CONTRIBUTION_POST',
  ContributionWhiteboard = 'CONTRIBUTION_WHITEBOARD',
  ContributorsExplorer = 'CONTRIBUTORS_EXPLORER',
  Discussion = 'DISCUSSION',
  Documentation = 'DOCUMENTATION',
  Error = 'ERROR',
  Flow = 'FLOW',
  Forum = 'FORUM',
  Home = 'HOME',
  InnovationHub = 'INNOVATION_HUB',
  InnovationLibrary = 'INNOVATION_LIBRARY',
  InnovationPacks = 'INNOVATION_PACKS',
  Login = 'LOGIN',
  Logout = 'LOGOUT',
  NotAuthorized = 'NOT_AUTHORIZED',
  Organization = 'ORGANIZATION',
  Recovery = 'RECOVERY',
  Registration = 'REGISTRATION',
  Required = 'REQUIRED',
  Restricted = 'RESTRICTED',
  SignUp = 'SIGN_UP',
  Space = 'SPACE',
  SpaceExplorer = 'SPACE_EXPLORER',
  Unknown = 'UNKNOWN',
  User = 'USER',
  Verify = 'VERIFY',
  VirtualContributor = 'VIRTUAL_CONTRIBUTOR',
}

export type User = Contributor & {
  __typename?: 'User';
  /** The account hosted by this User. */
  account?: Maybe<Account>;
  /** The unique personal identifier (upn) for the account associated with this user profile */
  accountUpn: Scalars['String']['output'];
  /** The Agent representing this User. */
  agent: Agent;
  /** Details about the authentication used for this User. */
  authentication?: Maybe<UserAuthenticationResult>;
  /** The authorization rules for the Contributor */
  authorization?: Maybe<Authorization>;
  /** The Community rooms this user is a member of */
  communityRooms?: Maybe<Array<CommunicationRoom>>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The direct rooms this user is a member of */
  directRooms?: Maybe<Array<DirectRoom>>;
  /** The email address for this User. */
  email: Scalars['String']['output'];
  firstName: Scalars['String']['output'];
  /** Guidance Chat Room for this user */
  guidanceRoom?: Maybe<Room>;
  /** The ID of the Contributor */
  id: Scalars['UUID']['output'];
  /** Can a message be sent to this User. */
  isContactable: Scalars['Boolean']['output'];
  lastName: Scalars['String']['output'];
  /** A name identifier of the Contributor, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The phone number for this User. */
  phone?: Maybe<Scalars['String']['output']>;
  /** The Profile for this User. */
  profile: Profile;
  /** The settings for this User. */
  settings: UserSettings;
  /** The StorageAggregator for managing storage buckets in use by this User */
  storageAggregator?: Maybe<StorageAggregator>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type UserAuthenticationResult = {
  __typename?: 'UserAuthenticationResult';
  /** When the Kratos Account for the user last logged in */
  authenticatedAt?: Maybe<Scalars['DateTime']['output']>;
  /** When the Kratos Account for the user was created */
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  /** The Authentication Methods used for this User. One of email, linkedin, microsoft, github or unknown */
  methods: Array<AuthenticationType>;
};

export type UserAuthorizationResetInput = {
  /** The identifier of the User whose Authorization Policy should be reset. */
  userID: Scalars['UUID']['input'];
};

export type UserFilterInput = {
  displayName?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  firstName?: InputMaybe<Scalars['String']['input']>;
  lastName?: InputMaybe<Scalars['String']['input']>;
};

export type UserGroup = {
  __typename?: 'UserGroup';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The Users that are members of this User Group. */
  members?: Maybe<Array<User>>;
  /** Containing entity for this UserGroup. */
  parent?: Maybe<Groupable>;
  /** The profile for the user group */
  profile?: Maybe<Profile>;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type UserSendMessageInput = {
  /** The message being sent */
  message: Scalars['String']['input'];
  /** The user a message is being sent to */
  receivingUserID: Scalars['String']['input'];
};

export type UserSettings = {
  __typename?: 'UserSettings';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The communication settings for this User. */
  communication: UserSettingsCommunication;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** The notification settings for this User. */
  notification: UserSettingsNotification;
  /** The privacy settings for this User */
  privacy: UserSettingsPrivacy;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type UserSettingsCommunication = {
  __typename?: 'UserSettingsCommunication';
  /** Allow Users to send messages to this User. */
  allowOtherUsersToSendMessages: Scalars['Boolean']['output'];
};

export type UserSettingsNotification = {
  __typename?: 'UserSettingsNotification';
  /** The notifications settings for Organization events for this User */
  organization: UserSettingsNotificationOrganization;
  /** The notifications settings for Platform events for this User */
  platform: UserSettingsNotificationPlatform;
  /** The notifications settings for Space events for this User */
  space: UserSettingsNotificationSpace;
  /** The notifications settings for User events for this User */
  user: UserSettingsNotificationUser;
  /** The notifications settings for Virtual Contributor events for this User */
  virtualContributor: UserSettingsNotificationVirtualContributor;
};

export type UserSettingsNotificationChannels = {
  __typename?: 'UserSettingsNotificationChannels';
  /** Receive notifications by email. */
  email: Scalars['Boolean']['output'];
  /** Receive notifications by inApp. */
  inApp: Scalars['Boolean']['output'];
};

export type UserSettingsNotificationOrganization = {
  __typename?: 'UserSettingsNotificationOrganization';
  /** Receive a notification when the organization you are admin of is mentioned */
  adminMentioned: UserSettingsNotificationChannels;
  /** Receive notification when the organization you are admin of is messaged */
  adminMessageReceived: UserSettingsNotificationChannels;
};

export type UserSettingsNotificationPlatform = {
  __typename?: 'UserSettingsNotificationPlatform';
  /** The notifications settings for Platform Admin events for this User */
  admin: UserSettingsNotificationPlatformAdmin;
  /** Receive a notification when a new comment is added to a Discussion I created in the Forum */
  forumDiscussionComment: UserSettingsNotificationChannels;
  /** Receive a notification when a new Discussion is created in the Forum */
  forumDiscussionCreated: UserSettingsNotificationChannels;
};

export type UserSettingsNotificationPlatformAdmin = {
  __typename?: 'UserSettingsNotificationPlatformAdmin';
  /** Receive a notification when a new L0 Space is created */
  spaceCreated: UserSettingsNotificationChannels;
  /** Receive a notification when a user global role is assigned or removed. */
  userGlobalRoleChanged: UserSettingsNotificationChannels;
  /** Receive notification when a new user signs up */
  userProfileCreated: UserSettingsNotificationChannels;
  /** Receive a notification when a user profile is removed */
  userProfileRemoved: UserSettingsNotificationChannels;
};

export type UserSettingsNotificationSpace = {
  __typename?: 'UserSettingsNotificationSpace';
  /** The notifications settings for Space Admin events for this User */
  admin: UserSettingsNotificationSpaceAdmin;
  /** Receive a notification when a comment is made on a Callout */
  collaborationCalloutComment: UserSettingsNotificationChannels;
  /** Receive a notification when a contribution is created */
  collaborationCalloutContributionCreated: UserSettingsNotificationChannels;
  /** Receive a notification when a comment is created on a Post contribution */
  collaborationCalloutPostContributionComment: UserSettingsNotificationChannels;
  /** Receive a notification when a callout is published */
  collaborationCalloutPublished: UserSettingsNotificationChannels;
  /** Receive a notification for community updates */
  communicationUpdates: UserSettingsNotificationChannels;
};

export type UserSettingsNotificationSpaceAdmin = {
  __typename?: 'UserSettingsNotificationSpaceAdmin';
  /** Receive a notification when a contribution is created (admin) */
  collaborationCalloutContributionCreated: UserSettingsNotificationChannels;
  /** Receive a notification when a message is sent to a Space I lead */
  communicationMessageReceived: UserSettingsNotificationChannels;
  /** Receive a notification when an application is received */
  communityApplicationReceived: UserSettingsNotificationChannels;
  /** Receive a notification when a new member joins the community (admin) */
  communityNewMember: UserSettingsNotificationChannels;
};

export type UserSettingsNotificationUser = {
  __typename?: 'UserSettingsNotificationUser';
  /** Receive a notification when someone replies to a comment I made. */
  commentReply: UserSettingsNotificationChannels;
  /** Receive notification I send a message to a User, Organization or Space. */
  copyOfMessageSent: UserSettingsNotificationChannels;
  /** The notifications settings for membership events for this User */
  membership: UserSettingsNotificationUserMembership;
  /** Receive a notification you are mentioned */
  mentioned: UserSettingsNotificationChannels;
  /** Receive notification when I receive a direct message. */
  messageReceived: UserSettingsNotificationChannels;
};

export type UserSettingsNotificationUserMembership = {
  __typename?: 'UserSettingsNotificationUserMembership';
  /** Receive a notification when an application for a Space is submitted */
  spaceCommunityApplicationSubmitted: UserSettingsNotificationChannels;
  /** Receive a notification when I am invited to join a Space community */
  spaceCommunityInvitationReceived: UserSettingsNotificationChannels;
  /** Receive a notification when I join a Space */
  spaceCommunityJoined: UserSettingsNotificationChannels;
};

export type UserSettingsNotificationVirtualContributor = {
  __typename?: 'UserSettingsNotificationVirtualContributor';
  /** Receive notification when a Virtual Contributor receives an invitation to join a Space. */
  adminSpaceCommunityInvitation: UserSettingsNotificationChannels;
};

export type UserSettingsPrivacy = {
  __typename?: 'UserSettingsPrivacy';
  /** Allow contribution roles (communication, lead etc) in Spaces to be visible. */
  contributionRolesPubliclyVisible: Scalars['Boolean']['output'];
};

export type UsersInRolesResponse = {
  __typename?: 'UsersInRolesResponse';
  role: RoleName;
  users: Array<User>;
};

export type UsersWithAuthorizationCredentialInput = {
  /** The resource to which a credential needs to be bound. */
  resourceID?: InputMaybe<Scalars['UUID']['input']>;
  /** The type of credential. */
  type: AuthorizationCredential;
};

export type VcInteraction = {
  __typename?: 'VcInteraction';
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  room: Room;
  threadID: Scalars['String']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  virtualContributorID: Scalars['UUID']['output'];
};

export type VerifiedCredential = {
  __typename?: 'VerifiedCredential';
  /** The time at which the credential is no longer valid */
  claims: Array<VerifiedCredentialClaim>;
  /** JSON for the context in the credential */
  context: Scalars['JSON']['output'];
  /** The time at which the credential is no longer valid */
  expires: Scalars['String']['output'];
  /** The time at which the credential was issued */
  issued: Scalars['String']['output'];
  /** The party issuing the VC */
  issuer: Scalars['String']['output'];
  /** The name of the VC */
  name: Scalars['String']['output'];
  /** The type of VC */
  type: Scalars['String']['output'];
};

export type VerifiedCredentialClaim = {
  __typename?: 'VerifiedCredentialClaim';
  /** The name of the claim */
  name: Scalars['JSON']['output'];
  /** The value for the claim */
  value: Scalars['JSON']['output'];
};

export type VirtualContributor = Contributor & {
  __typename?: 'VirtualContributor';
  /** The Account of the Virtual Contributor. */
  account?: Maybe<Account>;
  /** The Agent representing this User. */
  agent: Agent;
  /** The AI persona being used by this virtual contributor */
  aiPersona?: Maybe<AiPersona>;
  /** The authorization rules for the Contributor */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the Contributor */
  id: Scalars['UUID']['output'];
  /** The KnowledgeBase being used by this virtual contributor */
  knowledgeBase?: Maybe<KnowledgeBase>;
  /** Flag to control if this VC is listed in the platform store. */
  listedInStore: Scalars['Boolean']['output'];
  /** A name identifier of the Contributor, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The profile for this Virtual. */
  profile: Profile;
  /** The Virtual Contributor provider. */
  provider: Contributor;
  /** Visibility of the VC in searches. */
  searchVisibility: SearchVisibility;
  /** The settings of this Virtual Contributor. */
  settings: VirtualContributorSettings;
  /** The status of the virtual contributor */
  status: VirtualContributorStatus;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type VirtualContributorSettings = {
  __typename?: 'VirtualContributorSettings';
  /** The privacy settings for this VirtualContributor */
  privacy: VirtualContributorSettingsPrivacy;
};

export type VirtualContributorSettingsPrivacy = {
  __typename?: 'VirtualContributorSettingsPrivacy';
  /** Are the contents of the knowledge base publicly visible. */
  knowledgeBaseContentVisible: Scalars['Boolean']['output'];
};

export enum VirtualContributorStatus {
  Initializing = 'INITIALIZING',
  Ready = 'READY',
}

/** The result from a Virtual Contributor update */
export type VirtualContributorUpdatedSubscriptionResult = {
  __typename?: 'VirtualContributorUpdatedSubscriptionResult';
  /** The Virtual Contributor that was updated */
  virtualContributor: VirtualContributor;
};

export type VirtualContributorsInRolesResponse = {
  __typename?: 'VirtualContributorsInRolesResponse';
  role: RoleName;
  virtualContributors: Array<VirtualContributor>;
};

export type Visual = {
  __typename?: 'Visual';
  allowedTypes: Array<Scalars['String']['output']>;
  alternativeText?: Maybe<Scalars['String']['output']>;
  /** Post ratio width / height. */
  aspectRatio: Scalars['Float']['output'];
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Maximum height resolution. */
  maxHeight: Scalars['Float']['output'];
  /** Maximum width resolution. */
  maxWidth: Scalars['Float']['output'];
  /** Minimum height resolution. */
  minHeight: Scalars['Float']['output'];
  /** Minimum width resolution. */
  minWidth: Scalars['Float']['output'];
  name: Scalars['String']['output'];
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
  uri: Scalars['String']['output'];
};

export type VisualConstraints = {
  __typename?: 'VisualConstraints';
  /** Allowed file types. */
  allowedTypes: Array<Scalars['String']['output']>;
  /** Dimensions ratio width / height. */
  aspectRatio: Scalars['Float']['output'];
  /** Maximum height resolution. */
  maxHeight: Scalars['Float']['output'];
  /** Maximum width resolution. */
  maxWidth: Scalars['Float']['output'];
  /** Minimum height resolution. */
  minHeight: Scalars['Float']['output'];
  /** Minimum width resolution. */
  minWidth: Scalars['Float']['output'];
};

export enum VisualType {
  Avatar = 'AVATAR',
  Banner = 'BANNER',
  BannerWide = 'BANNER_WIDE',
  Card = 'CARD',
}

export type VisualUploadImageInput = {
  alternativeText?: InputMaybe<Scalars['String']['input']>;
  visualID: Scalars['String']['input'];
};

export type Whiteboard = {
  __typename?: 'Whiteboard';
  /** The authorization rules for the entity */
  authorization?: Maybe<Authorization>;
  /** The visual content of the Whiteboard. */
  content: Scalars['WhiteboardContent']['output'];
  /** The policy governing who can update the Whiteboard content. */
  contentUpdatePolicy: ContentUpdatePolicy;
  /** The user that created this Whiteboard */
  createdBy?: Maybe<User>;
  /** The date at which the entity was created. */
  createdDate: Scalars['DateTime']['output'];
  /** The ID of the entity */
  id: Scalars['UUID']['output'];
  /** Whether the Whiteboard is multi-user enabled on Space level. */
  isMultiUser: Scalars['Boolean']['output'];
  /** A name identifier of the entity, unique within a given scope. */
  nameID: Scalars['NameID']['output'];
  /** The Profile for this Whiteboard. */
  profile: Profile;
  /** The date at which the entity was last updated. */
  updatedDate: Scalars['DateTime']['output'];
};

export type UploadFileOnReferenceMutationVariables = Exact<{
  file: Scalars['Upload']['input'];
  uploadData: StorageBucketUploadFileOnReferenceInput;
}>;

export type UploadFileOnReferenceMutation = {
  __typename?: 'Mutation';
  uploadFileOnReference: { __typename?: 'Reference'; id: string; uri: string };
};

export type UploadFileOnLinkMutationVariables = Exact<{
  file: Scalars['Upload']['input'];
  uploadData: StorageBucketUploadFileOnLinkInput;
}>;

export type UploadFileOnLinkMutation = {
  __typename?: 'Mutation';
  uploadFileOnLink: { __typename?: 'Link'; id: string; uri: string };
};

export type UploadFileMutationVariables = Exact<{
  file: Scalars['Upload']['input'];
  uploadData: StorageBucketUploadFileInput;
}>;

export type UploadFileMutation = { __typename?: 'Mutation'; uploadFileOnStorageBucket: string };

export type DefaultVisualTypeConstraintsQueryVariables = Exact<{
  visualType: VisualType;
}>;

export type DefaultVisualTypeConstraintsQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    configuration: {
      __typename?: 'Config';
      defaultVisualTypeConstraints: {
        __typename?: 'VisualConstraints';
        maxHeight: number;
        maxWidth: number;
        minHeight: number;
        minWidth: number;
        aspectRatio: number;
        allowedTypes: Array<string>;
      };
    };
  };
};

export type InnovationPackProfilePageQueryVariables = Exact<{
  innovationPackId: Scalars['UUID']['input'];
}>;

export type InnovationPackProfilePageQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    innovationPack?:
      | {
          __typename?: 'InnovationPack';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          provider:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
          profile: {
            __typename?: 'Profile';
            tagline?: string | undefined;
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  description?: string | undefined;
                  uri: string;
                }>
              | undefined;
          };
          templatesSet?: { __typename?: 'TemplatesSet'; id: string } | undefined;
        }
      | undefined;
  };
};

export type DeleteInnovationPackMutationVariables = Exact<{
  innovationPackId: Scalars['UUID']['input'];
}>;

export type DeleteInnovationPackMutation = {
  __typename?: 'Mutation';
  deleteInnovationPack: { __typename?: 'InnovationPack'; id: string };
};

export type InnovationPackProfileFragment = {
  __typename?: 'Profile';
  id: string;
  displayName: string;
  description?: string | undefined;
  tagline?: string | undefined;
  url: string;
  tagset?:
    | {
        __typename?: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: TagsetType;
      }
    | undefined;
  references?:
    | Array<{ __typename?: 'Reference'; id: string; name: string; description?: string | undefined; uri: string }>
    | undefined;
};

export type AdminInnovationPackQueryVariables = Exact<{
  innovationPackId: Scalars['UUID']['input'];
}>;

export type AdminInnovationPackQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    innovationPack?:
      | {
          __typename?: 'InnovationPack';
          id: string;
          listedInStore: boolean;
          searchVisibility: SearchVisibility;
          provider:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            tagline?: string | undefined;
            url: string;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  description?: string | undefined;
                  uri: string;
                }>
              | undefined;
          };
          templatesSet?: { __typename?: 'TemplatesSet'; id: string } | undefined;
        }
      | undefined;
  };
};

export type CreateInnovationPackMutationVariables = Exact<{
  packData: CreateInnovationPackOnAccountInput;
}>;

export type CreateInnovationPackMutation = {
  __typename?: 'Mutation';
  createInnovationPack: { __typename?: 'InnovationPack'; id: string };
};

export type UpdateInnovationPackMutationVariables = Exact<{
  packData: UpdateInnovationPackInput;
}>;

export type UpdateInnovationPackMutation = {
  __typename?: 'Mutation';
  updateInnovationPack: { __typename?: 'InnovationPack'; id: string };
};

type InnovationPackProviderProfileWithAvatar_Organization_Fragment = {
  __typename?: 'Organization';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

type InnovationPackProviderProfileWithAvatar_User_Fragment = {
  __typename?: 'User';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

type InnovationPackProviderProfileWithAvatar_VirtualContributor_Fragment = {
  __typename?: 'VirtualContributor';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type InnovationPackProviderProfileWithAvatarFragment =
  | InnovationPackProviderProfileWithAvatar_Organization_Fragment
  | InnovationPackProviderProfileWithAvatar_User_Fragment
  | InnovationPackProviderProfileWithAvatar_VirtualContributor_Fragment;

export type InnovationPackCardFragment = {
  __typename?: 'InnovationPack';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
  };
  templatesSet?:
    | {
        __typename?: 'TemplatesSet';
        id: string;
        calloutTemplatesCount: number;
        communityGuidelinesTemplatesCount: number;
        spaceTemplatesCount: number;
        postTemplatesCount: number;
        whiteboardTemplatesCount: number;
      }
    | undefined;
  provider:
    | {
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      };
};

export type ApplicationButtonQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
  parentSpaceId?: Scalars['UUID']['input'];
  includeParentSpace?: Scalars['Boolean']['input'];
}>;

export type ApplicationButtonQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            membership: {
              __typename?: 'SpaceAboutMembership';
              communityID: string;
              roleSetID: string;
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
            };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              tagline?: string | undefined;
              url: string;
            };
          };
        }
      | undefined;
  };
  parentSpace?: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            membership: {
              __typename?: 'SpaceAboutMembership';
              communityID: string;
              roleSetID: string;
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
            };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              tagline?: string | undefined;
              url: string;
            };
          };
        }
      | undefined;
  };
};

export type ApplyForEntryRoleOnRoleSetMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  questions: Array<CreateNvpInput> | CreateNvpInput;
}>;

export type ApplyForEntryRoleOnRoleSetMutation = {
  __typename?: 'Mutation';
  applyForEntryRoleOnRoleSet: { __typename?: 'Application'; id: string };
};

export type EventOnApplicationMutationVariables = Exact<{
  input: ApplicationEventInput;
}>;

export type EventOnApplicationMutation = {
  __typename?: 'Mutation';
  eventOnApplication: { __typename?: 'Application'; id: string; nextEvents: Array<string>; state: string };
};

export type JoinRoleSetMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
}>;

export type JoinRoleSetMutation = { __typename?: 'Mutation'; joinRoleSet: { __typename?: 'RoleSet'; id: string } };

export type InvitationStateEventMutationVariables = Exact<{
  eventName: Scalars['String']['input'];
  invitationId: Scalars['UUID']['input'];
}>;

export type InvitationStateEventMutation = {
  __typename?: 'Mutation';
  eventOnInvitation: { __typename?: 'Invitation'; id: string; nextEvents: Array<string>; state: string };
};

export type InviteForEntryRoleOnRoleSetMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  invitedContributorIds: Array<Scalars['UUID']['input']> | Scalars['UUID']['input'];
  invitedUserEmails: Array<Scalars['String']['input']> | Scalars['String']['input'];
  welcomeMessage?: InputMaybe<Scalars['String']['input']>;
  extraRoles: Array<RoleName> | RoleName;
}>;

export type InviteForEntryRoleOnRoleSetMutation = {
  __typename?: 'Mutation';
  inviteForEntryRoleOnRoleSet: Array<{
    __typename?: 'RoleSetInvitationResult';
    type: RoleSetInvitationResultType;
    invitation?:
      | {
          __typename?: 'Invitation';
          id: string;
          contributor:
            | {
                __typename?: 'Organization';
                id: string;
                profile: { __typename?: 'Profile'; id: string; displayName: string };
              }
            | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: { __typename?: 'Profile'; id: string; displayName: string };
              };
        }
      | undefined;
    platformInvitation?:
      | {
          __typename?: 'PlatformInvitation';
          id: string;
          email: string;
          firstName?: string | undefined;
          lastName?: string | undefined;
        }
      | undefined;
  }>;
};

export type DeleteInvitationMutationVariables = Exact<{
  invitationId: Scalars['UUID']['input'];
}>;

export type DeleteInvitationMutation = {
  __typename?: 'Mutation';
  deleteInvitation: { __typename?: 'Invitation'; id: string };
};

export type DeletePlatformInvitationMutationVariables = Exact<{
  invitationId: Scalars['UUID']['input'];
}>;

export type DeletePlatformInvitationMutation = {
  __typename?: 'Mutation';
  deletePlatformInvitation: { __typename?: 'PlatformInvitation'; id: string };
};

export type CommunityApplicationsInvitationsQueryVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
}>;

export type CommunityApplicationsInvitationsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    roleSet?:
      | {
          __typename?: 'RoleSet';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          applications: Array<{
            __typename?: 'Application';
            id: string;
            createdDate: Date;
            updatedDate: Date;
            state: string;
            nextEvents: Array<string>;
            contributor:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                }
              | {
                  __typename?: 'User';
                  email: string;
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                };
          }>;
          invitations: Array<{
            __typename?: 'Invitation';
            id: string;
            createdDate: Date;
            updatedDate: Date;
            state: string;
            nextEvents: Array<string>;
            contributorType: RoleSetContributorType;
            contributor:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                }
              | {
                  __typename?: 'User';
                  email: string;
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                };
          }>;
          platformInvitations: Array<{
            __typename?: 'PlatformInvitation';
            id: string;
            createdDate: Date;
            email: string;
          }>;
        }
      | undefined;
  };
};

export type AdminCommunityApplicationFragment = {
  __typename?: 'Application';
  id: string;
  createdDate: Date;
  updatedDate: Date;
  state: string;
  nextEvents: Array<string>;
  contributor:
    | {
        __typename?: 'Organization';
        id: string;
        profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
      }
    | {
        __typename?: 'User';
        email: string;
        id: string;
        profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
      };
};

export type AdminCommunityInvitationFragment = {
  __typename?: 'Invitation';
  id: string;
  createdDate: Date;
  updatedDate: Date;
  state: string;
  nextEvents: Array<string>;
  contributorType: RoleSetContributorType;
  contributor:
    | {
        __typename?: 'Organization';
        id: string;
        profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
      }
    | {
        __typename?: 'User';
        email: string;
        id: string;
        profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
      };
};

export type AdminPlatformInvitationCommunityFragment = {
  __typename?: 'PlatformInvitation';
  id: string;
  createdDate: Date;
  email: string;
};

type AdminCommunityCandidateMember_Organization_Fragment = {
  __typename?: 'Organization';
  id: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
};

type AdminCommunityCandidateMember_User_Fragment = {
  __typename?: 'User';
  id: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
};

type AdminCommunityCandidateMember_VirtualContributor_Fragment = {
  __typename?: 'VirtualContributor';
  id: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
};

export type AdminCommunityCandidateMemberFragment =
  | AdminCommunityCandidateMember_Organization_Fragment
  | AdminCommunityCandidateMember_User_Fragment
  | AdminCommunityCandidateMember_VirtualContributor_Fragment;

export type UserPendingMembershipsQueryVariables = Exact<{ [key: string]: never }>;

export type UserPendingMembershipsQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    user?:
      | {
          __typename?: 'User';
          id: string;
          firstName: string;
          lastName: string;
          email: string;
          phone?: string | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            description?: string | undefined;
            url: string;
            location?:
              | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
              | undefined;
            avatar?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | undefined;
    communityApplications: Array<{
      __typename?: 'CommunityApplicationResult';
      id: string;
      spacePendingMembershipInfo: {
        __typename?: 'SpacePendingMembershipInfo';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            url: string;
          };
        };
      };
      application: { __typename?: 'Application'; id: string; state: string; createdDate: Date };
    }>;
    communityInvitations: Array<{
      __typename?: 'CommunityInvitationResult';
      id: string;
      spacePendingMembershipInfo: {
        __typename?: 'SpacePendingMembershipInfo';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            url: string;
          };
        };
      };
      invitation: {
        __typename?: 'Invitation';
        id: string;
        welcomeMessage?: string | undefined;
        state: string;
        createdDate: Date;
        contributorType: RoleSetContributorType;
        createdBy?: { __typename?: 'User'; id: string } | undefined;
        contributor:
          | { __typename?: 'Organization'; id: string }
          | { __typename?: 'User'; id: string }
          | { __typename?: 'VirtualContributor'; id: string };
      };
    }>;
  };
};

export type AvailableUserForRoleSetFragment = {
  __typename?: 'User';
  id: string;
  email: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string };
};

export type AvailableUsersForRoleSetPaginatedFragment = {
  __typename?: 'PaginatedUsers';
  users: Array<{
    __typename?: 'User';
    id: string;
    email: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string };
  }>;
  pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean; endCursor?: string | undefined };
};

export type PlatformRoleAvailableUsersQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
}>;

export type PlatformRoleAvailableUsersQuery = {
  __typename?: 'Query';
  usersPaginated: {
    __typename?: 'PaginatedUsers';
    users: Array<{
      __typename?: 'User';
      id: string;
      email: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string };
    }>;
    pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean; endCursor?: string | undefined };
  };
};

export type AvailableUsersForEntryRoleQueryVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
}>;

export type AvailableUsersForEntryRoleQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    roleSet?:
      | {
          __typename?: 'RoleSet';
          availableUsersForEntryRole: {
            __typename?: 'PaginatedUsers';
            users: Array<{
              __typename?: 'User';
              id: string;
              email: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string };
            }>;
            pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean; endCursor?: string | undefined };
          };
        }
      | undefined;
  };
};

export type AvailableUsersForElevatedRoleQueryVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  role: RoleName;
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
}>;

export type AvailableUsersForElevatedRoleQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    roleSet?:
      | {
          __typename?: 'RoleSet';
          availableUsersForElevatedRole: {
            __typename?: 'PaginatedUsers';
            users: Array<{
              __typename?: 'User';
              id: string;
              email: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string };
            }>;
            pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean; endCursor?: string | undefined };
          };
        }
      | undefined;
  };
};

export type AvailableOrganizationsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<OrganizationFilterInput>;
}>;

export type AvailableOrganizationsQuery = {
  __typename?: 'Query';
  organizationsPaginated: {
    __typename?: 'PaginatedOrganization';
    organization: Array<{
      __typename?: 'Organization';
      id: string;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        visual?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
    }>;
    pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean; endCursor?: string | undefined };
  };
};

export type AssignPlatformRoleToUserMutationVariables = Exact<{
  role: RoleName;
  contributorId: Scalars['UUID']['input'];
}>;

export type AssignPlatformRoleToUserMutation = {
  __typename?: 'Mutation';
  assignPlatformRoleToUser: { __typename?: 'User'; id: string };
};

export type AssignRoleToUserMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  role: RoleName;
  contributorId: Scalars['UUID']['input'];
}>;

export type AssignRoleToUserMutation = {
  __typename?: 'Mutation';
  assignRoleToUser: { __typename?: 'User'; id: string };
};

export type AssignRoleToOrganizationMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  role: RoleName;
  contributorId: Scalars['UUID']['input'];
}>;

export type AssignRoleToOrganizationMutation = {
  __typename?: 'Mutation';
  assignRoleToOrganization: { __typename?: 'Organization'; id: string };
};

export type AssignRoleToVirtualContributorMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  role: RoleName;
  contributorId: Scalars['UUID']['input'];
}>;

export type AssignRoleToVirtualContributorMutation = {
  __typename?: 'Mutation';
  assignRoleToVirtualContributor: { __typename?: 'VirtualContributor'; id: string };
};

export type RemovePlatformRoleFromUserMutationVariables = Exact<{
  role: RoleName;
  contributorId: Scalars['UUID']['input'];
}>;

export type RemovePlatformRoleFromUserMutation = {
  __typename?: 'Mutation';
  removePlatformRoleFromUser: {
    __typename?: 'User';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string };
  };
};

export type RemoveRoleFromUserMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  role: RoleName;
  contributorId: Scalars['UUID']['input'];
}>;

export type RemoveRoleFromUserMutation = {
  __typename?: 'Mutation';
  removeRoleFromUser: { __typename?: 'User'; id: string };
};

export type RemoveRoleFromOrganizationMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  role: RoleName;
  contributorId: Scalars['UUID']['input'];
}>;

export type RemoveRoleFromOrganizationMutation = {
  __typename?: 'Mutation';
  removeRoleFromOrganization: { __typename?: 'Organization'; id: string };
};

export type RemoveRoleFromVirtualContributorMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  role: RoleName;
  contributorId: Scalars['UUID']['input'];
}>;

export type RemoveRoleFromVirtualContributorMutation = {
  __typename?: 'Mutation';
  removeRoleFromVirtualContributor: { __typename?: 'VirtualContributor'; id: string };
};

export type MyMembershipsRoleSetFragment = {
  __typename?: 'RoleSet';
  id: string;
  myMembershipStatus?: CommunityMembershipStatus | undefined;
  myRoles: Array<RoleName>;
};

export type RoleDefinitionPolicyFragment = {
  __typename?: 'Role';
  id: string;
  name: RoleName;
  organizationPolicy: { __typename?: 'ContributorRolePolicy'; minimum: number; maximum: number };
  userPolicy: { __typename?: 'ContributorRolePolicy'; minimum: number; maximum: number };
};

export type RoleSetMemberUserFragment = {
  __typename?: 'User';
  id: string;
  isContactable: boolean;
  email: string;
  firstName: string;
  lastName: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    location?:
      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
  };
};

export type RoleSetMemberOrganizationFragment = {
  __typename?: 'Organization';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    location?:
      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
      | undefined;
  };
  verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
};

export type RoleSetMemberVirtualContributorFragment = {
  __typename?: 'VirtualContributor';
  id: string;
  searchVisibility: SearchVisibility;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    location?:
      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
      | undefined;
  };
};

export type RoleSetAuthorizationQueryVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
}>;

export type RoleSetAuthorizationQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    authorization?:
      | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
  lookup: {
    __typename?: 'LookupQueryResults';
    roleSet?:
      | {
          __typename?: 'RoleSet';
          id: string;
          roleNames: Array<RoleName>;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type RoleSetRoleAssignmentQueryVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  roles: Array<RoleName> | RoleName;
  includeUsers?: InputMaybe<Scalars['Boolean']['input']>;
  includeOrganizations?: InputMaybe<Scalars['Boolean']['input']>;
  includeVirtualContributors?: InputMaybe<Scalars['Boolean']['input']>;
  includeRoleDefinitions?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type RoleSetRoleAssignmentQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    roleSet?:
      | {
          __typename?: 'RoleSet';
          id: string;
          usersInRoles?: Array<{
            __typename?: 'UsersInRolesResponse';
            role: RoleName;
            users: Array<{
              __typename?: 'User';
              id: string;
              isContactable: boolean;
              email: string;
              firstName: string;
              lastName: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
              };
            }>;
          }>;
          organizationsInRoles?: Array<{
            __typename?: 'OrganizationsInRolesResponse';
            role: RoleName;
            organizations: Array<{
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                description?: string | undefined;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
              verification: {
                __typename?: 'OrganizationVerification';
                id: string;
                status: OrganizationVerificationEnum;
              };
            }>;
          }>;
          virtualContributorsInRoles?: Array<{
            __typename?: 'VirtualContributorsInRolesResponse';
            role: RoleName;
            virtualContributors: Array<{
              __typename?: 'VirtualContributor';
              id: string;
              searchVisibility: SearchVisibility;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                  | undefined;
              };
            }>;
          }>;
          roleDefinitions?: Array<{
            __typename?: 'Role';
            id: string;
            name: RoleName;
            organizationPolicy: { __typename?: 'ContributorRolePolicy'; minimum: number; maximum: number };
            userPolicy: { __typename?: 'ContributorRolePolicy'; minimum: number; maximum: number };
          }>;
        }
      | undefined;
  };
};

export type SubspaceCommunityAndRoleSetIdQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SubspaceCommunityAndRoleSetIdQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          community: { __typename?: 'Community'; id: string; roleSet: { __typename?: 'RoleSet'; id: string } };
        }
      | undefined;
  };
};

export type AccountInformationQueryVariables = Exact<{
  accountId: Scalars['UUID']['input'];
}>;

export type AccountInformationQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    account?:
      | {
          __typename?: 'Account';
          id: string;
          externalSubscriptionID?: string | undefined;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          license: {
            __typename?: 'License';
            id: string;
            availableEntitlements?: Array<LicenseEntitlementType> | undefined;
            entitlements: Array<{
              __typename?: 'LicenseEntitlement';
              type: LicenseEntitlementType;
              limit: number;
              usage: number;
            }>;
          };
          host?:
            | { __typename?: 'Organization'; id: string }
            | { __typename?: 'User'; id: string }
            | { __typename?: 'VirtualContributor'; id: string }
            | undefined;
          spaces: Array<{
            __typename?: 'Space';
            id: string;
            level: SpaceLevel;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            license: {
              __typename?: 'License';
              id: string;
              availableEntitlements?: Array<LicenseEntitlementType> | undefined;
            };
            about: {
              __typename?: 'SpaceAbout';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                tagline?: string | undefined;
                cardBanner?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
              membership: {
                __typename?: 'SpaceAboutMembership';
                myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              };
            };
          }>;
          virtualContributors: Array<{
            __typename?: 'VirtualContributor';
            id: string;
            profile: {
              __typename?: 'Profile';
              tagline?: string | undefined;
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
          innovationPacks: Array<{
            __typename?: 'InnovationPack';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            templatesSet?:
              | {
                  __typename?: 'TemplatesSet';
                  id: string;
                  calloutTemplatesCount: number;
                  spaceTemplatesCount: number;
                  communityGuidelinesTemplatesCount: number;
                  postTemplatesCount: number;
                  whiteboardTemplatesCount: number;
                }
              | undefined;
          }>;
          innovationHubs: Array<{
            __typename?: 'InnovationHub';
            id: string;
            subdomain: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              banner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
        }
      | undefined;
  };
};

export type AccountItemProfileFragment = {
  __typename?: 'Profile';
  id: string;
  displayName: string;
  description?: string | undefined;
  url: string;
  avatar?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
};

export type CalloutPageCalloutQueryVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
  includeClassification?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CalloutPageCalloutQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          sortOrder: number;
          activity: number;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            type: CalloutFramingType;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              references?:
                | Array<{
                    __typename?: 'Reference';
                    id: string;
                    name: string;
                    uri: string;
                    description?: string | undefined;
                  }>
                | undefined;
              storageBucket: { __typename?: 'StorageBucket'; id: string };
            };
            whiteboard?:
              | {
                  __typename?: 'Whiteboard';
                  id: string;
                  nameID: string;
                  createdDate: Date;
                  contentUpdatePolicy: ContentUpdatePolicy;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    description?: string | undefined;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    preview?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                    storageBucket: { __typename?: 'StorageBucket'; id: string };
                  };
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                  createdBy?:
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | undefined;
                }
              | undefined;
            memo?:
              | {
                  __typename?: 'Memo';
                  id: string;
                  nameID: string;
                  createdDate: Date;
                  markdown?: string | undefined;
                  contentUpdatePolicy: ContentUpdatePolicy;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    preview?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    storageBucket: { __typename?: 'StorageBucket'; id: string };
                  };
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                  createdBy?:
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | undefined;
                }
              | undefined;
            link?:
              | {
                  __typename?: 'Link';
                  id: string;
                  uri: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                  };
                }
              | undefined;
          };
          contributionDefaults: {
            __typename?: 'CalloutContributionDefaults';
            id: string;
            defaultDisplayName?: string | undefined;
            postDescription?: string | undefined;
            whiteboardContent?: string | undefined;
          };
          contributions: Array<{
            __typename?: 'CalloutContribution';
            id: string;
            sortOrder: number;
            link?:
              | {
                  __typename?: 'Link';
                  id: string;
                  uri: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                  };
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                }
              | undefined;
          }>;
          comments?:
            | {
                __typename?: 'Room';
                id: string;
                messagesCount: number;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
                messages: Array<{
                  __typename?: 'Message';
                  id: string;
                  message: string;
                  timestamp: number;
                  threadID?: string | undefined;
                  reactions: Array<{
                    __typename?: 'Reaction';
                    id: string;
                    emoji: string;
                    sender?:
                      | {
                          __typename?: 'User';
                          id: string;
                          profile: { __typename?: 'Profile'; id: string; displayName: string };
                        }
                      | undefined;
                  }>;
                  sender?:
                    | {
                        __typename?: 'Organization';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          description?: string | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                          tagsets?:
                            | Array<{
                                __typename?: 'Tagset';
                                id: string;
                                name: string;
                                tags: Array<string>;
                                allowedValues: Array<string>;
                                type: TagsetType;
                              }>
                            | undefined;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          description?: string | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                          tagsets?:
                            | Array<{
                                __typename?: 'Tagset';
                                id: string;
                                name: string;
                                tags: Array<string>;
                                allowedValues: Array<string>;
                                type: TagsetType;
                              }>
                            | undefined;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | {
                        __typename?: 'VirtualContributor';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          description?: string | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                          tagsets?:
                            | Array<{
                                __typename?: 'Tagset';
                                id: string;
                                name: string;
                                tags: Array<string>;
                                allowedValues: Array<string>;
                                type: TagsetType;
                              }>
                            | undefined;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | undefined;
                }>;
                vcInteractions: Array<{
                  __typename?: 'VcInteraction';
                  id: string;
                  threadID: string;
                  virtualContributorID: string;
                }>;
              }
            | undefined;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          settings: {
            __typename?: 'CalloutSettings';
            visibility: CalloutVisibility;
            contribution: {
              __typename?: 'CalloutSettingsContribution';
              enabled: boolean;
              allowedTypes: Array<CalloutContributionType>;
              canAddContributions: CalloutAllowedContributors;
              commentsEnabled: boolean;
            };
            framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
          };
          classification?:
            | {
                __typename?: 'Classification';
                id: string;
                flowState?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  };
};

export type InnovationFlowSettingsQueryVariables = Exact<{
  collaborationId: Scalars['UUID']['input'];
}>;

export type InnovationFlowSettingsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    collaboration?:
      | {
          __typename?: 'Collaboration';
          id: string;
          innovationFlow: {
            __typename?: 'InnovationFlow';
            id: string;
            settings: {
              __typename?: 'InnovationFlowSettings';
              maximumNumberOfStates: number;
              minimumNumberOfStates: number;
            };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              references?:
                | Array<{
                    __typename?: 'Reference';
                    id: string;
                    name: string;
                    description?: string | undefined;
                    uri: string;
                  }>
                | undefined;
              bannerNarrow?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            currentState?: { __typename?: 'InnovationFlowState'; id: string } | undefined;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            states: Array<{
              __typename?: 'InnovationFlowState';
              id: string;
              displayName: string;
              description?: string | undefined;
              sortOrder: number;
              settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
            }>;
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          calloutsSet: {
            __typename?: 'CalloutsSet';
            id: string;
            callouts: Array<{
              __typename?: 'Callout';
              id: string;
              activity: number;
              sortOrder: number;
              classification?:
                | {
                    __typename?: 'Classification';
                    id: string;
                    flowState?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  }
                | undefined;
              framing: {
                __typename?: 'CalloutFraming';
                id: string;
                profile: { __typename?: 'Profile'; id: string; displayName: string };
              };
            }>;
          };
        }
      | undefined;
  };
};

export type InnovationFlowDetailsQueryVariables = Exact<{
  collaborationId: Scalars['UUID']['input'];
}>;

export type InnovationFlowDetailsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    collaboration?:
      | {
          __typename?: 'Collaboration';
          id: string;
          innovationFlow: {
            __typename?: 'InnovationFlow';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              references?:
                | Array<{
                    __typename?: 'Reference';
                    id: string;
                    name: string;
                    description?: string | undefined;
                    uri: string;
                  }>
                | undefined;
              bannerNarrow?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            currentState?: { __typename?: 'InnovationFlowState'; id: string } | undefined;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            states: Array<{
              __typename?: 'InnovationFlowState';
              id: string;
              displayName: string;
              description?: string | undefined;
              sortOrder: number;
              settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
            }>;
          };
        }
      | undefined;
  };
};

export type UpdateCalloutFlowStateMutationVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
  flowStateTagsetId: Scalars['UUID']['input'];
  value: Scalars['String']['input'];
}>;

export type UpdateCalloutFlowStateMutation = {
  __typename?: 'Mutation';
  updateCallout: {
    __typename?: 'Callout';
    id: string;
    sortOrder: number;
    classification?:
      | {
          __typename?: 'Classification';
          id: string;
          flowState?:
            | {
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }
            | undefined;
        }
      | undefined;
  };
};

export type UpdateCollaborationFromSpaceTemplateMutationVariables = Exact<{
  collaborationId: Scalars['UUID']['input'];
  spaceTemplateId: Scalars['UUID']['input'];
  addCallouts?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type UpdateCollaborationFromSpaceTemplateMutation = {
  __typename?: 'Mutation';
  updateCollaborationFromSpaceTemplate: {
    __typename?: 'Collaboration';
    id: string;
    innovationFlow: {
      __typename?: 'InnovationFlow';
      id: string;
      states: Array<{ __typename?: 'InnovationFlowState'; displayName: string; description?: string | undefined }>;
      currentState?:
        | { __typename?: 'InnovationFlowState'; displayName: string; description?: string | undefined }
        | undefined;
    };
  };
};

export type InnovationFlowCollaborationFragment = {
  __typename?: 'Collaboration';
  id: string;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  calloutsSet: {
    __typename?: 'CalloutsSet';
    id: string;
    callouts: Array<{
      __typename?: 'Callout';
      id: string;
      activity: number;
      sortOrder: number;
      classification?:
        | {
            __typename?: 'Classification';
            id: string;
            flowState?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          }
        | undefined;
      framing: {
        __typename?: 'CalloutFraming';
        id: string;
        profile: { __typename?: 'Profile'; id: string; displayName: string };
      };
    }>;
  };
};

export type InnovationFlowDetailsFragment = {
  __typename?: 'InnovationFlow';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; description?: string | undefined; uri: string }>
      | undefined;
    bannerNarrow?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
  currentState?: { __typename?: 'InnovationFlowState'; id: string } | undefined;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  states: Array<{
    __typename?: 'InnovationFlowState';
    id: string;
    displayName: string;
    description?: string | undefined;
    sortOrder: number;
    settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
  }>;
};

export type InnovationFlowProfileFragment = {
  __typename?: 'Profile';
  id: string;
  displayName: string;
  description?: string | undefined;
  tagsets?:
    | Array<{
        __typename?: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: TagsetType;
      }>
    | undefined;
  references?:
    | Array<{ __typename?: 'Reference'; id: string; name: string; description?: string | undefined; uri: string }>
    | undefined;
  bannerNarrow?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
};

export type InnovationFlowStatesFragment = {
  __typename?: 'InnovationFlow';
  id: string;
  states: Array<{
    __typename?: 'InnovationFlowState';
    id: string;
    displayName: string;
    description?: string | undefined;
    sortOrder: number;
    settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
  }>;
};

export type UpdateInnovationFlowMutationVariables = Exact<{
  input: UpdateInnovationFlowInput;
}>;

export type UpdateInnovationFlowMutation = {
  __typename?: 'Mutation';
  updateInnovationFlow: {
    __typename?: 'InnovationFlow';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string };
  };
};

export type UpdateInnovationFlowCurrentStateMutationVariables = Exact<{
  innovationFlowId: Scalars['UUID']['input'];
  currentStateId: Scalars['UUID']['input'];
}>;

export type UpdateInnovationFlowCurrentStateMutation = {
  __typename?: 'Mutation';
  updateInnovationFlowCurrentState: {
    __typename?: 'InnovationFlow';
    id: string;
    currentState?: { __typename?: 'InnovationFlowState'; displayName: string } | undefined;
  };
};

export type CreateStateOnInnovationFlowMutationVariables = Exact<{
  stateData: CreateStateOnInnovationFlowInput;
}>;

export type CreateStateOnInnovationFlowMutation = {
  __typename?: 'Mutation';
  createStateOnInnovationFlow: {
    __typename?: 'InnovationFlowState';
    id: string;
    displayName: string;
    description?: string | undefined;
    settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
  };
};

export type DeleteStateOnInnovationFlowMutationVariables = Exact<{
  stateData: DeleteStateOnInnovationFlowInput;
}>;

export type DeleteStateOnInnovationFlowMutation = {
  __typename?: 'Mutation';
  deleteStateOnInnovationFlow: { __typename?: 'InnovationFlowState'; id: string };
};

export type UpdateInnovationFlowStateMutationVariables = Exact<{
  innovationFlowStateId: Scalars['UUID']['input'];
  displayName: Scalars['String']['input'];
  description: Scalars['Markdown']['input'];
  settings?: InputMaybe<UpdateInnovationFlowStateSettingsInput>;
}>;

export type UpdateInnovationFlowStateMutation = {
  __typename?: 'Mutation';
  updateInnovationFlowState: {
    __typename?: 'InnovationFlowState';
    id: string;
    displayName: string;
    description?: string | undefined;
    settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
  };
};

export type UpdateInnovationFlowStatesSortOrderMutationVariables = Exact<{
  innovationFlowID: Scalars['UUID']['input'];
  stateIDs: Array<Scalars['UUID']['input']> | Scalars['UUID']['input'];
}>;

export type UpdateInnovationFlowStatesSortOrderMutation = {
  __typename?: 'Mutation';
  updateInnovationFlowStatesSortOrder: Array<{ __typename?: 'InnovationFlowState'; id: string; sortOrder: number }>;
};

export type ActivityLogMemberJoinedFragment = {
  __typename?: 'ActivityLogEntryMemberJoined';
  contributor:
    | {
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
        };
      }
    | {
        __typename?: 'User';
        firstName: string;
        lastName: string;
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
        };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
        };
      };
};

export type ActivityLogCalloutPublishedFragment = {
  __typename?: 'ActivityLogEntryCalloutPublished';
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
};

export type ActivityLogCalloutPostCreatedFragment = {
  __typename?: 'ActivityLogEntryCalloutPostCreated';
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
  post: {
    __typename?: 'Post';
    id: string;
    profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
  };
};

export type ActivityLogCalloutLinkCreatedFragment = {
  __typename?: 'ActivityLogEntryCalloutLinkCreated';
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
  link: { __typename?: 'Link'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } };
};

export type ActivityLogCalloutPostCommentFragment = {
  __typename?: 'ActivityLogEntryCalloutPostComment';
  description: string;
  post: {
    __typename?: 'Post';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

export type ActivityLogCalloutWhiteboardCreatedFragment = {
  __typename?: 'ActivityLogEntryCalloutWhiteboardCreated';
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
  whiteboard: {
    __typename?: 'Whiteboard';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

export type ActivityLogCalloutWhiteboardContentModifiedFragment = {
  __typename?: 'ActivityLogEntryCalloutWhiteboardContentModified';
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
  whiteboard: {
    __typename?: 'Whiteboard';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

export type ActivityLogSubspaceCreatedFragment = {
  __typename?: 'ActivityLogEntrySubspaceCreated';
  subspace: {
    __typename?: 'Space';
    id: string;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
};

export type ActivityLogCalloutDiscussionCommentFragment = {
  __typename?: 'ActivityLogEntryCalloutDiscussionComment';
  description: string;
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
};

export type ActivityLogCalendarEventCreatedFragment = {
  __typename?: 'ActivityLogEntryCalendarEventCreated';
  calendarEvent: {
    __typename?: 'CalendarEvent';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

export type ActivityLogUpdateSentFragment = { __typename?: 'ActivityLogEntryUpdateSent'; message: string };

export type ActivitySubjectProfileFragment = { __typename?: 'Profile'; id: string; displayName: string; url: string };

export type ActivityCalloutContextFragment = {
  __typename?: 'Callout';
  id: string;
  framing: {
    __typename?: 'CalloutFraming';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

export type ActivityCreatedSubscriptionVariables = Exact<{
  input: ActivityCreatedSubscriptionInput;
}>;

export type ActivityCreatedSubscription = {
  __typename?: 'Subscription';
  activityCreated: {
    __typename?: 'ActivityCreatedSubscriptionResult';
    activity:
      | {
          __typename?: 'ActivityLogEntryCalendarEventCreated';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          calendarEvent: {
            __typename?: 'CalendarEvent';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutDiscussionComment';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          description: string;
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutLinkCreated';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
          link: {
            __typename?: 'Link';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutPostComment';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          description: string;
          post: {
            __typename?: 'Post';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutPostCreated';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
          post: {
            __typename?: 'Post';
            id: string;
            profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutPublished';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutWhiteboardContentModified';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
          whiteboard: {
            __typename?: 'Whiteboard';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutWhiteboardCreated';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
          whiteboard: {
            __typename?: 'Whiteboard';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryMemberJoined';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          contributor:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              }
            | {
                __typename?: 'User';
                firstName: string;
                lastName: string;
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              };
        }
      | {
          __typename?: 'ActivityLogEntrySubspaceCreated';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          subspace: {
            __typename?: 'Space';
            id: string;
            about: {
              __typename?: 'SpaceAbout';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
        }
      | {
          __typename?: 'ActivityLogEntryUpdateSent';
          id: string;
          createdDate: Date;
          type: ActivityEventType;
          message: string;
        };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryCalendarEventCreated_Fragment = {
  __typename?: 'ActivityLogEntryCalendarEventCreated';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  calendarEvent: {
    __typename?: 'CalendarEvent';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryCalloutDiscussionComment_Fragment = {
  __typename?: 'ActivityLogEntryCalloutDiscussionComment';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  description: string;
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryCalloutLinkCreated_Fragment = {
  __typename?: 'ActivityLogEntryCalloutLinkCreated';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
  link: { __typename?: 'Link'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } };
};

type ActivityLogOnCollaboration_ActivityLogEntryCalloutPostComment_Fragment = {
  __typename?: 'ActivityLogEntryCalloutPostComment';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  description: string;
  post: {
    __typename?: 'Post';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryCalloutPostCreated_Fragment = {
  __typename?: 'ActivityLogEntryCalloutPostCreated';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
  post: {
    __typename?: 'Post';
    id: string;
    profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryCalloutPublished_Fragment = {
  __typename?: 'ActivityLogEntryCalloutPublished';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryCalloutWhiteboardContentModified_Fragment = {
  __typename?: 'ActivityLogEntryCalloutWhiteboardContentModified';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
  whiteboard: {
    __typename?: 'Whiteboard';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryCalloutWhiteboardCreated_Fragment = {
  __typename?: 'ActivityLogEntryCalloutWhiteboardCreated';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
  whiteboard: {
    __typename?: 'Whiteboard';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryMemberJoined_Fragment = {
  __typename?: 'ActivityLogEntryMemberJoined';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  contributor:
    | {
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
        };
      }
    | {
        __typename?: 'User';
        firstName: string;
        lastName: string;
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
        };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
        };
      };
};

type ActivityLogOnCollaboration_ActivityLogEntrySubspaceCreated_Fragment = {
  __typename?: 'ActivityLogEntrySubspaceCreated';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  subspace: {
    __typename?: 'Space';
    id: string;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    };
  };
};

type ActivityLogOnCollaboration_ActivityLogEntryUpdateSent_Fragment = {
  __typename?: 'ActivityLogEntryUpdateSent';
  id: string;
  createdDate: Date;
  type: ActivityEventType;
  message: string;
};

export type ActivityLogOnCollaborationFragment =
  | ActivityLogOnCollaboration_ActivityLogEntryCalendarEventCreated_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryCalloutDiscussionComment_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryCalloutLinkCreated_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryCalloutPostComment_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryCalloutPostCreated_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryCalloutPublished_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryCalloutWhiteboardContentModified_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryCalloutWhiteboardCreated_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryMemberJoined_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntrySubspaceCreated_Fragment
  | ActivityLogOnCollaboration_ActivityLogEntryUpdateSent_Fragment;

export type ActivityLogOnCollaborationQueryVariables = Exact<{
  collaborationID: Scalars['UUID']['input'];
  limit: Scalars['Float']['input'];
  types?: InputMaybe<Array<ActivityEventType> | ActivityEventType>;
}>;

export type ActivityLogOnCollaborationQuery = {
  __typename?: 'Query';
  activityLogOnCollaboration: Array<
    | {
        __typename?: 'ActivityLogEntryCalendarEventCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        calendarEvent: {
          __typename?: 'CalendarEvent';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutDiscussionComment';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutLinkCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
        link: { __typename?: 'Link'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutPostComment';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        post: {
          __typename?: 'Post';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutPostCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
        post: {
          __typename?: 'Post';
          id: string;
          profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutPublished';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutWhiteboardContentModified';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
        whiteboard: {
          __typename?: 'Whiteboard';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutWhiteboardCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
        whiteboard: {
          __typename?: 'Whiteboard';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryMemberJoined';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        contributor:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
              };
            }
          | {
              __typename?: 'User';
              firstName: string;
              lastName: string;
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
              };
            };
      }
    | {
        __typename?: 'ActivityLogEntrySubspaceCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
        subspace: {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
      }
    | {
        __typename?: 'ActivityLogEntryUpdateSent';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        message: string;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        triggeredBy: {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          };
        };
      }
  >;
};

export type CalloutContributionsQueryVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
  includeLink?: Scalars['Boolean']['input'];
  includeWhiteboard?: Scalars['Boolean']['input'];
  includePost?: Scalars['Boolean']['input'];
}>;

export type CalloutContributionsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          contributions: Array<{
            __typename?: 'CalloutContribution';
            id: string;
            sortOrder: number;
            link?:
              | {
                  __typename?: 'Link';
                  id: string;
                  uri: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                  };
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                }
              | undefined;
            whiteboard?:
              | {
                  __typename?: 'Whiteboard';
                  id: string;
                  createdDate: Date;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
            post?:
              | {
                  __typename?: 'Post';
                  id: string;
                  createdDate: Date;
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                  createdBy?:
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      }
                    | undefined;
                  comments: { __typename?: 'Room'; id: string; messagesCount: number };
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    description?: string | undefined;
                    visuals: Array<{
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }>;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                    references?:
                      | Array<{
                          __typename?: 'Reference';
                          id: string;
                          name: string;
                          uri: string;
                          description?: string | undefined;
                        }>
                      | undefined;
                  };
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type CalloutContributionsSortOrderQueryVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
}>;

export type CalloutContributionsSortOrderQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          contributions: Array<{
            __typename?: 'CalloutContribution';
            id: string;
            sortOrder: number;
            link?:
              | {
                  __typename?: 'Link';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | undefined;
            whiteboard?:
              | {
                  __typename?: 'Whiteboard';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | undefined;
            post?:
              | {
                  __typename?: 'Post';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                  comments: { __typename?: 'Room'; id: string; messagesCount: number };
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type UpdateContributionsSortOrderMutationVariables = Exact<{
  calloutID: Scalars['UUID']['input'];
  contributionIds: Array<Scalars['UUID']['input']> | Scalars['UUID']['input'];
}>;

export type UpdateContributionsSortOrderMutation = {
  __typename?: 'Mutation';
  updateContributionsSortOrder: Array<{ __typename?: 'CalloutContribution'; id: string; sortOrder: number }>;
};

export type CreateLinkOnCalloutMutationVariables = Exact<{
  input: CreateContributionOnCalloutInput;
}>;

export type CreateLinkOnCalloutMutation = {
  __typename?: 'Mutation';
  createContributionOnCallout: {
    __typename?: 'CalloutContribution';
    link?:
      | {
          __typename?: 'Link';
          id: string;
          uri: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
        }
      | undefined;
  };
};

export type DeleteLinkMutationVariables = Exact<{
  input: DeleteLinkInput;
}>;

export type DeleteLinkMutation = { __typename?: 'Mutation'; deleteLink: { __typename?: 'Link'; id: string } };

export type UpdateLinkMutationVariables = Exact<{
  input: UpdateLinkInput;
}>;

export type UpdateLinkMutation = {
  __typename?: 'Mutation';
  updateLink: {
    __typename?: 'Link';
    id: string;
    uri: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
  };
};

export type CalloutPostCreatedSubscriptionVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
}>;

export type CalloutPostCreatedSubscription = {
  __typename?: 'Subscription';
  calloutPostCreated: {
    __typename?: 'CalloutPostCreated';
    contributionID: string;
    sortOrder: number;
    post: {
      __typename?: 'Post';
      id: string;
      createdDate: Date;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      createdBy?:
        | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
        | undefined;
      comments: { __typename?: 'Room'; id: string; messagesCount: number };
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        description?: string | undefined;
        visuals: Array<{
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          alternativeText?: string | undefined;
        }>;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
        references?:
          | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
          | undefined;
      };
    };
  };
};

export type CreatePostOnCalloutMutationVariables = Exact<{
  postData: CreateContributionOnCalloutInput;
}>;

export type CreatePostOnCalloutMutation = {
  __typename?: 'Mutation';
  createContributionOnCallout: {
    __typename?: 'CalloutContribution';
    post?: { __typename?: 'Post'; id: string } | undefined;
  };
};

export type ContributeTabPostFragment = {
  __typename?: 'Post';
  id: string;
  createdDate: Date;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  createdBy?:
    | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
    | undefined;
  comments: { __typename?: 'Room'; id: string; messagesCount: number };
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: string | undefined;
    visuals: Array<{
      __typename?: 'Visual';
      id: string;
      uri: string;
      name: string;
      alternativeText?: string | undefined;
    }>;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
  };
};

export type PostCardFragment = {
  __typename?: 'Post';
  id: string;
  createdDate: Date;
  createdBy?:
    | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
    | undefined;
  comments: { __typename?: 'Room'; id: string; messagesCount: number };
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: string | undefined;
    visuals: Array<{
      __typename?: 'Visual';
      id: string;
      uri: string;
      name: string;
      alternativeText?: string | undefined;
    }>;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
  };
};

export type WhiteboardCollectionCalloutCardFragment = {
  __typename?: 'Whiteboard';
  id: string;
  createdDate: Date;
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type CreateWhiteboardOnCalloutMutationVariables = Exact<{
  input: CreateContributionOnCalloutInput;
}>;

export type CreateWhiteboardOnCalloutMutation = {
  __typename?: 'Mutation';
  createContributionOnCallout: {
    __typename?: 'CalloutContribution';
    whiteboard?:
      | {
          __typename?: 'Whiteboard';
          id: string;
          nameID: string;
          createdDate: Date;
          contentUpdatePolicy: ContentUpdatePolicy;
          profile: {
            __typename?: 'Profile';
            url: string;
            id: string;
            displayName: string;
            description?: string | undefined;
            visual?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            preview?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            storageBucket: { __typename?: 'StorageBucket'; id: string };
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          createdBy?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                    | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }
      | undefined;
  };
};

export type CalloutContentQueryVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
}>;

export type CalloutContentQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            type: CalloutFramingType;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              references?:
                | Array<{
                    __typename?: 'Reference';
                    id: string;
                    name: string;
                    uri: string;
                    description?: string | undefined;
                  }>
                | undefined;
            };
            whiteboard?:
              | {
                  __typename?: 'Whiteboard';
                  id: string;
                  content: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    preview?: { __typename?: 'Visual'; id: string; name: string; uri: string } | undefined;
                  };
                }
              | undefined;
            memo?:
              | {
                  __typename?: 'Memo';
                  id: string;
                  markdown?: string | undefined;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    preview?: { __typename?: 'Visual'; id: string; name: string; uri: string } | undefined;
                  };
                }
              | undefined;
            link?:
              | {
                  __typename?: 'Link';
                  id: string;
                  uri: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                  };
                }
              | undefined;
          };
          contributionDefaults: {
            __typename?: 'CalloutContributionDefaults';
            id: string;
            defaultDisplayName?: string | undefined;
            postDescription?: string | undefined;
            whiteboardContent?: string | undefined;
          };
          settings: {
            __typename?: 'CalloutSettings';
            visibility: CalloutVisibility;
            contribution: {
              __typename?: 'CalloutSettingsContribution';
              enabled: boolean;
              allowedTypes: Array<CalloutContributionType>;
              canAddContributions: CalloutAllowedContributors;
              commentsEnabled: boolean;
            };
            framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
          };
        }
      | undefined;
  };
};

export type UpdateCalloutContentMutationVariables = Exact<{
  calloutData: UpdateCalloutEntityInput;
}>;

export type UpdateCalloutContentMutation = {
  __typename?: 'Mutation';
  updateCallout: {
    __typename?: 'Callout';
    id: string;
    sortOrder: number;
    activity: number;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      type: CalloutFramingType;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
        references?:
          | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
          | undefined;
        storageBucket: { __typename?: 'StorageBucket'; id: string };
      };
      whiteboard?:
        | {
            __typename?: 'Whiteboard';
            id: string;
            nameID: string;
            createdDate: Date;
            contentUpdatePolicy: ContentUpdatePolicy;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              description?: string | undefined;
              visual?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              preview?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              storageBucket: { __typename?: 'StorageBucket'; id: string };
            };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            createdBy?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }
        | undefined;
      memo?:
        | {
            __typename?: 'Memo';
            id: string;
            nameID: string;
            createdDate: Date;
            markdown?: string | undefined;
            contentUpdatePolicy: ContentUpdatePolicy;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              preview?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              storageBucket: { __typename?: 'StorageBucket'; id: string };
            };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            createdBy?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }
        | undefined;
      link?:
        | {
            __typename?: 'Link';
            id: string;
            uri: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
          }
        | undefined;
    };
    contributionDefaults: {
      __typename?: 'CalloutContributionDefaults';
      id: string;
      defaultDisplayName?: string | undefined;
      postDescription?: string | undefined;
      whiteboardContent?: string | undefined;
    };
    contributions: Array<{
      __typename?: 'CalloutContribution';
      id: string;
      sortOrder: number;
      link?:
        | {
            __typename?: 'Link';
            id: string;
            uri: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
          }
        | undefined;
    }>;
    comments?:
      | {
          __typename?: 'Room';
          id: string;
          messagesCount: number;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          messages: Array<{
            __typename?: 'Message';
            id: string;
            message: string;
            timestamp: number;
            threadID?: string | undefined;
            reactions: Array<{
              __typename?: 'Reaction';
              id: string;
              emoji: string;
              sender?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string };
                  }
                | undefined;
            }>;
            sender?:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          vcInteractions: Array<{
            __typename?: 'VcInteraction';
            id: string;
            threadID: string;
            virtualContributorID: string;
          }>;
        }
      | undefined;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    settings: {
      __typename?: 'CalloutSettings';
      visibility: CalloutVisibility;
      contribution: {
        __typename?: 'CalloutSettingsContribution';
        enabled: boolean;
        allowedTypes: Array<CalloutContributionType>;
        canAddContributions: CalloutAllowedContributors;
        commentsEnabled: boolean;
      };
      framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
    };
  };
};

export type UpdateCalloutVisibilityMutationVariables = Exact<{
  calloutData: UpdateCalloutVisibilityInput;
}>;

export type UpdateCalloutVisibilityMutation = {
  __typename?: 'Mutation';
  updateCalloutVisibility: {
    __typename?: 'Callout';
    id: string;
    sortOrder: number;
    activity: number;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      type: CalloutFramingType;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
        references?:
          | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
          | undefined;
        storageBucket: { __typename?: 'StorageBucket'; id: string };
      };
      whiteboard?:
        | {
            __typename?: 'Whiteboard';
            id: string;
            nameID: string;
            createdDate: Date;
            contentUpdatePolicy: ContentUpdatePolicy;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              description?: string | undefined;
              visual?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              preview?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              storageBucket: { __typename?: 'StorageBucket'; id: string };
            };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            createdBy?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }
        | undefined;
      memo?:
        | {
            __typename?: 'Memo';
            id: string;
            nameID: string;
            createdDate: Date;
            markdown?: string | undefined;
            contentUpdatePolicy: ContentUpdatePolicy;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              preview?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              storageBucket: { __typename?: 'StorageBucket'; id: string };
            };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            createdBy?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }
        | undefined;
      link?:
        | {
            __typename?: 'Link';
            id: string;
            uri: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
          }
        | undefined;
    };
    contributionDefaults: {
      __typename?: 'CalloutContributionDefaults';
      id: string;
      defaultDisplayName?: string | undefined;
      postDescription?: string | undefined;
      whiteboardContent?: string | undefined;
    };
    contributions: Array<{
      __typename?: 'CalloutContribution';
      id: string;
      sortOrder: number;
      link?:
        | {
            __typename?: 'Link';
            id: string;
            uri: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
          }
        | undefined;
    }>;
    comments?:
      | {
          __typename?: 'Room';
          id: string;
          messagesCount: number;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          messages: Array<{
            __typename?: 'Message';
            id: string;
            message: string;
            timestamp: number;
            threadID?: string | undefined;
            reactions: Array<{
              __typename?: 'Reaction';
              id: string;
              emoji: string;
              sender?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string };
                  }
                | undefined;
            }>;
            sender?:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          vcInteractions: Array<{
            __typename?: 'VcInteraction';
            id: string;
            threadID: string;
            virtualContributorID: string;
          }>;
        }
      | undefined;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    settings: {
      __typename?: 'CalloutSettings';
      visibility: CalloutVisibility;
      contribution: {
        __typename?: 'CalloutSettingsContribution';
        enabled: boolean;
        allowedTypes: Array<CalloutContributionType>;
        canAddContributions: CalloutAllowedContributors;
        commentsEnabled: boolean;
      };
      framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
    };
  };
};

export type DeleteCalloutMutationVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
}>;

export type DeleteCalloutMutation = { __typename?: 'Mutation'; deleteCallout: { __typename?: 'Callout'; id: string } };

export type CalloutSettingsFullFragment = {
  __typename?: 'CalloutSettings';
  visibility: CalloutVisibility;
  contribution: {
    __typename?: 'CalloutSettingsContribution';
    enabled: boolean;
    allowedTypes: Array<CalloutContributionType>;
    canAddContributions: CalloutAllowedContributors;
    commentsEnabled: boolean;
  };
  framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
};

export type UpdateCalloutsSortOrderMutationVariables = Exact<{
  calloutsSetID: Scalars['UUID']['input'];
  calloutIds: Array<Scalars['UUID']['input']> | Scalars['UUID']['input'];
}>;

export type UpdateCalloutsSortOrderMutation = {
  __typename?: 'Mutation';
  updateCalloutsSortOrder: Array<{ __typename?: 'Callout'; id: string; sortOrder: number }>;
};

export type DashboardTopCalloutsFragment = {
  __typename?: 'Collaboration';
  calloutsSet: {
    __typename?: 'CalloutsSet';
    id: string;
    callouts: Array<{
      __typename?: 'Callout';
      id: string;
      activity: number;
      framing: {
        __typename?: 'CalloutFraming';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          description?: string | undefined;
        };
      };
      settings: { __typename?: 'CalloutSettings'; visibility: CalloutVisibility };
    }>;
  };
};

export type DashboardTopCalloutFragment = {
  __typename?: 'Callout';
  id: string;
  activity: number;
  framing: {
    __typename?: 'CalloutFraming';
    id: string;
    profile: { __typename?: 'Profile'; id: string; url: string; displayName: string; description?: string | undefined };
  };
  settings: { __typename?: 'CalloutSettings'; visibility: CalloutVisibility };
};

export type CalloutsSetAuthorizationQueryVariables = Exact<{
  calloutsSetId: Scalars['UUID']['input'];
}>;

export type CalloutsSetAuthorizationQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    calloutsSet?:
      | {
          __typename?: 'CalloutsSet';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type CreateCalloutMutationVariables = Exact<{
  calloutData: CreateCalloutOnCalloutsSetInput;
}>;

export type CreateCalloutMutation = {
  __typename?: 'Mutation';
  createCalloutOnCalloutsSet: {
    __typename?: 'Callout';
    nameID: string;
    id: string;
    sortOrder: number;
    activity: number;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      type: CalloutFramingType;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
        references?:
          | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
          | undefined;
        storageBucket: { __typename?: 'StorageBucket'; id: string };
      };
      whiteboard?:
        | {
            __typename?: 'Whiteboard';
            id: string;
            nameID: string;
            createdDate: Date;
            contentUpdatePolicy: ContentUpdatePolicy;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              description?: string | undefined;
              visual?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              preview?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              storageBucket: { __typename?: 'StorageBucket'; id: string };
            };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            createdBy?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }
        | undefined;
      memo?:
        | {
            __typename?: 'Memo';
            id: string;
            nameID: string;
            createdDate: Date;
            markdown?: string | undefined;
            contentUpdatePolicy: ContentUpdatePolicy;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              preview?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              storageBucket: { __typename?: 'StorageBucket'; id: string };
            };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            createdBy?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }
        | undefined;
      link?:
        | {
            __typename?: 'Link';
            id: string;
            uri: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
          }
        | undefined;
    };
    contributionDefaults: {
      __typename?: 'CalloutContributionDefaults';
      id: string;
      defaultDisplayName?: string | undefined;
      postDescription?: string | undefined;
      whiteboardContent?: string | undefined;
    };
    contributions: Array<{
      __typename?: 'CalloutContribution';
      id: string;
      sortOrder: number;
      link?:
        | {
            __typename?: 'Link';
            id: string;
            uri: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
          }
        | undefined;
    }>;
    comments?:
      | {
          __typename?: 'Room';
          id: string;
          messagesCount: number;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          messages: Array<{
            __typename?: 'Message';
            id: string;
            message: string;
            timestamp: number;
            threadID?: string | undefined;
            reactions: Array<{
              __typename?: 'Reaction';
              id: string;
              emoji: string;
              sender?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string };
                  }
                | undefined;
            }>;
            sender?:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          vcInteractions: Array<{
            __typename?: 'VcInteraction';
            id: string;
            threadID: string;
            virtualContributorID: string;
          }>;
        }
      | undefined;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    settings: {
      __typename?: 'CalloutSettings';
      visibility: CalloutVisibility;
      contribution: {
        __typename?: 'CalloutSettingsContribution';
        enabled: boolean;
        allowedTypes: Array<CalloutContributionType>;
        canAddContributions: CalloutAllowedContributors;
        commentsEnabled: boolean;
      };
      framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
    };
  };
};

export type CalloutsOnCalloutsSetUsingClassificationQueryVariables = Exact<{
  calloutsSetId: Scalars['UUID']['input'];
  classificationTagsets?: InputMaybe<Array<TagsetArgs> | TagsetArgs>;
  withClassification?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CalloutsOnCalloutsSetUsingClassificationQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    calloutsSet?:
      | {
          __typename?: 'CalloutsSet';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          callouts: Array<{
            __typename?: 'Callout';
            id: string;
            sortOrder: number;
            activity: number;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              type: CalloutFramingType;
              profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
            };
            settings: { __typename?: 'CalloutSettings'; visibility: CalloutVisibility };
            classification?:
              | {
                  __typename?: 'Classification';
                  id: string;
                  flowState?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type CalloutFragment = {
  __typename?: 'Callout';
  id: string;
  sortOrder: number;
  activity: number;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  framing: {
    __typename?: 'CalloutFraming';
    id: string;
    type: CalloutFramingType;
    profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
  };
  settings: { __typename?: 'CalloutSettings'; visibility: CalloutVisibility };
};

export type CalloutDetailsQueryVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
  withClassification?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CalloutDetailsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          sortOrder: number;
          activity: number;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            type: CalloutFramingType;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              references?:
                | Array<{
                    __typename?: 'Reference';
                    id: string;
                    name: string;
                    uri: string;
                    description?: string | undefined;
                  }>
                | undefined;
              storageBucket: { __typename?: 'StorageBucket'; id: string };
            };
            whiteboard?:
              | {
                  __typename?: 'Whiteboard';
                  id: string;
                  nameID: string;
                  createdDate: Date;
                  contentUpdatePolicy: ContentUpdatePolicy;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    description?: string | undefined;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    preview?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                    storageBucket: { __typename?: 'StorageBucket'; id: string };
                  };
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                  createdBy?:
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | undefined;
                }
              | undefined;
            memo?:
              | {
                  __typename?: 'Memo';
                  id: string;
                  nameID: string;
                  createdDate: Date;
                  markdown?: string | undefined;
                  contentUpdatePolicy: ContentUpdatePolicy;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    preview?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    storageBucket: { __typename?: 'StorageBucket'; id: string };
                  };
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                  createdBy?:
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | undefined;
                }
              | undefined;
            link?:
              | {
                  __typename?: 'Link';
                  id: string;
                  uri: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                  };
                }
              | undefined;
          };
          contributionDefaults: {
            __typename?: 'CalloutContributionDefaults';
            id: string;
            defaultDisplayName?: string | undefined;
            postDescription?: string | undefined;
            whiteboardContent?: string | undefined;
          };
          contributions: Array<{
            __typename?: 'CalloutContribution';
            id: string;
            sortOrder: number;
            link?:
              | {
                  __typename?: 'Link';
                  id: string;
                  uri: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                  };
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                }
              | undefined;
          }>;
          comments?:
            | {
                __typename?: 'Room';
                id: string;
                messagesCount: number;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
                messages: Array<{
                  __typename?: 'Message';
                  id: string;
                  message: string;
                  timestamp: number;
                  threadID?: string | undefined;
                  reactions: Array<{
                    __typename?: 'Reaction';
                    id: string;
                    emoji: string;
                    sender?:
                      | {
                          __typename?: 'User';
                          id: string;
                          profile: { __typename?: 'Profile'; id: string; displayName: string };
                        }
                      | undefined;
                  }>;
                  sender?:
                    | {
                        __typename?: 'Organization';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          description?: string | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                          tagsets?:
                            | Array<{
                                __typename?: 'Tagset';
                                id: string;
                                name: string;
                                tags: Array<string>;
                                allowedValues: Array<string>;
                                type: TagsetType;
                              }>
                            | undefined;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          description?: string | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                          tagsets?:
                            | Array<{
                                __typename?: 'Tagset';
                                id: string;
                                name: string;
                                tags: Array<string>;
                                allowedValues: Array<string>;
                                type: TagsetType;
                              }>
                            | undefined;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | {
                        __typename?: 'VirtualContributor';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          description?: string | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                          tagsets?:
                            | Array<{
                                __typename?: 'Tagset';
                                id: string;
                                name: string;
                                tags: Array<string>;
                                allowedValues: Array<string>;
                                type: TagsetType;
                              }>
                            | undefined;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | undefined;
                }>;
                vcInteractions: Array<{
                  __typename?: 'VcInteraction';
                  id: string;
                  threadID: string;
                  virtualContributorID: string;
                }>;
              }
            | undefined;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          settings: {
            __typename?: 'CalloutSettings';
            visibility: CalloutVisibility;
            contribution: {
              __typename?: 'CalloutSettingsContribution';
              enabled: boolean;
              allowedTypes: Array<CalloutContributionType>;
              canAddContributions: CalloutAllowedContributors;
              commentsEnabled: boolean;
            };
            framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
          };
          classification?:
            | {
                __typename?: 'Classification';
                id: string;
                flowState?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  };
};

export type ClassificationDetailsFragment = {
  __typename?: 'Callout';
  classification?:
    | {
        __typename?: 'Classification';
        id: string;
        flowState?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
      }
    | undefined;
};

export type CalloutDetailsFragment = {
  __typename?: 'Callout';
  id: string;
  sortOrder: number;
  activity: number;
  framing: {
    __typename?: 'CalloutFraming';
    id: string;
    type: CalloutFramingType;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
      storageBucket: { __typename?: 'StorageBucket'; id: string };
    };
    whiteboard?:
      | {
          __typename?: 'Whiteboard';
          id: string;
          nameID: string;
          createdDate: Date;
          contentUpdatePolicy: ContentUpdatePolicy;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            description?: string | undefined;
            visual?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            preview?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            storageBucket: { __typename?: 'StorageBucket'; id: string };
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          createdBy?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                    | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }
      | undefined;
    memo?:
      | {
          __typename?: 'Memo';
          id: string;
          nameID: string;
          createdDate: Date;
          markdown?: string | undefined;
          contentUpdatePolicy: ContentUpdatePolicy;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            preview?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            storageBucket: { __typename?: 'StorageBucket'; id: string };
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          createdBy?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                    | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }
      | undefined;
    link?:
      | {
          __typename?: 'Link';
          id: string;
          uri: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
        }
      | undefined;
  };
  contributionDefaults: {
    __typename?: 'CalloutContributionDefaults';
    id: string;
    defaultDisplayName?: string | undefined;
    postDescription?: string | undefined;
    whiteboardContent?: string | undefined;
  };
  contributions: Array<{
    __typename?: 'CalloutContribution';
    id: string;
    sortOrder: number;
    link?:
      | {
          __typename?: 'Link';
          id: string;
          uri: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  }>;
  comments?:
    | {
        __typename?: 'Room';
        id: string;
        messagesCount: number;
        authorization?:
          | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
          | undefined;
        messages: Array<{
          __typename?: 'Message';
          id: string;
          message: string;
          timestamp: number;
          threadID?: string | undefined;
          reactions: Array<{
            __typename?: 'Reaction';
            id: string;
            emoji: string;
            sender?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | undefined;
          }>;
          sender?:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  description?: string | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagsets?:
                    | Array<{
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }>
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                    | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  description?: string | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagsets?:
                    | Array<{
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }>
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                    | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  description?: string | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagsets?:
                    | Array<{
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }>
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                    | undefined;
                };
              }
            | undefined;
        }>;
        vcInteractions: Array<{
          __typename?: 'VcInteraction';
          id: string;
          threadID: string;
          virtualContributorID: string;
        }>;
      }
    | undefined;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  settings: {
    __typename?: 'CalloutSettings';
    visibility: CalloutVisibility;
    contribution: {
      __typename?: 'CalloutSettingsContribution';
      enabled: boolean;
      allowedTypes: Array<CalloutContributionType>;
      canAddContributions: CalloutAllowedContributors;
      commentsEnabled: boolean;
    };
    framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
  };
};

export type MemoMarkdownQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type MemoMarkdownQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    memo?: { __typename?: 'Memo'; id: string; markdown?: string | undefined } | undefined;
  };
};

export type MemoDetailsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type MemoDetailsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    memo?:
      | {
          __typename?: 'Memo';
          id: string;
          nameID: string;
          createdDate: Date;
          markdown?: string | undefined;
          contentUpdatePolicy: ContentUpdatePolicy;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            preview?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            storageBucket: { __typename?: 'StorageBucket'; id: string };
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          createdBy?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                    | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }
      | undefined;
  };
};

export type MemoProfileFragment = {
  __typename?: 'Profile';
  id: string;
  displayName: string;
  url: string;
  preview?:
    | {
        __typename?: 'Visual';
        id: string;
        uri: string;
        name: string;
        allowedTypes: Array<string>;
        aspectRatio: number;
        maxHeight: number;
        maxWidth: number;
        minHeight: number;
        minWidth: number;
        alternativeText?: string | undefined;
      }
    | undefined;
  storageBucket: { __typename?: 'StorageBucket'; id: string };
};

export type MemoDetailsFragment = {
  __typename?: 'Memo';
  id: string;
  nameID: string;
  createdDate: Date;
  markdown?: string | undefined;
  contentUpdatePolicy: ContentUpdatePolicy;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    preview?:
      | {
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    storageBucket: { __typename?: 'StorageBucket'; id: string };
  };
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  createdBy?:
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          location?:
            | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
            | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | undefined;
};

export type CalloutSettingsQueryVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
}>;

export type CalloutSettingsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          settings: {
            __typename?: 'CalloutSettings';
            contribution: { __typename?: 'CalloutSettingsContribution'; commentsEnabled: boolean };
          };
        }
      | undefined;
  };
};

export type PostQueryVariables = Exact<{
  postId: Scalars['UUID']['input'];
}>;

export type PostQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    post?:
      | {
          __typename?: 'Post';
          id: string;
          createdDate: Date;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            banner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
          createdBy?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagsets?:
                    | Array<{
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }>
                    | undefined;
                };
              }
            | undefined;
          comments: {
            __typename?: 'Room';
            id: string;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            messages: Array<{
              __typename?: 'Message';
              id: string;
              message: string;
              timestamp: number;
              threadID?: string | undefined;
              reactions: Array<{
                __typename?: 'Reaction';
                id: string;
                emoji: string;
                sender?:
                  | {
                      __typename?: 'User';
                      id: string;
                      profile: { __typename?: 'Profile'; id: string; displayName: string };
                    }
                  | undefined;
              }>;
              sender?:
                | {
                    __typename?: 'Organization';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      description?: string | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagsets?:
                        | Array<{
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }>
                        | undefined;
                      location?:
                        | {
                            __typename?: 'Location';
                            id: string;
                            country?: string | undefined;
                            city?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | {
                    __typename?: 'User';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      description?: string | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagsets?:
                        | Array<{
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }>
                        | undefined;
                      location?:
                        | {
                            __typename?: 'Location';
                            id: string;
                            country?: string | undefined;
                            city?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | {
                    __typename?: 'VirtualContributor';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      description?: string | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagsets?:
                        | Array<{
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }>
                        | undefined;
                      location?:
                        | {
                            __typename?: 'Location';
                            id: string;
                            country?: string | undefined;
                            city?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | undefined;
            }>;
            vcInteractions: Array<{
              __typename?: 'VcInteraction';
              id: string;
              threadID: string;
              virtualContributorID: string;
            }>;
          };
        }
      | undefined;
  };
};

export type UpdatePostMutationVariables = Exact<{
  input: UpdatePostInput;
}>;

export type UpdatePostMutation = {
  __typename?: 'Mutation';
  updatePost: {
    __typename?: 'Post';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; description?: string | undefined; uri: string }>
        | undefined;
    };
  };
};

export type DeletePostMutationVariables = Exact<{
  postId: Scalars['UUID']['input'];
}>;

export type DeletePostMutation = { __typename?: 'Mutation'; deletePost: { __typename?: 'Post'; id: string } };

export type MoveContributionToCalloutMutationVariables = Exact<{
  contributionId: Scalars['UUID']['input'];
  calloutId: Scalars['UUID']['input'];
}>;

export type MoveContributionToCalloutMutation = {
  __typename?: 'Mutation';
  moveContributionToCallout: {
    __typename?: 'CalloutContribution';
    id: string;
    post?:
      | { __typename?: 'Post'; id: string; profile: { __typename?: 'Profile'; id: string; url: string } }
      | undefined;
  };
};

export type PostSettingsQueryVariables = Exact<{
  postId: Scalars['UUID']['input'];
  calloutId: Scalars['UUID']['input'];
}>;

export type PostSettingsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          contributions: Array<{
            __typename?: 'CalloutContribution';
            id: string;
            post?: { __typename?: 'Post'; id: string } | undefined;
          }>;
          postNames: Array<{
            __typename?: 'CalloutContribution';
            post?:
              | {
                  __typename?: 'Post';
                  id: string;
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                    references?:
                      | Array<{
                          __typename?: 'Reference';
                          id: string;
                          name: string;
                          uri: string;
                          description?: string | undefined;
                        }>
                      | undefined;
                    visuals: Array<{
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }>;
                  };
                }
              | undefined;
          }>;
        }
      | undefined;
    post?:
      | {
          __typename?: 'Post';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            visuals: Array<{
              __typename?: 'Visual';
              id: string;
              uri: string;
              name: string;
              allowedTypes: Array<string>;
              aspectRatio: number;
              maxHeight: number;
              maxWidth: number;
              minHeight: number;
              minWidth: number;
              alternativeText?: string | undefined;
            }>;
          };
        }
      | undefined;
  };
};

export type PostSettingsFragment = {
  __typename?: 'Post';
  id: string;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
    visuals: Array<{
      __typename?: 'Visual';
      id: string;
      uri: string;
      name: string;
      allowedTypes: Array<string>;
      aspectRatio: number;
      maxHeight: number;
      maxWidth: number;
      minHeight: number;
      minWidth: number;
      alternativeText?: string | undefined;
    }>;
  };
};

export type PostSettingsCalloutFragment = {
  __typename?: 'Callout';
  id: string;
  contributions: Array<{
    __typename?: 'CalloutContribution';
    id: string;
    post?: { __typename?: 'Post'; id: string } | undefined;
  }>;
  postNames: Array<{
    __typename?: 'CalloutContribution';
    post?:
      | {
          __typename?: 'Post';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            visuals: Array<{
              __typename?: 'Visual';
              id: string;
              uri: string;
              name: string;
              alternativeText?: string | undefined;
            }>;
          };
        }
      | undefined;
  }>;
};

export type PostCalloutsInCalloutSetQueryVariables = Exact<{
  calloutsSetId: Scalars['UUID']['input'];
}>;

export type PostCalloutsInCalloutSetQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    calloutsSet?:
      | {
          __typename?: 'CalloutsSet';
          id: string;
          callouts: Array<{
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string };
            };
          }>;
        }
      | undefined;
  };
};

export type ContentUpdatePolicyQueryVariables = Exact<{
  elementId: Scalars['UUID']['input'];
  isWhiteboard: Scalars['Boolean']['input'];
  isMemo: Scalars['Boolean']['input'];
}>;

export type ContentUpdatePolicyQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    whiteboard?: { __typename?: 'Whiteboard'; id: string; contentUpdatePolicy: ContentUpdatePolicy } | undefined;
    memo?: { __typename?: 'Memo'; id: string; contentUpdatePolicy: ContentUpdatePolicy } | undefined;
  };
};

export type UpdateWhiteboardContentUpdatePolicyMutationVariables = Exact<{
  whiteboardId: Scalars['UUID']['input'];
  contentUpdatePolicy: ContentUpdatePolicy;
}>;

export type UpdateWhiteboardContentUpdatePolicyMutation = {
  __typename?: 'Mutation';
  updateWhiteboard: { __typename?: 'Whiteboard'; id: string; contentUpdatePolicy: ContentUpdatePolicy };
};

export type UpdateMemoContentUpdatePolicyMutationVariables = Exact<{
  memoId: Scalars['UUID']['input'];
  contentUpdatePolicy: ContentUpdatePolicy;
}>;

export type UpdateMemoContentUpdatePolicyMutation = {
  __typename?: 'Mutation';
  updateMemo: { __typename?: 'Memo'; id: string; contentUpdatePolicy: ContentUpdatePolicy };
};

export type WhiteboardProfileFragment = {
  __typename?: 'Profile';
  id: string;
  url: string;
  displayName: string;
  description?: string | undefined;
  visual?:
    | {
        __typename?: 'Visual';
        id: string;
        uri: string;
        name: string;
        allowedTypes: Array<string>;
        aspectRatio: number;
        maxHeight: number;
        maxWidth: number;
        minHeight: number;
        minWidth: number;
        alternativeText?: string | undefined;
      }
    | undefined;
  preview?:
    | {
        __typename?: 'Visual';
        id: string;
        uri: string;
        name: string;
        allowedTypes: Array<string>;
        aspectRatio: number;
        maxHeight: number;
        maxWidth: number;
        minHeight: number;
        minWidth: number;
        alternativeText?: string | undefined;
      }
    | undefined;
  tagset?:
    | {
        __typename?: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: TagsetType;
      }
    | undefined;
  storageBucket: { __typename?: 'StorageBucket'; id: string };
};

export type WhiteboardDetailsFragment = {
  __typename?: 'Whiteboard';
  id: string;
  nameID: string;
  createdDate: Date;
  contentUpdatePolicy: ContentUpdatePolicy;
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: string | undefined;
    visual?:
      | {
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    preview?:
      | {
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    storageBucket: { __typename?: 'StorageBucket'; id: string };
  };
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  createdBy?:
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          location?:
            | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
            | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | undefined;
};

export type WhiteboardContentFragment = { __typename?: 'Whiteboard'; id: string; content: string };

export type CollaborationWithWhiteboardDetailsFragment = {
  __typename?: 'Collaboration';
  id: string;
  calloutsSet: {
    __typename?: 'CalloutsSet';
    id: string;
    callouts: Array<{
      __typename?: 'Callout';
      id: string;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      contributions: Array<{
        __typename?: 'CalloutContribution';
        whiteboard?:
          | {
              __typename?: 'Whiteboard';
              id: string;
              nameID: string;
              createdDate: Date;
              contentUpdatePolicy: ContentUpdatePolicy;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                description?: string | undefined;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      allowedTypes: Array<string>;
                      aspectRatio: number;
                      maxHeight: number;
                      maxWidth: number;
                      minHeight: number;
                      minWidth: number;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                preview?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      allowedTypes: Array<string>;
                      aspectRatio: number;
                      maxHeight: number;
                      maxWidth: number;
                      minHeight: number;
                      minWidth: number;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagset?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
                storageBucket: { __typename?: 'StorageBucket'; id: string };
              };
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
              createdBy?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      location?:
                        | {
                            __typename?: 'Location';
                            id: string;
                            country?: string | undefined;
                            city?: string | undefined;
                          }
                        | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | undefined;
            }
          | undefined;
      }>;
      framing: {
        __typename?: 'CalloutFraming';
        id: string;
        type: CalloutFramingType;
        whiteboard?:
          | {
              __typename?: 'Whiteboard';
              id: string;
              nameID: string;
              createdDate: Date;
              contentUpdatePolicy: ContentUpdatePolicy;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                description?: string | undefined;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      allowedTypes: Array<string>;
                      aspectRatio: number;
                      maxHeight: number;
                      maxWidth: number;
                      minHeight: number;
                      minWidth: number;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                preview?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      allowedTypes: Array<string>;
                      aspectRatio: number;
                      maxHeight: number;
                      maxWidth: number;
                      minHeight: number;
                      minWidth: number;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagset?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
                storageBucket: { __typename?: 'StorageBucket'; id: string };
              };
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
              createdBy?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      location?:
                        | {
                            __typename?: 'Location';
                            id: string;
                            country?: string | undefined;
                            city?: string | undefined;
                          }
                        | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | undefined;
            }
          | undefined;
      };
    }>;
  };
};

export type WhiteboardFromCalloutQueryVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
  contributionId: Scalars['UUID']['input'];
}>;

export type WhiteboardFromCalloutQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          contributions: Array<{
            __typename?: 'CalloutContribution';
            id: string;
            whiteboard?:
              | {
                  __typename?: 'Whiteboard';
                  id: string;
                  nameID: string;
                  createdDate: Date;
                  contentUpdatePolicy: ContentUpdatePolicy;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    description?: string | undefined;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    preview?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          allowedTypes: Array<string>;
                          aspectRatio: number;
                          maxHeight: number;
                          maxWidth: number;
                          minHeight: number;
                          minWidth: number;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                    storageBucket: { __typename?: 'StorageBucket'; id: string };
                  };
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                  createdBy?:
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          location?:
                            | {
                                __typename?: 'Location';
                                id: string;
                                country?: string | undefined;
                                city?: string | undefined;
                              }
                            | undefined;
                          avatar?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | undefined;
                }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type WhiteboardLastUpdatedDateQueryVariables = Exact<{
  whiteboardId: Scalars['UUID']['input'];
}>;

export type WhiteboardLastUpdatedDateQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    whiteboard?: { __typename?: 'Whiteboard'; id: string; updatedDate: Date } | undefined;
  };
};

export type DeleteWhiteboardMutationVariables = Exact<{
  input: DeleteWhiteboardInput;
}>;

export type DeleteWhiteboardMutation = {
  __typename?: 'Mutation';
  deleteWhiteboard: { __typename?: 'Whiteboard'; id: string };
};

export type UpdateWhiteboardMutationVariables = Exact<{
  input: UpdateWhiteboardEntityInput;
}>;

export type UpdateWhiteboardMutation = {
  __typename?: 'Mutation';
  updateWhiteboard: {
    __typename?: 'Whiteboard';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string };
  };
};

export type LinkDetailsFragment = {
  __typename?: 'Link';
  id: string;
  uri: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
};

export type LinkDetailsWithAuthorizationFragment = {
  __typename?: 'Link';
  id: string;
  uri: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
};

export type FullLocationFragment = {
  __typename?: 'Location';
  id: string;
  country?: string | undefined;
  city?: string | undefined;
  addressLine1?: string | undefined;
  addressLine2?: string | undefined;
  stateOrProvince?: string | undefined;
  postalCode?: string | undefined;
};

export type CreateReferenceOnProfileMutationVariables = Exact<{
  input: CreateReferenceOnProfileInput;
}>;

export type CreateReferenceOnProfileMutation = {
  __typename?: 'Mutation';
  createReferenceOnProfile: {
    __typename?: 'Reference';
    id: string;
    name: string;
    uri: string;
    description?: string | undefined;
  };
};

export type DeleteReferenceMutationVariables = Exact<{
  input: DeleteReferenceInput;
}>;

export type DeleteReferenceMutation = {
  __typename?: 'Mutation';
  deleteReference: { __typename?: 'Reference'; id: string };
};

export type ReferenceDetailsFragment = {
  __typename?: 'Reference';
  id: string;
  name: string;
  uri: string;
  description?: string | undefined;
};

export type CreateTagsetOnProfileMutationVariables = Exact<{
  input: CreateTagsetOnProfileInput;
}>;

export type CreateTagsetOnProfileMutation = {
  __typename?: 'Mutation';
  createTagsetOnProfile: {
    __typename?: 'Tagset';
    id: string;
    name: string;
    tags: Array<string>;
    allowedValues: Array<string>;
    type: TagsetType;
  };
};

export type TagsetDetailsFragment = {
  __typename?: 'Tagset';
  id: string;
  name: string;
  tags: Array<string>;
  allowedValues: Array<string>;
  type: TagsetType;
};

export type VisualModelFragment = {
  __typename?: 'Visual';
  id: string;
  uri: string;
  name: string;
  alternativeText?: string | undefined;
};

export type VisualModelFullFragment = {
  __typename?: 'Visual';
  id: string;
  uri: string;
  name: string;
  allowedTypes: Array<string>;
  aspectRatio: number;
  maxHeight: number;
  maxWidth: number;
  minHeight: number;
  minWidth: number;
  alternativeText?: string | undefined;
};

export type UploadVisualMutationVariables = Exact<{
  file: Scalars['Upload']['input'];
  uploadData: VisualUploadImageInput;
}>;

export type UploadVisualMutation = {
  __typename?: 'Mutation';
  uploadImageOnVisual: { __typename?: 'Visual'; id: string; uri: string; alternativeText?: string | undefined };
};

export type LatestReleaseDiscussionQueryVariables = Exact<{ [key: string]: never }>;

export type LatestReleaseDiscussionQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    latestReleaseDiscussion?: { __typename?: 'LatestReleaseDiscussion'; id: string } | undefined;
  };
};

export type CreateDiscussionMutationVariables = Exact<{
  input: ForumCreateDiscussionInput;
}>;

export type CreateDiscussionMutation = {
  __typename?: 'Mutation';
  createDiscussion: {
    __typename?: 'Discussion';
    id: string;
    createdBy?: string | undefined;
    timestamp?: number | undefined;
    category: ForumDiscussionCategory;
    profile: { __typename?: 'Profile'; id: string; url: string; displayName: string; description?: string | undefined };
    comments: {
      __typename?: 'Room';
      id: string;
      messagesCount: number;
      authorization?:
        | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      messages: Array<{
        __typename?: 'Message';
        id: string;
        message: string;
        timestamp: number;
        threadID?: string | undefined;
        reactions: Array<{
          __typename?: 'Reaction';
          id: string;
          emoji: string;
          sender?:
            | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
            | undefined;
        }>;
        sender?:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | undefined;
      }>;
    };
    authorization?:
      | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type UpdateDiscussionMutationVariables = Exact<{
  input: UpdateDiscussionInput;
}>;

export type UpdateDiscussionMutation = {
  __typename?: 'Mutation';
  updateDiscussion: {
    __typename?: 'Discussion';
    id: string;
    createdBy?: string | undefined;
    timestamp?: number | undefined;
    category: ForumDiscussionCategory;
    profile: { __typename?: 'Profile'; id: string; url: string; displayName: string; description?: string | undefined };
    comments: {
      __typename?: 'Room';
      id: string;
      messagesCount: number;
      authorization?:
        | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      messages: Array<{
        __typename?: 'Message';
        id: string;
        message: string;
        timestamp: number;
        threadID?: string | undefined;
        reactions: Array<{
          __typename?: 'Reaction';
          id: string;
          emoji: string;
          sender?:
            | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
            | undefined;
        }>;
        sender?:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | undefined;
      }>;
    };
    authorization?:
      | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type DeleteDiscussionMutationVariables = Exact<{
  deleteData: DeleteDiscussionInput;
}>;

export type DeleteDiscussionMutation = {
  __typename?: 'Mutation';
  deleteDiscussion: { __typename?: 'Discussion'; id: string };
};

export type DiscussionDetailsFragment = {
  __typename?: 'Discussion';
  id: string;
  createdBy?: string | undefined;
  timestamp?: number | undefined;
  category: ForumDiscussionCategory;
  profile: { __typename?: 'Profile'; id: string; url: string; displayName: string; description?: string | undefined };
  comments: {
    __typename?: 'Room';
    id: string;
    messagesCount: number;
    authorization?:
      | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    messages: Array<{
      __typename?: 'Message';
      id: string;
      message: string;
      timestamp: number;
      threadID?: string | undefined;
      reactions: Array<{
        __typename?: 'Reaction';
        id: string;
        emoji: string;
        sender?:
          | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
          | undefined;
      }>;
      sender?:
        | {
            __typename?: 'Organization';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              description?: string | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                | undefined;
            };
          }
        | {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              description?: string | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                | undefined;
            };
          }
        | {
            __typename?: 'VirtualContributor';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              description?: string | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                | undefined;
            };
          }
        | undefined;
    }>;
  };
  authorization?:
    | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
};

export type PlatformDiscussionsQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformDiscussionsQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    forum: {
      __typename?: 'Forum';
      id: string;
      discussionCategories: Array<ForumDiscussionCategory>;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      discussions?:
        | Array<{
            __typename?: 'Discussion';
            id: string;
            category: ForumDiscussionCategory;
            timestamp?: number | undefined;
            createdBy?: string | undefined;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              description?: string | undefined;
              tagline?: string | undefined;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            comments: {
              __typename?: 'Room';
              id: string;
              messagesCount: number;
              authorization?:
                | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
          }>
        | undefined;
    };
  };
};

export type DiscussionCardFragment = {
  __typename?: 'Discussion';
  id: string;
  category: ForumDiscussionCategory;
  timestamp?: number | undefined;
  createdBy?: string | undefined;
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: string | undefined;
    tagline?: string | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
  comments: {
    __typename?: 'Room';
    id: string;
    messagesCount: number;
    authorization?:
      | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
};

export type PlatformDiscussionQueryVariables = Exact<{
  discussionId: Scalars['UUID']['input'];
}>;

export type PlatformDiscussionQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    forum: {
      __typename?: 'Forum';
      id: string;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      discussion?:
        | {
            __typename?: 'Discussion';
            id: string;
            createdBy?: string | undefined;
            timestamp?: number | undefined;
            category: ForumDiscussionCategory;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              description?: string | undefined;
            };
            comments: {
              __typename?: 'Room';
              id: string;
              messagesCount: number;
              authorization?:
                | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
              messages: Array<{
                __typename?: 'Message';
                id: string;
                message: string;
                timestamp: number;
                threadID?: string | undefined;
                reactions: Array<{
                  __typename?: 'Reaction';
                  id: string;
                  emoji: string;
                  sender?:
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      }
                    | undefined;
                }>;
                sender?:
                  | {
                      __typename?: 'Organization';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        description?: string | undefined;
                        avatar?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                        tagsets?:
                          | Array<{
                              __typename?: 'Tagset';
                              id: string;
                              name: string;
                              tags: Array<string>;
                              allowedValues: Array<string>;
                              type: TagsetType;
                            }>
                          | undefined;
                        location?:
                          | {
                              __typename?: 'Location';
                              id: string;
                              country?: string | undefined;
                              city?: string | undefined;
                            }
                          | undefined;
                      };
                    }
                  | {
                      __typename?: 'User';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        description?: string | undefined;
                        avatar?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                        tagsets?:
                          | Array<{
                              __typename?: 'Tagset';
                              id: string;
                              name: string;
                              tags: Array<string>;
                              allowedValues: Array<string>;
                              type: TagsetType;
                            }>
                          | undefined;
                        location?:
                          | {
                              __typename?: 'Location';
                              id: string;
                              country?: string | undefined;
                              city?: string | undefined;
                            }
                          | undefined;
                      };
                    }
                  | {
                      __typename?: 'VirtualContributor';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        description?: string | undefined;
                        avatar?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                        tagsets?:
                          | Array<{
                              __typename?: 'Tagset';
                              id: string;
                              name: string;
                              tags: Array<string>;
                              allowedValues: Array<string>;
                              type: TagsetType;
                            }>
                          | undefined;
                        location?:
                          | {
                              __typename?: 'Location';
                              id: string;
                              country?: string | undefined;
                              city?: string | undefined;
                            }
                          | undefined;
                      };
                    }
                  | undefined;
              }>;
            };
            authorization?:
              | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
          }
        | undefined;
    };
  };
};

export type ForumDiscussionUpdatedSubscriptionVariables = Exact<{
  forumID: Scalars['UUID']['input'];
}>;

export type ForumDiscussionUpdatedSubscription = {
  __typename?: 'Subscription';
  forumDiscussionUpdated: {
    __typename?: 'Discussion';
    id: string;
    createdBy?: string | undefined;
    timestamp?: number | undefined;
    category: ForumDiscussionCategory;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      tagline?: string | undefined;
      visuals: Array<{
        __typename?: 'Visual';
        id: string;
        uri: string;
        name: string;
        alternativeText?: string | undefined;
      }>;
    };
    comments: { __typename?: 'Room'; id: string; messagesCount: number };
  };
};

export type SendMessageToUserMutationVariables = Exact<{
  messageData: CommunicationSendMessageToUserInput;
}>;

export type SendMessageToUserMutation = { __typename?: 'Mutation'; sendMessageToUser: boolean };

export type SendMessageToOrganizationMutationVariables = Exact<{
  messageData: CommunicationSendMessageToOrganizationInput;
}>;

export type SendMessageToOrganizationMutation = { __typename?: 'Mutation'; sendMessageToOrganization: boolean };

export type SendMessageToCommunityLeadsMutationVariables = Exact<{
  messageData: CommunicationSendMessageToCommunityLeadsInput;
}>;

export type SendMessageToCommunityLeadsMutation = { __typename?: 'Mutation'; sendMessageToCommunityLeads: boolean };

export type AddReactionMutationVariables = Exact<{
  roomId: Scalars['UUID']['input'];
  messageId: Scalars['MessageID']['input'];
  emoji: Scalars['Emoji']['input'];
}>;

export type AddReactionMutation = {
  __typename?: 'Mutation';
  addReactionToMessageInRoom: {
    __typename?: 'Reaction';
    id: string;
    emoji: string;
    sender?: { __typename?: 'User'; id: string; firstName: string; lastName: string } | undefined;
  };
};

export type MessageDetailsFragment = {
  __typename?: 'Message';
  id: string;
  message: string;
  timestamp: number;
  threadID?: string | undefined;
  reactions: Array<{
    __typename?: 'Reaction';
    id: string;
    emoji: string;
    sender?:
      | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
      | undefined;
  }>;
  sender?:
    | {
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          description?: string | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          tagsets?:
            | Array<{
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }>
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          description?: string | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          tagsets?:
            | Array<{
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }>
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          description?: string | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          tagsets?:
            | Array<{
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }>
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
            | undefined;
        };
      }
    | undefined;
};

export type ReactionDetailsFragment = {
  __typename?: 'Reaction';
  id: string;
  emoji: string;
  sender?:
    | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
    | undefined;
};

export type CommentsWithMessagesFragment = {
  __typename?: 'Room';
  id: string;
  messagesCount: number;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  messages: Array<{
    __typename?: 'Message';
    id: string;
    message: string;
    timestamp: number;
    threadID?: string | undefined;
    reactions: Array<{
      __typename?: 'Reaction';
      id: string;
      emoji: string;
      sender?:
        | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
        | undefined;
    }>;
    sender?:
      | {
          __typename?: 'Organization';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            description?: string | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
              | undefined;
          };
        }
      | {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            description?: string | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
              | undefined;
          };
        }
      | {
          __typename?: 'VirtualContributor';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            description?: string | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
              | undefined;
          };
        }
      | undefined;
  }>;
  vcInteractions: Array<{ __typename?: 'VcInteraction'; id: string; threadID: string; virtualContributorID: string }>;
};

export type RemoveReactionMutationVariables = Exact<{
  roomId: Scalars['UUID']['input'];
  reactionId: Scalars['MessageID']['input'];
}>;

export type RemoveReactionMutation = { __typename?: 'Mutation'; removeReactionToMessageInRoom: boolean };

export type ReplyToMessageMutationVariables = Exact<{
  roomId: Scalars['UUID']['input'];
  message: Scalars['String']['input'];
  threadId: Scalars['MessageID']['input'];
}>;

export type ReplyToMessageMutation = {
  __typename?: 'Mutation';
  sendMessageReplyToRoom: {
    __typename?: 'Message';
    id: string;
    message: string;
    timestamp: number;
    sender?:
      | { __typename?: 'Organization' }
      | { __typename?: 'User'; id: string }
      | { __typename?: 'VirtualContributor'; id: string }
      | undefined;
  };
};

export type VcInteractionsDetailsFragment = {
  __typename?: 'VcInteraction';
  id: string;
  threadID: string;
  virtualContributorID: string;
};

export type MentionableContributorsQueryVariables = Exact<{
  filter?: InputMaybe<UserFilterInput>;
  first?: InputMaybe<Scalars['Int']['input']>;
  roleSetId?: Scalars['UUID']['input'];
  includeVirtualContributors: Scalars['Boolean']['input'];
}>;

export type MentionableContributorsQuery = {
  __typename?: 'Query';
  usersPaginated: {
    __typename?: 'PaginatedUsers';
    users: Array<{
      __typename?: 'User';
      id: string;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        location?:
          | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
          | undefined;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
    }>;
  };
  lookup?: {
    __typename?: 'LookupQueryResults';
    roleSet?:
      | {
          __typename?: 'RoleSet';
          virtualContributorsInRoleInHierarchy: Array<{
            __typename?: 'VirtualContributor';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
        }
      | undefined;
  };
};

export type SendMessageToRoomMutationVariables = Exact<{
  messageData: RoomSendMessageInput;
}>;

export type SendMessageToRoomMutation = {
  __typename?: 'Mutation';
  sendMessageToRoom: {
    __typename?: 'Message';
    id: string;
    message: string;
    timestamp: number;
    sender?:
      | { __typename?: 'Organization' }
      | { __typename?: 'User'; id: string }
      | { __typename?: 'VirtualContributor'; id: string }
      | undefined;
  };
};

export type RemoveMessageOnRoomMutationVariables = Exact<{
  messageData: RoomRemoveMessageInput;
}>;

export type RemoveMessageOnRoomMutation = { __typename?: 'Mutation'; removeMessageOnRoom: string };

export type RoomEventsSubscriptionVariables = Exact<{
  roomID: Scalars['UUID']['input'];
}>;

export type RoomEventsSubscription = {
  __typename?: 'Subscription';
  roomEvents: {
    __typename?: 'RoomEventSubscriptionResult';
    roomID: string;
    room: {
      __typename?: 'Room';
      vcInteractions: Array<{
        __typename?: 'VcInteraction';
        id: string;
        threadID: string;
        virtualContributorID: string;
      }>;
    };
    message?:
      | {
          __typename?: 'RoomMessageEventSubscriptionResult';
          type: MutationType;
          data: {
            __typename?: 'Message';
            id: string;
            message: string;
            timestamp: number;
            threadID?: string | undefined;
            reactions: Array<{
              __typename?: 'Reaction';
              id: string;
              emoji: string;
              sender?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string };
                  }
                | undefined;
            }>;
            sender?:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | undefined;
          };
        }
      | undefined;
    reaction?:
      | {
          __typename?: 'RoomMessageReactionEventSubscriptionResult';
          type: MutationType;
          messageID?: string | undefined;
          data: {
            __typename?: 'Reaction';
            id: string;
            emoji: string;
            sender?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | undefined;
          };
        }
      | undefined;
  };
};

export type CommunityUpdatesQueryVariables = Exact<{
  communityId: Scalars['UUID']['input'];
}>;

export type CommunityUpdatesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    community?:
      | {
          __typename?: 'Community';
          id: string;
          communication: {
            __typename?: 'Communication';
            id: string;
            updates: {
              __typename?: 'Room';
              id: string;
              messagesCount: number;
              messages: Array<{
                __typename?: 'Message';
                id: string;
                message: string;
                timestamp: number;
                threadID?: string | undefined;
                reactions: Array<{
                  __typename?: 'Reaction';
                  id: string;
                  emoji: string;
                  sender?:
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      }
                    | undefined;
                }>;
                sender?:
                  | {
                      __typename?: 'Organization';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        description?: string | undefined;
                        avatar?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                        tagsets?:
                          | Array<{
                              __typename?: 'Tagset';
                              id: string;
                              name: string;
                              tags: Array<string>;
                              allowedValues: Array<string>;
                              type: TagsetType;
                            }>
                          | undefined;
                        location?:
                          | {
                              __typename?: 'Location';
                              id: string;
                              country?: string | undefined;
                              city?: string | undefined;
                            }
                          | undefined;
                      };
                    }
                  | {
                      __typename?: 'User';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        description?: string | undefined;
                        avatar?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                        tagsets?:
                          | Array<{
                              __typename?: 'Tagset';
                              id: string;
                              name: string;
                              tags: Array<string>;
                              allowedValues: Array<string>;
                              type: TagsetType;
                            }>
                          | undefined;
                        location?:
                          | {
                              __typename?: 'Location';
                              id: string;
                              country?: string | undefined;
                              city?: string | undefined;
                            }
                          | undefined;
                      };
                    }
                  | {
                      __typename?: 'VirtualContributor';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        description?: string | undefined;
                        avatar?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                        tagsets?:
                          | Array<{
                              __typename?: 'Tagset';
                              id: string;
                              name: string;
                              tags: Array<string>;
                              allowedValues: Array<string>;
                              type: TagsetType;
                            }>
                          | undefined;
                        location?:
                          | {
                              __typename?: 'Location';
                              id: string;
                              country?: string | undefined;
                              city?: string | undefined;
                            }
                          | undefined;
                      };
                    }
                  | undefined;
              }>;
            };
          };
        }
      | undefined;
  };
};

export type ApplicationDialogQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type ApplicationDialogQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            membership: {
              __typename?: 'SpaceAboutMembership';
              communityID: string;
              roleSetID: string;
              applicationForm: {
                __typename?: 'Form';
                id: string;
                description?: string | undefined;
                questions: Array<{
                  __typename?: 'FormQuestion';
                  required: boolean;
                  question: string;
                  sortOrder: number;
                  explanation: string;
                  maxLength: number;
                }>;
              };
            };
            guidelines: {
              __typename?: 'CommunityGuidelines';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                description?: string | undefined;
                references?:
                  | Array<{
                      __typename?: 'Reference';
                      id: string;
                      name: string;
                      uri: string;
                      description?: string | undefined;
                    }>
                  | undefined;
              };
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              tagline?: string | undefined;
              url: string;
            };
          };
        }
      | undefined;
  };
};

export type RoleSetApplicationFormQueryVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
}>;

export type RoleSetApplicationFormQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    roleSet?:
      | {
          __typename?: 'RoleSet';
          id: string;
          applicationForm: {
            __typename?: 'Form';
            id: string;
            description?: string | undefined;
            questions: Array<{
              __typename?: 'FormQuestion';
              question: string;
              explanation: string;
              maxLength: number;
              required: boolean;
              sortOrder: number;
            }>;
          };
        }
      | undefined;
  };
};

export type ApplicationFormFragment = {
  __typename?: 'Form';
  id: string;
  description?: string | undefined;
  questions: Array<{
    __typename?: 'FormQuestion';
    question: string;
    explanation: string;
    maxLength: number;
    required: boolean;
    sortOrder: number;
  }>;
};

export type UpdateApplicationFormOnRoleSetMutationVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
  formData: UpdateFormInput;
}>;

export type UpdateApplicationFormOnRoleSetMutation = {
  __typename?: 'Mutation';
  updateApplicationFormOnRoleSet: { __typename?: 'RoleSet'; id: string };
};

export type CommunityGuidelinesQueryVariables = Exact<{
  communityGuidelinesId: Scalars['UUID']['input'];
}>;

export type CommunityGuidelinesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    communityGuidelines?:
      | {
          __typename?: 'CommunityGuidelines';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type CommunityGuidelinesDetailsFragment = {
  __typename?: 'CommunityGuidelines';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
  };
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
};

export type UpdateCommunityGuidelinesMutationVariables = Exact<{
  communityGuidelinesData: UpdateCommunityGuidelinesEntityInput;
}>;

export type UpdateCommunityGuidelinesMutation = {
  __typename?: 'Mutation';
  updateCommunityGuidelines: {
    __typename?: 'CommunityGuidelines';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
    };
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type RemoveCommunityGuidelinesContentMutationVariables = Exact<{
  communityGuidelinesData: RemoveCommunityGuidelinesContentInput;
}>;

export type RemoveCommunityGuidelinesContentMutation = {
  __typename?: 'Mutation';
  removeCommunityGuidelinesContent: {
    __typename?: 'CommunityGuidelines';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
    };
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type BasicOrganizationDetailsFragment = {
  __typename?: 'Organization';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type CreateWingbackAccountMutationVariables = Exact<{
  accountID: Scalars['UUID']['input'];
}>;

export type CreateWingbackAccountMutation = { __typename?: 'Mutation'; createWingbackAccount: string };

export type ContributorTooltipQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
  includeUser?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type ContributorTooltipQuery = {
  __typename?: 'Query';
  user?: {
    __typename?: 'User';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      url: string;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      location?:
        | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
        | undefined;
      tagsets?: Array<{ __typename?: 'Tagset'; id: string; name: string; tags: Array<string> }> | undefined;
    };
  };
};

export type ContributorsPageOrganizationsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  status?: InputMaybe<OrganizationVerificationEnum>;
  filter?: InputMaybe<OrganizationFilterInput>;
}>;

export type ContributorsPageOrganizationsQuery = {
  __typename?: 'Query';
  organizationsPaginated: {
    __typename?: 'PaginatedOrganization';
    organization: Array<{
      __typename?: 'Organization';
      id: string;
      metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
      orgProfile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        visual?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
      verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
    }>;
    pageInfo: {
      __typename?: 'PageInfo';
      startCursor?: string | undefined;
      endCursor?: string | undefined;
      hasNextPage: boolean;
    };
  };
};

export type ContributorsPageUsersQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
  withTags?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type ContributorsPageUsersQuery = {
  __typename?: 'Query';
  usersPaginated: {
    __typename?: 'PaginatedUsers';
    users: Array<{
      __typename?: 'User';
      id: string;
      isContactable: boolean;
      userProfile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        url: string;
        location?: { __typename?: 'Location'; city?: string | undefined; country?: string | undefined } | undefined;
        visual?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        tagsets?:
          | Array<{
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }>
          | undefined;
      };
    }>;
    pageInfo: {
      __typename?: 'PageInfo';
      startCursor?: string | undefined;
      endCursor?: string | undefined;
      hasNextPage: boolean;
    };
  };
};

export type ContributorsVirtualInLibraryQueryVariables = Exact<{ [key: string]: never }>;

export type ContributorsVirtualInLibraryQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    library: {
      __typename?: 'Library';
      id: string;
      virtualContributors: Array<{
        __typename?: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          location?: { __typename?: 'Location'; city?: string | undefined; country?: string | undefined } | undefined;
          tagsets?:
            | Array<{
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }>
            | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }>;
    };
  };
};

export type OrganizationContributorPaginatedFragment = {
  __typename?: 'PaginatedOrganization';
  organization: Array<{
    __typename?: 'Organization';
    id: string;
    metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
    orgProfile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
    verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
  }>;
  pageInfo: {
    __typename?: 'PageInfo';
    startCursor?: string | undefined;
    endCursor?: string | undefined;
    hasNextPage: boolean;
  };
};

export type OrganizationContributorFragment = {
  __typename?: 'Organization';
  id: string;
  metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
  orgProfile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
  verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
};

export type UserContributorPaginatedFragment = {
  __typename?: 'PaginatedUsers';
  users: Array<{
    __typename?: 'User';
    id: string;
    isContactable: boolean;
    userProfile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      url: string;
      location?: { __typename?: 'Location'; city?: string | undefined; country?: string | undefined } | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
    };
  }>;
  pageInfo: {
    __typename?: 'PageInfo';
    startCursor?: string | undefined;
    endCursor?: string | undefined;
    hasNextPage: boolean;
  };
};

export type UserContributorFragment = {
  __typename?: 'User';
  id: string;
  isContactable: boolean;
  userProfile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    location?: { __typename?: 'Location'; city?: string | undefined; country?: string | undefined } | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
  };
};

type ContributorDetails_Organization_Fragment = {
  __typename?: 'Organization';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    description?: string | undefined;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    location?:
      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
      | undefined;
  };
};

type ContributorDetails_User_Fragment = {
  __typename?: 'User';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    description?: string | undefined;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    location?:
      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
      | undefined;
  };
};

type ContributorDetails_VirtualContributor_Fragment = {
  __typename?: 'VirtualContributor';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    description?: string | undefined;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    location?:
      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
      | undefined;
  };
};

export type ContributorDetailsFragment =
  | ContributorDetails_Organization_Fragment
  | ContributorDetails_User_Fragment
  | ContributorDetails_VirtualContributor_Fragment;

export type AccountResourcesInfoQueryVariables = Exact<{
  accountId: Scalars['UUID']['input'];
}>;

export type AccountResourcesInfoQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    account?:
      | {
          __typename?: 'Account';
          id: string;
          spaces: Array<{
            __typename?: 'Space';
            id: string;
            about: {
              __typename?: 'SpaceAbout';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                cardBanner?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
          }>;
          virtualContributors: Array<{
            __typename?: 'VirtualContributor';
            id: string;
            profile: {
              __typename?: 'Profile';
              tagline?: string | undefined;
              id: string;
              displayName: string;
              url: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
          innovationPacks: Array<{
            __typename?: 'InnovationPack';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            templatesSet?:
              | {
                  __typename?: 'TemplatesSet';
                  id: string;
                  calloutTemplatesCount: number;
                  spaceTemplatesCount: number;
                  communityGuidelinesTemplatesCount: number;
                  postTemplatesCount: number;
                  whiteboardTemplatesCount: number;
                }
              | undefined;
          }>;
          innovationHubs: Array<{
            __typename?: 'InnovationHub';
            id: string;
            subdomain: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              banner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
        }
      | undefined;
  };
};

export type AccountResourceProfileFragment = {
  __typename?: 'Profile';
  id: string;
  displayName: string;
  url: string;
  avatar?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
};

export type InviteUsersDialogQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type InviteUsersDialogQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string };
            membership: { __typename?: 'SpaceAboutMembership'; roleSetID: string };
          };
        }
      | undefined;
  };
};

export type AssociatedOrganizationQueryVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
}>;

export type AssociatedOrganizationQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    organization?:
      | {
          __typename?: 'Organization';
          id: string;
          roleSet: { __typename?: 'RoleSet'; id: string; myRoles: Array<RoleName> };
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            tagline?: string | undefined;
            displayName: string;
            description?: string | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagsets?: Array<{ __typename?: 'Tagset'; id: string; tags: Array<string> }> | undefined;
          };
          verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
          metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
        }
      | undefined;
  };
};

export type OrganizationInfoFragment = {
  __typename?: 'Organization';
  id: string;
  contactEmail?: string | undefined;
  domain?: string | undefined;
  website?: string | undefined;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  roleSet: { __typename?: 'RoleSet'; id: string };
  verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: string | undefined;
    tagline?: string | undefined;
    avatar?:
      | { __typename?: 'Visual'; alternativeText?: string | undefined; id: string; uri: string; name: string }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
    location?:
      | {
          __typename?: 'Location';
          id: string;
          country?: string | undefined;
          city?: string | undefined;
          addressLine1?: string | undefined;
          addressLine2?: string | undefined;
          stateOrProvince?: string | undefined;
          postalCode?: string | undefined;
        }
      | undefined;
  };
  metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
};

export type OrganizationInfoQueryVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
}>;

export type OrganizationInfoQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    organization?:
      | {
          __typename?: 'Organization';
          id: string;
          contactEmail?: string | undefined;
          domain?: string | undefined;
          website?: string | undefined;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          roleSet: { __typename?: 'RoleSet'; id: string };
          verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            description?: string | undefined;
            tagline?: string | undefined;
            avatar?:
              | { __typename?: 'Visual'; alternativeText?: string | undefined; id: string; uri: string; name: string }
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            location?:
              | {
                  __typename?: 'Location';
                  id: string;
                  country?: string | undefined;
                  city?: string | undefined;
                  addressLine1?: string | undefined;
                  addressLine2?: string | undefined;
                  stateOrProvince?: string | undefined;
                  postalCode?: string | undefined;
                }
              | undefined;
          };
          metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
        }
      | undefined;
  };
};

export type CreateOrganizationMutationVariables = Exact<{
  input: CreateOrganizationInput;
}>;

export type CreateOrganizationMutation = {
  __typename?: 'Mutation';
  createOrganization: {
    __typename?: 'Organization';
    id: string;
    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
  };
};

export type DeleteOrganizationMutationVariables = Exact<{
  input: DeleteOrganizationInput;
}>;

export type DeleteOrganizationMutation = {
  __typename?: 'Mutation';
  deleteOrganization: { __typename?: 'Organization'; id: string };
};

export type OrganizationAuthorizationQueryVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
}>;

export type OrganizationAuthorizationQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    organization?:
      | {
          __typename?: 'Organization';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type RolesOrganizationQueryVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
}>;

export type RolesOrganizationQuery = {
  __typename?: 'Query';
  rolesOrganization: {
    __typename?: 'ContributorRoles';
    id: string;
    spaces: Array<{
      __typename?: 'RolesResultSpace';
      id: string;
      roles: Array<string>;
      displayName: string;
      visibility: SpaceVisibility;
      subspaces: Array<{
        __typename?: 'RolesResultCommunity';
        id: string;
        displayName: string;
        roles: Array<string>;
        level: SpaceLevel;
      }>;
    }>;
  };
};

export type OrganizationAccountQueryVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
}>;

export type OrganizationAccountQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    organization?:
      | {
          __typename?: 'Organization';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string };
          account?: { __typename?: 'Account'; id: string } | undefined;
        }
      | undefined;
  };
};

export type OrganizationProfileInfoQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type OrganizationProfileInfoQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    organization?:
      | {
          __typename?: 'Organization';
          id: string;
          nameID: string;
          contactEmail?: string | undefined;
          domain?: string | undefined;
          legalEntityName?: string | undefined;
          website?: string | undefined;
          verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            description?: string | undefined;
            tagline?: string | undefined;
            visuals: Array<{
              __typename?: 'Visual';
              id: string;
              uri: string;
              name: string;
              allowedTypes: Array<string>;
              aspectRatio: number;
              maxHeight: number;
              maxWidth: number;
              minHeight: number;
              minWidth: number;
              alternativeText?: string | undefined;
            }>;
            location?:
              | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | undefined;
  };
};

export type OrganizationProfileInfoFragment = {
  __typename?: 'Organization';
  id: string;
  nameID: string;
  contactEmail?: string | undefined;
  domain?: string | undefined;
  legalEntityName?: string | undefined;
  website?: string | undefined;
  verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: string | undefined;
    tagline?: string | undefined;
    visuals: Array<{
      __typename?: 'Visual';
      id: string;
      uri: string;
      name: string;
      allowedTypes: Array<string>;
      aspectRatio: number;
      maxHeight: number;
      maxWidth: number;
      minHeight: number;
      minWidth: number;
      alternativeText?: string | undefined;
    }>;
    location?:
      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
  };
};

export type OrganizationSettingsQueryVariables = Exact<{
  orgId: Scalars['UUID']['input'];
}>;

export type OrganizationSettingsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    organization?:
      | {
          __typename?: 'Organization';
          id: string;
          settings: {
            __typename?: 'OrganizationSettings';
            membership: { __typename?: 'OrganizationSettingsMembership'; allowUsersMatchingDomainToJoin: boolean };
            privacy: { __typename?: 'OrganizationSettingsPrivacy'; contributionRolesPubliclyVisible: boolean };
          };
        }
      | undefined;
  };
};

export type UpdateOrganizationMutationVariables = Exact<{
  input: UpdateOrganizationInput;
}>;

export type UpdateOrganizationMutation = {
  __typename?: 'Mutation';
  updateOrganization: {
    __typename?: 'Organization';
    id: string;
    nameID: string;
    contactEmail?: string | undefined;
    domain?: string | undefined;
    legalEntityName?: string | undefined;
    website?: string | undefined;
    verification: { __typename?: 'OrganizationVerification'; id: string; status: OrganizationVerificationEnum };
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      description?: string | undefined;
      tagline?: string | undefined;
      visuals: Array<{
        __typename?: 'Visual';
        id: string;
        uri: string;
        name: string;
        allowedTypes: Array<string>;
        aspectRatio: number;
        maxHeight: number;
        maxWidth: number;
        minHeight: number;
        minWidth: number;
        alternativeText?: string | undefined;
      }>;
      location?:
        | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
    };
  };
};

export type UpdateOrganizationSettingsMutationVariables = Exact<{
  settingsData: UpdateOrganizationSettingsInput;
}>;

export type UpdateOrganizationSettingsMutation = {
  __typename?: 'Mutation';
  updateOrganizationSettings: {
    __typename?: 'Organization';
    id: string;
    settings: {
      __typename?: 'OrganizationSettings';
      membership: { __typename?: 'OrganizationSettingsMembership'; allowUsersMatchingDomainToJoin: boolean };
    };
  };
};

export type PendingInvitationsCountQueryVariables = Exact<{ [key: string]: never }>;

export type PendingInvitationsCountQuery = {
  __typename?: 'Query';
  me: { __typename?: 'MeQueryResults'; communityInvitationsCount: number };
};

export type PendingMembershipsSpaceQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
  includeCommunityGuidelines?: Scalars['Boolean']['input'];
}>;

export type PendingMembershipsSpaceQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              tagline?: string | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
            };
            guidelines?: {
              __typename?: 'CommunityGuidelines';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                description?: string | undefined;
                references?:
                  | Array<{
                      __typename?: 'Reference';
                      id: string;
                      name: string;
                      uri: string;
                      description?: string | undefined;
                    }>
                  | undefined;
              };
            };
          };
        }
      | undefined;
  };
};

export type PendingMembershipsUserQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
}>;

export type PendingMembershipsUserQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    user?:
      | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
      | undefined;
  };
};

export type PendingMembershipsMembershipsFragment = {
  __typename?: 'Community';
  id: string;
  roleSet: {
    __typename?: 'RoleSet';
    applications: Array<{ __typename?: 'Application'; id: string }>;
    invitations: Array<{
      __typename?: 'Invitation';
      id: string;
      welcomeMessage?: string | undefined;
      createdBy?:
        | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
        | undefined;
    }>;
  };
};

export type PendingMembershipInvitationFragment = {
  __typename?: 'Invitation';
  id: string;
  welcomeMessage?: string | undefined;
  createdBy?:
    | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
    | undefined;
};

export type CommunityGuidelinesSummaryFragment = {
  __typename?: 'CommunityGuidelines';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
  };
};

export type SpaceContributionDetailsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceContributionDetailsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              tagline?: string | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
            };
            membership: { __typename?: 'SpaceAboutMembership'; roleSetID: string; communityID: string };
          };
        }
      | undefined;
  };
};

export type UserSelectorQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
}>;

export type UserSelectorQuery = {
  __typename?: 'Query';
  usersPaginated: {
    __typename?: 'PaginatedUsers';
    users: Array<{
      __typename?: 'User';
      id: string;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        location?:
          | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
          | undefined;
        visual?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
    }>;
    pageInfo: {
      __typename?: 'PageInfo';
      startCursor?: string | undefined;
      endCursor?: string | undefined;
      hasNextPage: boolean;
    };
  };
};

export type UserSelectorUserDetailsQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type UserSelectorUserDetailsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    user?:
      | {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
            visual?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        }
      | undefined;
  };
};

export type UserSelectorUserInformationFragment = {
  __typename?: 'User';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    location?:
      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
      | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type UserDetailsFragment = {
  __typename?: 'User';
  id: string;
  firstName: string;
  lastName: string;
  email: string;
  phone?: string | undefined;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    tagline?: string | undefined;
    description?: string | undefined;
    url: string;
    location?:
      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
      | undefined;
    avatar?:
      | {
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
  };
};

export type UserDisplayNameFragment = {
  __typename?: 'User';
  id: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string };
};

export type CreateUserNewRegistrationMutationVariables = Exact<{ [key: string]: never }>;

export type CreateUserNewRegistrationMutation = {
  __typename?: 'Mutation';
  createUserNewRegistration: { __typename?: 'User'; id: string };
};

export type DeleteUserMutationVariables = Exact<{
  input: DeleteUserInput;
}>;

export type DeleteUserMutation = { __typename?: 'Mutation'; deleteUser: { __typename?: 'User'; id: string } };

export type UserAccountQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
}>;

export type UserAccountQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    user?:
      | {
          __typename?: 'User';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string };
          agent: {
            __typename?: 'Agent';
            id: string;
            credentials?: Array<{ __typename?: 'Credential'; id: string; type: CredentialType }> | undefined;
          };
          account?: { __typename?: 'Account'; id: string } | undefined;
        }
      | undefined;
  };
};

export type UserQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type UserQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    user?:
      | {
          __typename?: 'User';
          id: string;
          firstName: string;
          lastName: string;
          email: string;
          phone?: string | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            description?: string | undefined;
            url: string;
            location?:
              | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
              | undefined;
            avatar?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | undefined;
  };
};

export type UserModelFullQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
}>;

export type UserModelFullQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    user?:
      | {
          __typename?: 'User';
          isContactable: boolean;
          id: string;
          firstName: string;
          lastName: string;
          email: string;
          phone?: string | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            description?: string | undefined;
            url: string;
            location?:
              | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
              | undefined;
            avatar?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | undefined;
  };
};

export type UsersModelFullQueryVariables = Exact<{
  ids: Array<Scalars['UUID']['input']> | Scalars['UUID']['input'];
}>;

export type UsersModelFullQuery = {
  __typename?: 'Query';
  users: Array<{
    __typename?: 'User';
    isContactable: boolean;
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    phone?: string | undefined;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      tagline?: string | undefined;
      description?: string | undefined;
      url: string;
      location?:
        | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
        | undefined;
      avatar?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
    };
  }>;
};

export type UserContributionsQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
}>;

export type UserContributionsQuery = {
  __typename?: 'Query';
  rolesUser: {
    __typename?: 'ContributorRoles';
    id: string;
    spaces: Array<{
      __typename?: 'RolesResultSpace';
      id: string;
      roles: Array<string>;
      subspaces: Array<{ __typename?: 'RolesResultCommunity'; id: string; level: SpaceLevel; roles: Array<string> }>;
    }>;
  };
};

export type UserOrganizationIdsQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
}>;

export type UserOrganizationIdsQuery = {
  __typename?: 'Query';
  rolesUser: {
    __typename?: 'ContributorRoles';
    id: string;
    organizations: Array<{ __typename?: 'RolesResultOrganization'; id: string }>;
  };
};

export type UpdateUserMutationVariables = Exact<{
  input: UpdateUserInput;
}>;

export type UpdateUserMutation = {
  __typename?: 'Mutation';
  updateUser: {
    __typename?: 'User';
    id: string;
    firstName: string;
    lastName: string;
    email: string;
    phone?: string | undefined;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      tagline?: string | undefined;
      description?: string | undefined;
      url: string;
      location?:
        | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
        | undefined;
      avatar?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
    };
  };
};

export type UpdateUserSettingsMutationVariables = Exact<{
  settingsData: UpdateUserSettingsInput;
}>;

export type UpdateUserSettingsMutation = {
  __typename?: 'Mutation';
  updateUserSettings: {
    __typename?: 'User';
    id: string;
    settings: {
      __typename?: 'UserSettings';
      id: string;
      communication: { __typename?: 'UserSettingsCommunication'; allowOtherUsersToSendMessages: boolean };
      privacy: { __typename?: 'UserSettingsPrivacy'; contributionRolesPubliclyVisible: boolean };
      notification: {
        __typename?: 'UserSettingsNotification';
        platform: {
          __typename?: 'UserSettingsNotificationPlatform';
          admin: {
            __typename?: 'UserSettingsNotificationPlatformAdmin';
            userProfileRemoved: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
            userProfileCreated: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
            spaceCreated: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
            userGlobalRoleChanged: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
          };
          forumDiscussionComment: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
          forumDiscussionCreated: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
        };
        organization: {
          __typename?: 'UserSettingsNotificationOrganization';
          adminMentioned: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
          adminMessageReceived: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
        };
        space: {
          __typename?: 'UserSettingsNotificationSpace';
          admin: {
            __typename?: 'UserSettingsNotificationSpaceAdmin';
            communityApplicationReceived: {
              __typename?: 'UserSettingsNotificationChannels';
              email: boolean;
              inApp: boolean;
            };
            collaborationCalloutContributionCreated: {
              __typename?: 'UserSettingsNotificationChannels';
              email: boolean;
              inApp: boolean;
            };
            communityNewMember: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
            communicationMessageReceived: {
              __typename?: 'UserSettingsNotificationChannels';
              email: boolean;
              inApp: boolean;
            };
          };
          collaborationCalloutContributionCreated: {
            __typename?: 'UserSettingsNotificationChannels';
            email: boolean;
            inApp: boolean;
          };
          communicationUpdates: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
          collaborationCalloutPublished: {
            __typename?: 'UserSettingsNotificationChannels';
            email: boolean;
            inApp: boolean;
          };
          collaborationCalloutComment: {
            __typename?: 'UserSettingsNotificationChannels';
            email: boolean;
            inApp: boolean;
          };
          collaborationCalloutPostContributionComment: {
            __typename?: 'UserSettingsNotificationChannels';
            email: boolean;
            inApp: boolean;
          };
        };
        user: {
          __typename?: 'UserSettingsNotificationUser';
          membership: {
            __typename?: 'UserSettingsNotificationUserMembership';
            spaceCommunityInvitationReceived: {
              __typename?: 'UserSettingsNotificationChannels';
              email: boolean;
              inApp: boolean;
            };
            spaceCommunityJoined: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
            spaceCommunityApplicationSubmitted: {
              __typename?: 'UserSettingsNotificationChannels';
              email: boolean;
              inApp: boolean;
            };
          };
          mentioned: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
          commentReply: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
          messageReceived: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
          copyOfMessageSent: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
        };
        virtualContributor: {
          __typename?: 'UserSettingsNotificationVirtualContributor';
          adminSpaceCommunityInvitation: {
            __typename?: 'UserSettingsNotificationChannels';
            email: boolean;
            inApp: boolean;
          };
        };
      };
    };
  };
};

export type UserSettingsFragmentFragment = {
  __typename?: 'UserSettings';
  id: string;
  communication: { __typename?: 'UserSettingsCommunication'; allowOtherUsersToSendMessages: boolean };
  privacy: { __typename?: 'UserSettingsPrivacy'; contributionRolesPubliclyVisible: boolean };
  notification: {
    __typename?: 'UserSettingsNotification';
    platform: {
      __typename?: 'UserSettingsNotificationPlatform';
      admin: {
        __typename?: 'UserSettingsNotificationPlatformAdmin';
        userProfileRemoved: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
        userProfileCreated: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
        spaceCreated: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
        userGlobalRoleChanged: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
      };
      forumDiscussionComment: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
      forumDiscussionCreated: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
    };
    organization: {
      __typename?: 'UserSettingsNotificationOrganization';
      adminMentioned: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
      adminMessageReceived: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
    };
    space: {
      __typename?: 'UserSettingsNotificationSpace';
      admin: {
        __typename?: 'UserSettingsNotificationSpaceAdmin';
        communityApplicationReceived: {
          __typename?: 'UserSettingsNotificationChannels';
          email: boolean;
          inApp: boolean;
        };
        collaborationCalloutContributionCreated: {
          __typename?: 'UserSettingsNotificationChannels';
          email: boolean;
          inApp: boolean;
        };
        communityNewMember: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
        communicationMessageReceived: {
          __typename?: 'UserSettingsNotificationChannels';
          email: boolean;
          inApp: boolean;
        };
      };
      collaborationCalloutContributionCreated: {
        __typename?: 'UserSettingsNotificationChannels';
        email: boolean;
        inApp: boolean;
      };
      communicationUpdates: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
      collaborationCalloutPublished: {
        __typename?: 'UserSettingsNotificationChannels';
        email: boolean;
        inApp: boolean;
      };
      collaborationCalloutComment: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
      collaborationCalloutPostContributionComment: {
        __typename?: 'UserSettingsNotificationChannels';
        email: boolean;
        inApp: boolean;
      };
    };
    user: {
      __typename?: 'UserSettingsNotificationUser';
      membership: {
        __typename?: 'UserSettingsNotificationUserMembership';
        spaceCommunityInvitationReceived: {
          __typename?: 'UserSettingsNotificationChannels';
          email: boolean;
          inApp: boolean;
        };
        spaceCommunityJoined: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
        spaceCommunityApplicationSubmitted: {
          __typename?: 'UserSettingsNotificationChannels';
          email: boolean;
          inApp: boolean;
        };
      };
      mentioned: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
      commentReply: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
      messageReceived: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
      copyOfMessageSent: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
    };
    virtualContributor: {
      __typename?: 'UserSettingsNotificationVirtualContributor';
      adminSpaceCommunityInvitation: {
        __typename?: 'UserSettingsNotificationChannels';
        email: boolean;
        inApp: boolean;
      };
    };
  };
};

export type UserSettingsQueryVariables = Exact<{
  userID: Scalars['UUID']['input'];
}>;

export type UserSettingsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    user?:
      | {
          __typename?: 'User';
          id: string;
          settings: {
            __typename?: 'UserSettings';
            id: string;
            communication: { __typename?: 'UserSettingsCommunication'; allowOtherUsersToSendMessages: boolean };
            privacy: { __typename?: 'UserSettingsPrivacy'; contributionRolesPubliclyVisible: boolean };
            notification: {
              __typename?: 'UserSettingsNotification';
              platform: {
                __typename?: 'UserSettingsNotificationPlatform';
                admin: {
                  __typename?: 'UserSettingsNotificationPlatformAdmin';
                  userProfileRemoved: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                  userProfileCreated: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                  spaceCreated: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
                  userGlobalRoleChanged: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                };
                forumDiscussionComment: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
                forumDiscussionCreated: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
              };
              organization: {
                __typename?: 'UserSettingsNotificationOrganization';
                adminMentioned: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
                adminMessageReceived: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
              };
              space: {
                __typename?: 'UserSettingsNotificationSpace';
                admin: {
                  __typename?: 'UserSettingsNotificationSpaceAdmin';
                  communityApplicationReceived: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                  collaborationCalloutContributionCreated: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                  communityNewMember: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                  communicationMessageReceived: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                };
                collaborationCalloutContributionCreated: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
                communicationUpdates: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
                collaborationCalloutPublished: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
                collaborationCalloutComment: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
                collaborationCalloutPostContributionComment: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
              };
              user: {
                __typename?: 'UserSettingsNotificationUser';
                membership: {
                  __typename?: 'UserSettingsNotificationUserMembership';
                  spaceCommunityInvitationReceived: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                  spaceCommunityJoined: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                  spaceCommunityApplicationSubmitted: {
                    __typename?: 'UserSettingsNotificationChannels';
                    email: boolean;
                    inApp: boolean;
                  };
                };
                mentioned: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
                commentReply: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
                messageReceived: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
                copyOfMessageSent: { __typename?: 'UserSettingsNotificationChannels'; email: boolean; inApp: boolean };
              };
              virtualContributor: {
                __typename?: 'UserSettingsNotificationVirtualContributor';
                adminSpaceCommunityInvitation: {
                  __typename?: 'UserSettingsNotificationChannels';
                  email: boolean;
                  inApp: boolean;
                };
              };
            };
          };
        }
      | undefined;
  };
};

export type CurrentUserFullQueryVariables = Exact<{ [key: string]: never }>;

export type CurrentUserFullQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    user?:
      | {
          __typename?: 'User';
          id: string;
          firstName: string;
          lastName: string;
          email: string;
          phone?: string | undefined;
          account?:
            | {
                __typename?: 'Account';
                id: string;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
                license: {
                  __typename?: 'License';
                  id: string;
                  availableEntitlements?: Array<LicenseEntitlementType> | undefined;
                };
              }
            | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            description?: string | undefined;
            url: string;
            location?:
              | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
              | undefined;
            avatar?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | undefined;
  };
};

export type InvitationDataFragment = {
  __typename?: 'CommunityInvitationResult';
  id: string;
  spacePendingMembershipInfo: {
    __typename?: 'SpacePendingMembershipInfo';
    id: string;
    level: SpaceLevel;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; tagline?: string | undefined; url: string };
    };
  };
  invitation: {
    __typename?: 'Invitation';
    id: string;
    welcomeMessage?: string | undefined;
    state: string;
    createdDate: Date;
    contributorType: RoleSetContributorType;
    createdBy?: { __typename?: 'User'; id: string } | undefined;
    contributor:
      | { __typename?: 'Organization'; id: string }
      | { __typename?: 'User'; id: string }
      | { __typename?: 'VirtualContributor'; id: string };
  };
};

export type EntitlementDetailsFragment = {
  __typename?: 'LicenseEntitlement';
  id: string;
  type: LicenseEntitlementType;
  limit: number;
  usage: number;
  isAvailable: boolean;
  dataType: LicenseEntitlementDataType;
  enabled: boolean;
};

export type CommunityAvailableVCsQueryVariables = Exact<{
  roleSetId: Scalars['UUID']['input'];
}>;

export type CommunityAvailableVCsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    roleSet?:
      | {
          __typename?: 'RoleSet';
          virtualContributorsInRoleInHierarchy: Array<{
            __typename?: 'VirtualContributor';
            id: string;
            searchVisibility: SearchVisibility;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
        }
      | undefined;
  };
};

export type AiPersonaServiceQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type AiPersonaServiceQuery = {
  __typename?: 'Query';
  aiServer: {
    __typename?: 'AiServer';
    aiPersonaService: {
      __typename?: 'AiPersonaService';
      id: string;
      prompt: Array<string>;
      engine: AiPersonaEngine;
      externalConfig?:
        | {
            __typename?: 'ExternalConfig';
            apiKey?: string | undefined;
            assistantId?: string | undefined;
            model: OpenAiModel;
          }
        | undefined;
    };
  };
};

export type VirtualContributorQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type VirtualContributorQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    virtualContributor?:
      | {
          __typename?: 'VirtualContributor';
          id: string;
          searchVisibility: SearchVisibility;
          listedInStore: boolean;
          status: VirtualContributorStatus;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          settings: {
            __typename?: 'VirtualContributorSettings';
            privacy: { __typename?: 'VirtualContributorSettingsPrivacy'; knowledgeBaseContentVisible: boolean };
          };
          aiPersona?:
            | {
                __typename?: 'AiPersona';
                id: string;
                bodyOfKnowledgeID?: string | undefined;
                bodyOfKnowledgeType?: AiPersonaBodyOfKnowledgeType | undefined;
                bodyOfKnowledge?: string | undefined;
                engine: AiPersonaEngine;
                aiPersonaServiceID?: string | undefined;
              }
            | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            tagline?: string | undefined;
            url: string;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
            avatar?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
          };
        }
      | undefined;
  };
};

export type VirtualContributorProfileQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type VirtualContributorProfileQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    virtualContributor?:
      | {
          __typename?: 'VirtualContributor';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            url: string;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
          };
        }
      | undefined;
  };
};

export type VirtualContributorProviderQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type VirtualContributorProviderQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    virtualContributor?:
      | {
          __typename?: 'VirtualContributor';
          id: string;
          provider:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | { __typename?: 'Location'; country?: string | undefined; city?: string | undefined }
                    | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagsets?: Array<{ __typename?: 'Tagset'; id: string; tags: Array<string> }> | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | { __typename?: 'Location'; country?: string | undefined; city?: string | undefined }
                    | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagsets?: Array<{ __typename?: 'Tagset'; id: string; tags: Array<string> }> | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | { __typename?: 'Location'; country?: string | undefined; city?: string | undefined }
                    | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagsets?: Array<{ __typename?: 'Tagset'; id: string; tags: Array<string> }> | undefined;
                };
              };
        }
      | undefined;
  };
};

export type SpaceBodyOfKnowledgeAuthorizationPrivilegesQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceBodyOfKnowledgeAuthorizationPrivilegesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    myPrivileges?:
      | { __typename?: 'LookupMyPrivilegesQueryResults'; space?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type SpaceBodyOfKnowledgeAboutQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceBodyOfKnowledgeAboutQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              communityID: string;
              roleSetID: string;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
        }
      | undefined;
  };
};

export type VirtualContributorProfileWithModelCardQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type VirtualContributorProfileWithModelCardQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    virtualContributor?:
      | {
          __typename?: 'VirtualContributor';
          id: string;
          searchVisibility: SearchVisibility;
          listedInStore: boolean;
          status: VirtualContributorStatus;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          settings: {
            __typename?: 'VirtualContributorSettings';
            privacy: { __typename?: 'VirtualContributorSettingsPrivacy'; knowledgeBaseContentVisible: boolean };
          };
          aiPersona?:
            | {
                __typename?: 'AiPersona';
                id: string;
                bodyOfKnowledgeID?: string | undefined;
                bodyOfKnowledgeType?: AiPersonaBodyOfKnowledgeType | undefined;
                bodyOfKnowledge?: string | undefined;
                engine: AiPersonaEngine;
                aiPersonaServiceID?: string | undefined;
                modelCard: {
                  __typename?: 'AiPersonaModelCard';
                  spaceUsage?:
                    | Array<{
                        __typename?: 'ModelCardSpaceUsageResult';
                        modelCardEntry: AiPersonaModelCardEntry;
                        flags: Array<{
                          __typename?: 'AiPersonaModelCardFlag';
                          name: AiPersonaModelCardEntryFlagName;
                          enabled: boolean;
                        }>;
                      }>
                    | undefined;
                  aiEngine?:
                    | {
                        __typename?: 'ModelCardAiEngineResult';
                        isExternal: boolean;
                        hostingLocation: string;
                        isUsingOpenWeightsModel: boolean;
                        isInteractionDataUsedForTraining?: boolean | undefined;
                        canAccessWebWhenAnswering: boolean;
                        areAnswersRestrictedToBodyOfKnowledge: string;
                        additionalTechnicalDetails: string;
                      }
                    | undefined;
                  monitoring?:
                    | { __typename?: 'ModelCardMonitoringResult'; isUsageMonitoredByAlkemio: boolean }
                    | undefined;
                };
              }
            | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            tagline?: string | undefined;
            url: string;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
          };
          provider:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  tagline?: string | undefined;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  tagline?: string | undefined;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  tagline?: string | undefined;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
        }
      | undefined;
  };
};

export type AiPersonaWithModelCardFragment = {
  __typename?: 'AiPersona';
  id: string;
  bodyOfKnowledgeID?: string | undefined;
  bodyOfKnowledgeType?: AiPersonaBodyOfKnowledgeType | undefined;
  bodyOfKnowledge?: string | undefined;
  engine: AiPersonaEngine;
  aiPersonaServiceID?: string | undefined;
  modelCard: {
    __typename?: 'AiPersonaModelCard';
    spaceUsage?:
      | Array<{
          __typename?: 'ModelCardSpaceUsageResult';
          modelCardEntry: AiPersonaModelCardEntry;
          flags: Array<{
            __typename?: 'AiPersonaModelCardFlag';
            name: AiPersonaModelCardEntryFlagName;
            enabled: boolean;
          }>;
        }>
      | undefined;
    aiEngine?:
      | {
          __typename?: 'ModelCardAiEngineResult';
          isExternal: boolean;
          hostingLocation: string;
          isUsingOpenWeightsModel: boolean;
          isInteractionDataUsedForTraining?: boolean | undefined;
          canAccessWebWhenAnswering: boolean;
          areAnswersRestrictedToBodyOfKnowledge: string;
          additionalTechnicalDetails: string;
        }
      | undefined;
    monitoring?: { __typename?: 'ModelCardMonitoringResult'; isUsageMonitoredByAlkemio: boolean } | undefined;
  };
};

export type VirtualContributorFullFragment = {
  __typename?: 'VirtualContributor';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    location?:
      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
  };
  aiPersona?:
    | {
        __typename?: 'AiPersona';
        id: string;
        bodyOfKnowledgeID?: string | undefined;
        bodyOfKnowledgeType?: AiPersonaBodyOfKnowledgeType | undefined;
        bodyOfKnowledge?: string | undefined;
        engine: AiPersonaEngine;
        aiPersonaServiceID?: string | undefined;
        modelCard: {
          __typename?: 'AiPersonaModelCard';
          spaceUsage?:
            | Array<{
                __typename?: 'ModelCardSpaceUsageResult';
                modelCardEntry: AiPersonaModelCardEntry;
                flags: Array<{
                  __typename?: 'AiPersonaModelCardFlag';
                  name: AiPersonaModelCardEntryFlagName;
                  enabled: boolean;
                }>;
              }>
            | undefined;
          aiEngine?:
            | {
                __typename?: 'ModelCardAiEngineResult';
                isExternal: boolean;
                hostingLocation: string;
                isUsingOpenWeightsModel: boolean;
                isInteractionDataUsedForTraining?: boolean | undefined;
                canAccessWebWhenAnswering: boolean;
                areAnswersRestrictedToBodyOfKnowledge: string;
                additionalTechnicalDetails: string;
              }
            | undefined;
          monitoring?: { __typename?: 'ModelCardMonitoringResult'; isUsageMonitoredByAlkemio: boolean } | undefined;
        };
      }
    | undefined;
};

export type UpdateAiPersonaServiceMutationVariables = Exact<{
  aiPersonaServiceData: UpdateAiPersonaServiceInput;
}>;

export type UpdateAiPersonaServiceMutation = {
  __typename?: 'Mutation';
  aiServerUpdateAiPersonaService: { __typename?: 'AiPersonaService'; id: string; prompt: Array<string> };
};

export type RefreshBodyOfKnowledgeMutationVariables = Exact<{
  refreshData: RefreshVirtualContributorBodyOfKnowledgeInput;
}>;

export type RefreshBodyOfKnowledgeMutation = {
  __typename?: 'Mutation';
  refreshVirtualContributorBodyOfKnowledge: boolean;
};

export type UpdateVirtualContributorMutationVariables = Exact<{
  virtualContributorData: UpdateVirtualContributorInput;
}>;

export type UpdateVirtualContributorMutation = {
  __typename?: 'Mutation';
  updateVirtualContributor: {
    __typename?: 'VirtualContributor';
    id: string;
    listedInStore: boolean;
    status: VirtualContributorStatus;
    searchVisibility: SearchVisibility;
    settings: {
      __typename?: 'VirtualContributorSettings';
      privacy: { __typename?: 'VirtualContributorSettingsPrivacy'; knowledgeBaseContentVisible: boolean };
    };
    profile: {
      __typename?: 'Profile';
      id: string;
      tagline?: string | undefined;
      displayName: string;
      description?: string | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
    };
  };
};

export type UpdateVirtualContributorSettingsMutationVariables = Exact<{
  settingsData: UpdateVirtualContributorSettingsInput;
}>;

export type UpdateVirtualContributorSettingsMutation = {
  __typename?: 'Mutation';
  updateVirtualContributorSettings: {
    __typename?: 'VirtualContributor';
    id: string;
    listedInStore: boolean;
    status: VirtualContributorStatus;
    searchVisibility: SearchVisibility;
    settings: {
      __typename?: 'VirtualContributorSettings';
      privacy: { __typename?: 'VirtualContributorSettingsPrivacy'; knowledgeBaseContentVisible: boolean };
    };
    profile: {
      __typename?: 'Profile';
      id: string;
      tagline?: string | undefined;
      displayName: string;
      description?: string | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
    };
  };
};

export type VirtualContributorUpdatesSubscriptionVariables = Exact<{
  virtualContributorID: Scalars['UUID']['input'];
}>;

export type VirtualContributorUpdatesSubscription = {
  __typename?: 'Subscription';
  virtualContributorUpdated: {
    __typename?: 'VirtualContributorUpdatedSubscriptionResult';
    virtualContributor: { __typename?: 'VirtualContributor'; id: string; status: VirtualContributorStatus };
  };
};

export type VirtualContributorKnowledgeBaseLastUpdatedQueryVariables = Exact<{
  aiPersonaServiceID: Scalars['UUID']['input'];
}>;

export type VirtualContributorKnowledgeBaseLastUpdatedQuery = {
  __typename?: 'Query';
  aiServer: {
    __typename?: 'AiServer';
    aiPersonaService: { __typename?: 'AiPersonaService'; bodyOfKnowledgeLastUpdated?: Date | undefined };
  };
};

export type VirtualContributorKnowledgeBaseQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type VirtualContributorKnowledgeBaseQuery = {
  __typename?: 'Query';
  virtualContributor: {
    __typename?: 'VirtualContributor';
    id: string;
    knowledgeBase?:
      | {
          __typename?: 'KnowledgeBase';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
          calloutsSet: { __typename?: 'CalloutsSet'; id: string };
        }
      | undefined;
  };
};

export type VirtualContributorKnowledgePrivilegesQueryVariables = Exact<{
  id: Scalars['UUID']['input'];
}>;

export type VirtualContributorKnowledgePrivilegesQuery = {
  __typename?: 'Query';
  virtualContributor: {
    __typename?: 'VirtualContributor';
    id: string;
    knowledgeBase?:
      | {
          __typename?: 'KnowledgeBase';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type VcMembershipsQueryVariables = Exact<{
  virtualContributorId: Scalars['UUID']['input'];
}>;

export type VcMembershipsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    virtualContributor?:
      | {
          __typename?: 'VirtualContributor';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
  rolesVirtualContributor: {
    __typename?: 'ContributorRoles';
    spaces: Array<{
      __typename?: 'RolesResultSpace';
      id: string;
      subspaces: Array<{ __typename?: 'RolesResultCommunity'; id: string; level: SpaceLevel }>;
    }>;
  };
  me: {
    __typename?: 'MeQueryResults';
    id: string;
    communityInvitations: Array<{
      __typename?: 'CommunityInvitationResult';
      id: string;
      spacePendingMembershipInfo: {
        __typename?: 'SpacePendingMembershipInfo';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            url: string;
          };
        };
      };
      invitation: {
        __typename?: 'Invitation';
        id: string;
        welcomeMessage?: string | undefined;
        state: string;
        createdDate: Date;
        contributorType: RoleSetContributorType;
        createdBy?: { __typename?: 'User'; id: string } | undefined;
        contributor:
          | { __typename?: 'Organization'; id: string }
          | { __typename?: 'User'; id: string }
          | { __typename?: 'VirtualContributor'; id: string };
      };
    }>;
  };
};

export type BannerInnovationHubQueryVariables = Exact<{
  subdomain?: InputMaybe<Scalars['String']['input']>;
}>;

export type BannerInnovationHubQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    innovationHub?:
      | {
          __typename?: 'InnovationHub';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string };
          spaceListFilter?: Array<{ __typename?: 'Space'; id: string }> | undefined;
        }
      | undefined;
  };
};

export type InnovationHubBannerWideQueryVariables = Exact<{ [key: string]: never }>;

export type InnovationHubBannerWideQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    innovationHub?:
      | {
          __typename?: 'InnovationHub';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            bannerWide?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        }
      | undefined;
  };
};

export type DashboardSpacesQueryVariables = Exact<{
  visibilities?: InputMaybe<Array<SpaceVisibility> | SpaceVisibility>;
}>;

export type DashboardSpacesQuery = {
  __typename?: 'Query';
  spaces: Array<{
    __typename?: 'Space';
    id: string;
    visibility: SpaceVisibility;
    about: {
      __typename?: 'SpaceAbout';
      why?: string | undefined;
      isContentPublic: boolean;
      id: string;
      metrics?: Array<{ __typename?: 'NVP'; name: string; value: string }> | undefined;
      membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        tagline?: string | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
      };
    };
  }>;
};

export type DeleteInnovationHubMutationVariables = Exact<{
  innovationHubId: Scalars['UUID']['input'];
}>;

export type DeleteInnovationHubMutation = {
  __typename?: 'Mutation';
  deleteInnovationHub: { __typename?: 'InnovationHub'; id: string };
};

export type CreateInnovationHubMutationVariables = Exact<{
  hubData: CreateInnovationHubOnAccountInput;
}>;

export type CreateInnovationHubMutation = {
  __typename?: 'Mutation';
  createInnovationHub: {
    __typename?: 'InnovationHub';
    id: string;
    subdomain: string;
    spaceVisibilityFilter?: SpaceVisibility | undefined;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      tagline?: string | undefined;
      url: string;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      visual?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
    };
    spaceListFilter?:
      | Array<{
          __typename?: 'Space';
          id: string;
          visibility: SpaceVisibility;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            provider:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              tagline?: string | undefined;
              url: string;
            };
          };
        }>
      | undefined;
  };
};

export type UpdateInnovationHubMutationVariables = Exact<{
  hubData: UpdateInnovationHubInput;
}>;

export type UpdateInnovationHubMutation = {
  __typename?: 'Mutation';
  updateInnovationHub: {
    __typename?: 'InnovationHub';
    id: string;
    subdomain: string;
    spaceVisibilityFilter?: SpaceVisibility | undefined;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      tagline?: string | undefined;
      url: string;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      visual?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
    };
    spaceListFilter?:
      | Array<{
          __typename?: 'Space';
          id: string;
          visibility: SpaceVisibility;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            provider:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              tagline?: string | undefined;
              url: string;
            };
          };
        }>
      | undefined;
  };
};

export type InnovationHubAvailableSpacesQueryVariables = Exact<{ [key: string]: never }>;

export type InnovationHubAvailableSpacesQuery = {
  __typename?: 'Query';
  spaces: Array<{
    __typename?: 'Space';
    id: string;
    visibility: SpaceVisibility;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      provider:
        | {
            __typename?: 'Organization';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string };
          }
        | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
        | {
            __typename?: 'VirtualContributor';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string };
          };
      profile: { __typename?: 'Profile'; id: string; displayName: string; tagline?: string | undefined; url: string };
    };
  }>;
};

export type InnovationHubSpaceFragment = {
  __typename?: 'Space';
  id: string;
  visibility: SpaceVisibility;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    provider:
      | {
          __typename?: 'Organization';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string };
        }
      | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
      | {
          __typename?: 'VirtualContributor';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string };
        };
    profile: { __typename?: 'Profile'; id: string; displayName: string; tagline?: string | undefined; url: string };
  };
};

export type InnovationHubProfileFragment = {
  __typename?: 'Profile';
  id: string;
  displayName: string;
  description?: string | undefined;
  tagline?: string | undefined;
  url: string;
  tagset?:
    | {
        __typename?: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: TagsetType;
      }
    | undefined;
  visual?:
    | {
        __typename?: 'Visual';
        id: string;
        uri: string;
        name: string;
        allowedTypes: Array<string>;
        aspectRatio: number;
        maxHeight: number;
        maxWidth: number;
        minHeight: number;
        minWidth: number;
        alternativeText?: string | undefined;
      }
    | undefined;
};

export type InnovationHubSettingsQueryVariables = Exact<{
  innovationHubId: Scalars['UUID']['input'];
}>;

export type InnovationHubSettingsQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    innovationHub?:
      | {
          __typename?: 'InnovationHub';
          id: string;
          subdomain: string;
          spaceVisibilityFilter?: SpaceVisibility | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            tagline?: string | undefined;
            url: string;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            visual?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
          };
          spaceListFilter?:
            | Array<{
                __typename?: 'Space';
                id: string;
                visibility: SpaceVisibility;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  provider:
                    | {
                        __typename?: 'Organization';
                        id: string;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      }
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      }
                    | {
                        __typename?: 'VirtualContributor';
                        id: string;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      };
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    tagline?: string | undefined;
                    url: string;
                  };
                };
              }>
            | undefined;
        }
      | undefined;
  };
};

export type InnovationHubSettingsFragment = {
  __typename?: 'InnovationHub';
  id: string;
  subdomain: string;
  spaceVisibilityFilter?: SpaceVisibility | undefined;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    tagline?: string | undefined;
    url: string;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    visual?:
      | {
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
  };
  spaceListFilter?:
    | Array<{
        __typename?: 'Space';
        id: string;
        visibility: SpaceVisibility;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          provider:
            | {
                __typename?: 'Organization';
                id: string;
                profile: { __typename?: 'Profile'; id: string; displayName: string };
              }
            | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: { __typename?: 'Profile'; id: string; displayName: string };
              };
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            url: string;
          };
        };
      }>
    | undefined;
};

export type InnovationHubQueryVariables = Exact<{
  subdomain?: InputMaybe<Scalars['String']['input']>;
}>;

export type InnovationHubQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    innovationHub?:
      | {
          __typename?: 'InnovationHub';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            tagline?: string | undefined;
            description?: string | undefined;
            banner?:
              | { __typename?: 'Visual'; id: string; uri: string; alternativeText?: string | undefined }
              | undefined;
          };
        }
      | undefined;
  };
};

export type InnovationHubHomeInnovationHubFragment = {
  __typename?: 'InnovationHub';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    tagline?: string | undefined;
    description?: string | undefined;
    banner?: { __typename?: 'Visual'; id: string; uri: string; alternativeText?: string | undefined } | undefined;
  };
};

export type PlatformLevelAuthorizationQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformLevelAuthorizationQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    roleSet: { __typename?: 'RoleSet'; id: string; myRoles: Array<RoleName> };
    authorization?:
      | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type ConfigurationQueryVariables = Exact<{ [key: string]: never }>;

export type ConfigurationQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    configuration: {
      __typename?: 'Config';
      authentication: {
        __typename?: 'AuthenticationConfig';
        providers: Array<{
          __typename?: 'AuthenticationProviderConfig';
          name: string;
          label: string;
          icon: string;
          enabled: boolean;
          config: { __typename: 'OryConfig'; kratosPublicBaseURL: string; issuer: string };
        }>;
      };
      locations: {
        __typename?: 'PlatformLocations';
        environment: string;
        domain: string;
        landing: string;
        about: string;
        blog: string;
        feedback: string;
        forumreleases: string;
        privacy: string;
        security: string;
        support: string;
        terms: string;
        impact: string;
        foundation: string;
        opensource: string;
        inspiration: string;
        innovationLibrary: string;
        releases: string;
        help: string;
        community: string;
        newuser: string;
        tips: string;
        aup: string;
        documentation: string;
      };
      featureFlags: Array<{ __typename?: 'PlatformFeatureFlag'; enabled: boolean; name: PlatformFeatureFlagName }>;
      sentry: { __typename?: 'Sentry'; enabled: boolean; endpoint: string; submitPII: boolean; environment: string };
      apm: { __typename?: 'APM'; rumEnabled: boolean; endpoint: string };
      geo: { __typename?: 'Geo'; endpoint: string };
    };
    settings: {
      __typename?: 'PlatformSettings';
      integration: { __typename?: 'PlatformIntegrationSettings'; iframeAllowedUrls: Array<string> };
    };
    metadata: {
      __typename?: 'Metadata';
      services: Array<{ __typename?: 'ServiceMetadata'; name?: string | undefined; version?: string | undefined }>;
    };
  };
};

export type ConfigurationFragment = {
  __typename?: 'Config';
  authentication: {
    __typename?: 'AuthenticationConfig';
    providers: Array<{
      __typename?: 'AuthenticationProviderConfig';
      name: string;
      label: string;
      icon: string;
      enabled: boolean;
      config: { __typename: 'OryConfig'; kratosPublicBaseURL: string; issuer: string };
    }>;
  };
  locations: {
    __typename?: 'PlatformLocations';
    environment: string;
    domain: string;
    landing: string;
    about: string;
    blog: string;
    feedback: string;
    forumreleases: string;
    privacy: string;
    security: string;
    support: string;
    terms: string;
    impact: string;
    foundation: string;
    opensource: string;
    inspiration: string;
    innovationLibrary: string;
    releases: string;
    help: string;
    community: string;
    newuser: string;
    tips: string;
    aup: string;
    documentation: string;
  };
  featureFlags: Array<{ __typename?: 'PlatformFeatureFlag'; enabled: boolean; name: PlatformFeatureFlagName }>;
  sentry: { __typename?: 'Sentry'; enabled: boolean; endpoint: string; submitPII: boolean; environment: string };
  apm: { __typename?: 'APM'; rumEnabled: boolean; endpoint: string };
  geo: { __typename?: 'Geo'; endpoint: string };
};

export type PlatformLicensingPlansQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformLicensingPlansQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    licensingFramework: {
      __typename?: 'Licensing';
      id: string;
      plans: Array<{
        __typename?: 'LicensePlan';
        id: string;
        type: LicensingCredentialBasedPlanType;
        name: string;
        sortOrder: number;
        licenseCredential: LicensingCredentialBasedCredentialType;
      }>;
    };
  };
};

export type PlatformRoleSetQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformRoleSetQuery = {
  __typename?: 'Query';
  platform: { __typename?: 'Platform'; roleSet: { __typename?: 'RoleSet'; id: string } };
};

export type PlatformAdminInnovationHubsQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformAdminInnovationHubsQuery = {
  __typename?: 'Query';
  platformAdmin: {
    __typename?: 'PlatformAdminQueryResults';
    innovationHubs: Array<{
      __typename?: 'InnovationHub';
      id: string;
      subdomain: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    }>;
  };
};

export type PlatformAdminInnovationPacksQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformAdminInnovationPacksQuery = {
  __typename?: 'Query';
  platformAdmin: {
    __typename?: 'PlatformAdminQueryResults';
    innovationPacks: Array<{
      __typename?: 'InnovationPack';
      id: string;
      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
    }>;
  };
};

export type AssignLicensePlanToAccountMutationVariables = Exact<{
  licensePlanId: Scalars['UUID']['input'];
  accountId: Scalars['UUID']['input'];
  licensingId: Scalars['UUID']['input'];
}>;

export type AssignLicensePlanToAccountMutation = {
  __typename?: 'Mutation';
  assignLicensePlanToAccount: { __typename?: 'Account'; id: string };
};

export type RevokeLicensePlanFromAccountMutationVariables = Exact<{
  licensePlanId: Scalars['UUID']['input'];
  accountId: Scalars['UUID']['input'];
  licensingId: Scalars['UUID']['input'];
}>;

export type RevokeLicensePlanFromAccountMutation = {
  __typename?: 'Mutation';
  revokeLicensePlanFromAccount: { __typename?: 'Account'; id: string };
};

export type PlatformAdminOrganizationsListQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<OrganizationFilterInput>;
}>;

export type PlatformAdminOrganizationsListQuery = {
  __typename?: 'Query';
  platformAdmin: {
    __typename?: 'PlatformAdminQueryResults';
    organizations: {
      __typename?: 'PaginatedOrganization';
      organization: Array<{
        __typename?: 'Organization';
        id: string;
        account?:
          | {
              __typename?: 'Account';
              id: string;
              subscriptions: Array<{
                __typename?: 'AccountSubscription';
                name: LicensingCredentialBasedCredentialType;
              }>;
            }
          | undefined;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
        };
        verification: { __typename?: 'OrganizationVerification'; id: string; state: string };
      }>;
      pageInfo: {
        __typename?: 'PageInfo';
        startCursor?: string | undefined;
        endCursor?: string | undefined;
        hasNextPage: boolean;
      };
    };
  };
};

export type AdminOrganizationVerifyMutationVariables = Exact<{
  input: OrganizationVerificationEventInput;
}>;

export type AdminOrganizationVerifyMutation = {
  __typename?: 'Mutation';
  eventOnOrganizationVerification: {
    __typename?: 'OrganizationVerification';
    id: string;
    nextEvents: Array<string>;
    state: string;
  };
};

export type AssignLicensePlanToSpaceMutationVariables = Exact<{
  licensePlanId: Scalars['UUID']['input'];
  spaceId: Scalars['UUID']['input'];
}>;

export type AssignLicensePlanToSpaceMutation = {
  __typename?: 'Mutation';
  assignLicensePlanToSpace: {
    __typename?: 'Space';
    id: string;
    subscriptions: Array<{ __typename?: 'SpaceSubscription'; name: LicensingCredentialBasedCredentialType }>;
  };
};

export type RevokeLicensePlanFromSpaceMutationVariables = Exact<{
  licensePlanId: Scalars['UUID']['input'];
  spaceId: Scalars['UUID']['input'];
}>;

export type RevokeLicensePlanFromSpaceMutation = {
  __typename?: 'Mutation';
  revokeLicensePlanFromSpace: {
    __typename?: 'Space';
    id: string;
    subscriptions: Array<{ __typename?: 'SpaceSubscription'; name: LicensingCredentialBasedCredentialType }>;
  };
};

export type UpdateSpacePlatformSettingsMutationVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
  nameId: Scalars['NameID']['input'];
  visibility: SpaceVisibility;
}>;

export type UpdateSpacePlatformSettingsMutation = {
  __typename?: 'Mutation';
  updateSpacePlatformSettings: { __typename?: 'Space'; id: string; nameID: string; visibility: SpaceVisibility };
};

export type PlatformAdminSpacesListQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformAdminSpacesListQuery = {
  __typename?: 'Query';
  platformAdmin: {
    __typename?: 'PlatformAdminQueryResults';
    spaces: Array<{
      __typename?: 'Space';
      id: string;
      nameID: string;
      visibility: SpaceVisibility;
      subscriptions: Array<{ __typename?: 'SpaceSubscription'; name: LicensingCredentialBasedCredentialType }>;
      about: {
        __typename?: 'SpaceAbout';
        id: string;
        isContentPublic: boolean;
        provider:
          | {
              __typename?: 'Organization';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string };
            }
          | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string };
            };
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          tagline?: string | undefined;
          description?: string | undefined;
          tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          cardBanner?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
        membership: {
          __typename?: 'SpaceAboutMembership';
          myMembershipStatus?: CommunityMembershipStatus | undefined;
          myPrivileges?: Array<AuthorizationPrivilege> | undefined;
          communityID: string;
          roleSetID: string;
        };
        guidelines: { __typename?: 'CommunityGuidelines'; id: string };
      };
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
    }>;
  };
};

export type AdminSpaceFragment = {
  __typename?: 'Space';
  id: string;
  nameID: string;
  visibility: SpaceVisibility;
  subscriptions: Array<{ __typename?: 'SpaceSubscription'; name: LicensingCredentialBasedCredentialType }>;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    isContentPublic: boolean;
    provider:
      | {
          __typename?: 'Organization';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string };
        }
      | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
      | {
          __typename?: 'VirtualContributor';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string };
        };
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      url: string;
      tagline?: string | undefined;
      description?: string | undefined;
      tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
    membership: {
      __typename?: 'SpaceAboutMembership';
      myMembershipStatus?: CommunityMembershipStatus | undefined;
      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
      communityID: string;
      roleSetID: string;
    };
    guidelines: { __typename?: 'CommunityGuidelines'; id: string };
  };
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
};

export type PlatformAdminUsersListQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<UserFilterInput>;
}>;

export type PlatformAdminUsersListQuery = {
  __typename?: 'Query';
  platformAdmin: {
    __typename?: 'PlatformAdminQueryResults';
    users: {
      __typename?: 'PaginatedUsers';
      users: Array<{
        __typename?: 'User';
        id: string;
        email: string;
        account?:
          | {
              __typename?: 'Account';
              id: string;
              subscriptions: Array<{
                __typename?: 'AccountSubscription';
                name: LicensingCredentialBasedCredentialType;
              }>;
            }
          | undefined;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
        };
      }>;
      pageInfo: { __typename?: 'PageInfo'; endCursor?: string | undefined; hasNextPage: boolean };
    };
  };
};

export type PlatformAdminVirtualContributorsListQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformAdminVirtualContributorsListQuery = {
  __typename?: 'Query';
  platformAdmin: {
    __typename?: 'PlatformAdminQueryResults';
    virtualContributors: Array<{
      __typename?: 'VirtualContributor';
      id: string;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
    }>;
  };
};

export type ShareLinkWithUserMutationVariables = Exact<{
  messageData: CommunicationSendMessageToUserInput;
}>;

export type ShareLinkWithUserMutation = { __typename?: 'Mutation'; sendMessageToUser: boolean };

export type PageInfoFragment = {
  __typename?: 'PageInfo';
  startCursor?: string | undefined;
  endCursor?: string | undefined;
  hasNextPage: boolean;
};

export type SpaceAboutBaseQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceAboutBaseQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          nameID: string;
          visibility: SpaceVisibility;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              communityID: string;
              roleSetID: string;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type SpaceAboutDetailsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceAboutDetailsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          visibility: SpaceVisibility;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            who?: string | undefined;
            why?: string | undefined;
            isContentPublic: boolean;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            membership: {
              __typename?: 'SpaceAboutMembership';
              roleSetID: string;
              communityID: string;
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              leadOrganizations: Array<{
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }>;
              leadUsers: Array<{
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }>;
            };
            provider:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                };
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              avatar?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              cardBanner?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              banner?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              references?:
                | Array<{
                    __typename?: 'Reference';
                    id: string;
                    name: string;
                    uri: string;
                    description?: string | undefined;
                  }>
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                | undefined;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
            metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type SpaceAboutFullQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceAboutFullQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          visibility: SpaceVisibility;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            who?: string | undefined;
            why?: string | undefined;
            isContentPublic: boolean;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            membership: {
              __typename?: 'SpaceAboutMembership';
              roleSetID: string;
              communityID: string;
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              leadOrganizations: Array<{
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }>;
              leadUsers: Array<{
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }>;
            };
            provider:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                };
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              avatar?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              cardBanner?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              banner?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              references?:
                | Array<{
                    __typename?: 'Reference';
                    id: string;
                    name: string;
                    uri: string;
                    description?: string | undefined;
                  }>
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                | undefined;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
            metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type SpaceAboutCardAvatarFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type SpaceAboutCardBannerFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    tagline?: string | undefined;
    cardBanner?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
  };
};

export type SpaceAboutDetailsFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  who?: string | undefined;
  why?: string | undefined;
  isContentPublic: boolean;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  membership: {
    __typename?: 'SpaceAboutMembership';
    roleSetID: string;
    communityID: string;
    myMembershipStatus?: CommunityMembershipStatus | undefined;
    leadOrganizations: Array<{
      __typename?: 'Organization';
      id: string;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        location?:
          | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
          | undefined;
      };
    }>;
    leadUsers: Array<{
      __typename?: 'User';
      id: string;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        location?:
          | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
          | undefined;
      };
    }>;
  };
  provider:
    | {
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          type?: ProfileType | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          type?: ProfileType | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          type?: ProfileType | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
            | undefined;
        };
      };
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    tagline?: string | undefined;
    description?: string | undefined;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    avatar?:
      | {
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    cardBanner?:
      | {
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    banner?:
      | {
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          allowedTypes: Array<string>;
          aspectRatio: number;
          maxHeight: number;
          maxWidth: number;
          minHeight: number;
          minWidth: number;
          alternativeText?: string | undefined;
        }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
    location?:
      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
      | undefined;
  };
  guidelines: { __typename?: 'CommunityGuidelines'; id: string };
  metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
};

export type SpaceAboutLightFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  isContentPublic: boolean;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    url: string;
    tagline?: string | undefined;
    description?: string | undefined;
    tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    cardBanner?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
  membership: {
    __typename?: 'SpaceAboutMembership';
    myMembershipStatus?: CommunityMembershipStatus | undefined;
    myPrivileges?: Array<AuthorizationPrivilege> | undefined;
    communityID: string;
    roleSetID: string;
  };
  guidelines: { __typename?: 'CommunityGuidelines'; id: string };
};

export type SubspaceVisualsFragment = {
  __typename?: 'Profile';
  avatar?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
  cardBanner?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
};

export type SpaceAboutMinimalFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string; tagline?: string | undefined };
};

export type SpaceAboutMinimalUrlFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  profile: { __typename?: 'Profile'; id: string; displayName: string; tagline?: string | undefined; url: string };
};

export type SpaceAboutTileFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  isContentPublic: boolean;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    tagline?: string | undefined;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    cardBanner?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type RestrictedSpaceNamesQueryVariables = Exact<{ [key: string]: never }>;

export type RestrictedSpaceNamesQuery = { __typename?: 'Query'; restrictedSpaceNames: Array<string> };

export type PlansTableQueryVariables = Exact<{ [key: string]: never }>;

export type PlansTableQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    licensingFramework: {
      __typename?: 'Licensing';
      id: string;
      plans: Array<{
        __typename?: 'LicensePlan';
        id: string;
        name: string;
        enabled: boolean;
        sortOrder: number;
        pricePerMonth?: number | undefined;
        isFree: boolean;
        trialEnabled: boolean;
        requiresPaymentMethod: boolean;
        requiresContactSupport: boolean;
        type: LicensingCredentialBasedPlanType;
      }>;
    };
  };
};

export type AccountPlanAvailabilityQueryVariables = Exact<{
  accountId: Scalars['UUID']['input'];
}>;

export type AccountPlanAvailabilityQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    account?:
      | {
          __typename?: 'Account';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          license: {
            __typename?: 'License';
            id: string;
            availableEntitlements?: Array<LicenseEntitlementType> | undefined;
          };
        }
      | undefined;
  };
};

export type ContactSupportLocationQueryVariables = Exact<{ [key: string]: never }>;

export type ContactSupportLocationQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    configuration: { __typename?: 'Config'; locations: { __typename?: 'PlatformLocations'; contactsupport: string } };
  };
};

export type CreateSpaceMutationVariables = Exact<{
  spaceData: CreateSpaceOnAccountInput;
  includeVisuals?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CreateSpaceMutation = {
  __typename?: 'Mutation';
  createSpace: {
    __typename?: 'Space';
    id: string;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        tagline?: string | undefined;
        description?: string | undefined;
        tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
        banner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
      membership: {
        __typename?: 'SpaceAboutMembership';
        myMembershipStatus?: CommunityMembershipStatus | undefined;
        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
        communityID: string;
        roleSetID: string;
      };
      guidelines: { __typename?: 'CommunityGuidelines'; id: string };
    };
  };
};

export type CreateSubspaceMutationVariables = Exact<{
  input: CreateSubspaceInput;
  includeVisuals?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CreateSubspaceMutation = {
  __typename?: 'Mutation';
  createSubspace: {
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      why?: string | undefined;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        description?: string | undefined;
        tagline?: string | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
        banner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
      metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
      membership: {
        __typename?: 'SpaceAboutMembership';
        myMembershipStatus?: CommunityMembershipStatus | undefined;
        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
      };
    };
  };
};

export type ProfileVisualsFragment = {
  __typename?: 'Profile';
  id: string;
  banner?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
  cardBanner?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
  avatar?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
};

export type SubspacePageBannerQueryVariables = Exact<{
  level0Space: Scalars['UUID']['input'];
  spaceId: Scalars['UUID']['input'];
}>;

export type SubspacePageBannerQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    level0Space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              banner?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
        }
      | undefined;
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              tagline?: string | undefined;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
            };
          };
        }
      | undefined;
  };
};

export type SpaceCardFragment = {
  __typename?: 'Space';
  id: string;
  visibility: SpaceVisibility;
  about: {
    __typename?: 'SpaceAbout';
    why?: string | undefined;
    isContentPublic: boolean;
    id: string;
    metrics?: Array<{ __typename?: 'NVP'; name: string; value: string }> | undefined;
    membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      tagline?: string | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
    };
  };
};

export type SpaceBreadcrumbsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
  subspaceL1Id?: InputMaybe<Scalars['UUID']['input']>;
  subspaceL2Id?: InputMaybe<Scalars['UUID']['input']>;
  includeSubspaceL1?: InputMaybe<Scalars['Boolean']['input']>;
  includeSubspaceL2?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type SpaceBreadcrumbsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          };
        }
      | undefined;
    subspaceL1?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          };
        }
      | undefined;
    subspaceL2?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type BreadcrumbsSpaceL0Fragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  };
};

export type BreadcrumbsSubspaceFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  };
};

export type SpaceDashboardNavigationSubspacesQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceDashboardNavigationSubspacesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          about: {
            __typename?: 'SpaceAbout';
            isContentPublic: boolean;
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              tagline?: string | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
            };
          };
          subspaces: Array<{
            __typename?: 'Space';
            id: string;
            about: {
              __typename?: 'SpaceAbout';
              isContentPublic: boolean;
              id: string;
              membership: {
                __typename?: 'SpaceAboutMembership';
                myMembershipStatus?: CommunityMembershipStatus | undefined;
              };
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
          }>;
        }
      | undefined;
  };
};

export type SpaceEntitlementsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceEntitlementsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          license: {
            __typename?: 'License';
            id: string;
            availableEntitlements?: Array<LicenseEntitlementType> | undefined;
          };
        }
      | undefined;
  };
};

export type SpaceTemplatesManagerQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceTemplatesManagerQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          templatesManager?:
            | {
                __typename?: 'TemplatesManager';
                id: string;
                templatesSet?:
                  | {
                      __typename?: 'TemplatesSet';
                      id: string;
                      authorization?:
                        | {
                            __typename?: 'Authorization';
                            id: string;
                            myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                          }
                        | undefined;
                    }
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  };
};

export type SpaceSubspaceCardsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceSubspaceCardsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          subspaces: Array<{
            __typename?: 'Space';
            id: string;
            level: SpaceLevel;
            about: {
              __typename?: 'SpaceAbout';
              isContentPublic: boolean;
              why?: string | undefined;
              id: string;
              metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
              membership: {
                __typename?: 'SpaceAboutMembership';
                myMembershipStatus?: CommunityMembershipStatus | undefined;
                myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              };
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                description?: string | undefined;
                url: string;
                tagline?: string | undefined;
                cardBanner?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagset?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
              };
            };
          }>;
        }
      | undefined;
  };
};

export type SubspaceCardFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  about: {
    __typename?: 'SpaceAbout';
    isContentPublic: boolean;
    why?: string | undefined;
    id: string;
    metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
    membership: {
      __typename?: 'SpaceAboutMembership';
      myMembershipStatus?: CommunityMembershipStatus | undefined;
      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
    };
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      tagline?: string | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
    };
  };
};

export type SubspacesOnSpaceFragment = {
  __typename?: 'Space';
  id: string;
  subspaces: Array<{
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    about: {
      __typename?: 'SpaceAbout';
      isContentPublic: boolean;
      why?: string | undefined;
      id: string;
      metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
      membership: {
        __typename?: 'SpaceAboutMembership';
        myMembershipStatus?: CommunityMembershipStatus | undefined;
        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
      };
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        tagline?: string | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
      };
    };
  }>;
};

export type DeleteSpaceMutationVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type DeleteSpaceMutation = { __typename?: 'Mutation'; deleteSpace: { __typename?: 'Space'; id: string } };

export type UpdateSpaceMutationVariables = Exact<{
  input: UpdateSpaceInput;
}>;

export type UpdateSpaceMutation = {
  __typename?: 'Mutation';
  updateSpace: {
    __typename?: 'Space';
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      who?: string | undefined;
      why?: string | undefined;
      isContentPublic: boolean;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      membership: {
        __typename?: 'SpaceAboutMembership';
        roleSetID: string;
        communityID: string;
        myMembershipStatus?: CommunityMembershipStatus | undefined;
        leadOrganizations: Array<{
          __typename?: 'Organization';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
          };
        }>;
        leadUsers: Array<{
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
          };
        }>;
      };
      provider:
        | {
            __typename?: 'Organization';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              type?: ProfileType | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                | undefined;
            };
          }
        | {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              type?: ProfileType | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                | undefined;
            };
          }
        | {
            __typename?: 'VirtualContributor';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              type?: ProfileType | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                | undefined;
            };
          };
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        tagline?: string | undefined;
        description?: string | undefined;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
        avatar?:
          | {
              __typename?: 'Visual';
              id: string;
              uri: string;
              name: string;
              allowedTypes: Array<string>;
              aspectRatio: number;
              maxHeight: number;
              maxWidth: number;
              minHeight: number;
              minWidth: number;
              alternativeText?: string | undefined;
            }
          | undefined;
        cardBanner?:
          | {
              __typename?: 'Visual';
              id: string;
              uri: string;
              name: string;
              allowedTypes: Array<string>;
              aspectRatio: number;
              maxHeight: number;
              maxWidth: number;
              minHeight: number;
              minWidth: number;
              alternativeText?: string | undefined;
            }
          | undefined;
        banner?:
          | {
              __typename?: 'Visual';
              id: string;
              uri: string;
              name: string;
              allowedTypes: Array<string>;
              aspectRatio: number;
              maxHeight: number;
              maxWidth: number;
              minHeight: number;
              minWidth: number;
              alternativeText?: string | undefined;
            }
          | undefined;
        references?:
          | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
          | undefined;
        location?:
          | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
          | undefined;
      };
      guidelines: { __typename?: 'CommunityGuidelines'; id: string };
      metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
    };
  };
};

export type SpaceInfoFragment = {
  __typename?: 'Space';
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    who?: string | undefined;
    why?: string | undefined;
    isContentPublic: boolean;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    membership: {
      __typename?: 'SpaceAboutMembership';
      roleSetID: string;
      communityID: string;
      myMembershipStatus?: CommunityMembershipStatus | undefined;
      leadOrganizations: Array<{
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
            | undefined;
        };
      }>;
      leadUsers: Array<{
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
            | undefined;
        };
      }>;
    };
    provider:
      | {
          __typename?: 'Organization';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            type?: ProfileType | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
          };
        }
      | {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            type?: ProfileType | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
          };
        }
      | {
          __typename?: 'VirtualContributor';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            type?: ProfileType | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
          };
        };
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      tagline?: string | undefined;
      description?: string | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      avatar?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
      cardBanner?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
      banner?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
      location?:
        | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
        | undefined;
    };
    guidelines: { __typename?: 'CommunityGuidelines'; id: string };
    metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
  };
};

export type SubspacesInSpaceQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SubspacesInSpaceQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          subspaces: Array<{
            __typename?: 'Space';
            id: string;
            level: SpaceLevel;
            about: {
              __typename?: 'SpaceAbout';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                description?: string | undefined;
                url: string;
                tagline?: string | undefined;
                cardBanner?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagset?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
              };
            };
          }>;
        }
      | undefined;
  };
};

export type SubspaceCreatedSubscriptionVariables = Exact<{
  subspaceId: Scalars['UUID']['input'];
}>;

export type SubspaceCreatedSubscription = {
  __typename?: 'Subscription';
  subspaceCreated: {
    __typename?: 'SubspaceCreated';
    subspace: {
      __typename?: 'Space';
      id: string;
      visibility: SpaceVisibility;
      about: {
        __typename?: 'SpaceAbout';
        why?: string | undefined;
        isContentPublic: boolean;
        id: string;
        metrics?: Array<{ __typename?: 'NVP'; name: string; value: string }> | undefined;
        membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          description?: string | undefined;
          url: string;
          tagline?: string | undefined;
          cardBanner?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          tagset?:
            | {
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }
            | undefined;
        };
      };
    };
  };
};

export type SpacePermissionsAndEntitlementsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpacePermissionsAndEntitlementsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          license: {
            __typename?: 'License';
            id: string;
            availableEntitlements?: Array<LicenseEntitlementType> | undefined;
          };
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            license: {
              __typename?: 'License';
              id: string;
              availableEntitlements?: Array<LicenseEntitlementType> | undefined;
            };
          };
          templatesManager?:
            | {
                __typename?: 'TemplatesManager';
                id: string;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  };
};

export type SubspacePageQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SubspacePageQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          about: {
            __typename?: 'SpaceAbout';
            why?: string | undefined;
            id: string;
            isContentPublic: boolean;
            metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
            membership: {
              __typename?: 'SpaceAboutMembership';
              roleSetID: string;
              communityID: string;
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
            };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            calloutsSet: { __typename?: 'CalloutsSet'; id: string };
          };
          templatesManager?:
            | {
                __typename?: 'TemplatesManager';
                id: string;
                templatesSet?: { __typename?: 'TemplatesSet'; id: string } | undefined;
              }
            | undefined;
        }
      | undefined;
  };
};

export type SubspacePageSpaceFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  about: {
    __typename?: 'SpaceAbout';
    why?: string | undefined;
    id: string;
    isContentPublic: boolean;
    metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
    membership: {
      __typename?: 'SpaceAboutMembership';
      roleSetID: string;
      communityID: string;
      myMembershipStatus?: CommunityMembershipStatus | undefined;
      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
    };
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      url: string;
      tagline?: string | undefined;
      description?: string | undefined;
      tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
    guidelines: { __typename?: 'CommunityGuidelines'; id: string };
  };
  collaboration: { __typename?: 'Collaboration'; id: string; calloutsSet: { __typename?: 'CalloutsSet'; id: string } };
  templatesManager?:
    | {
        __typename?: 'TemplatesManager';
        id: string;
        templatesSet?: { __typename?: 'TemplatesSet'; id: string } | undefined;
      }
    | undefined;
};

export type SpaceTabQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceTabQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              communityID: string;
              roleSetID: string;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            innovationFlow: {
              __typename?: 'InnovationFlow';
              id: string;
              states: Array<{
                __typename?: 'InnovationFlowState';
                id: string;
                displayName: string;
                description?: string | undefined;
                sortOrder: number;
                settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
              }>;
            };
            calloutsSet: { __typename?: 'CalloutsSet'; id: string };
          };
        }
      | undefined;
  };
};

export type SpacePageQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpacePageQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          nameID: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            who?: string | undefined;
            why?: string | undefined;
            isContentPublic: boolean;
            membership: {
              __typename?: 'SpaceAboutMembership';
              communityID: string;
              roleSetID: string;
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              leadOrganizations: Array<{
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }>;
              leadUsers: Array<{
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }>;
            };
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              tagline?: string | undefined;
              description?: string | undefined;
              location?:
                | {
                    __typename?: 'Location';
                    id: string;
                    city?: string | undefined;
                    country?: string | undefined;
                    addressLine1?: string | undefined;
                    addressLine2?: string | undefined;
                    stateOrProvince?: string | undefined;
                    postalCode?: string | undefined;
                  }
                | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              avatar?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              cardBanner?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              banner?:
                | {
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    allowedTypes: Array<string>;
                    aspectRatio: number;
                    maxHeight: number;
                    maxWidth: number;
                    minHeight: number;
                    minWidth: number;
                    alternativeText?: string | undefined;
                  }
                | undefined;
              references?:
                | Array<{
                    __typename?: 'Reference';
                    id: string;
                    name: string;
                    uri: string;
                    description?: string | undefined;
                  }>
                | undefined;
            };
            provider:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    type?: ProfileType | undefined;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                  };
                };
            metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            innovationFlow: {
              __typename?: 'InnovationFlow';
              id: string;
              states: Array<{ __typename?: 'InnovationFlowState'; displayName: string }>;
              currentState?: { __typename?: 'InnovationFlowState'; displayName: string } | undefined;
            };
            calloutsSet: {
              __typename?: 'CalloutsSet';
              id: string;
              callouts: Array<{
                __typename?: 'Callout';
                id: string;
                activity: number;
                framing: {
                  __typename?: 'CalloutFraming';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    description?: string | undefined;
                  };
                };
                settings: { __typename?: 'CalloutSettings'; visibility: CalloutVisibility };
              }>;
            };
            timeline: {
              __typename?: 'Timeline';
              id: string;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type SpacePageFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  nameID: string;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    who?: string | undefined;
    why?: string | undefined;
    isContentPublic: boolean;
    membership: {
      __typename?: 'SpaceAboutMembership';
      communityID: string;
      roleSetID: string;
      myMembershipStatus?: CommunityMembershipStatus | undefined;
      leadOrganizations: Array<{
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
            | undefined;
        };
      }>;
      leadUsers: Array<{
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
            | undefined;
        };
      }>;
    };
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      tagline?: string | undefined;
      description?: string | undefined;
      location?:
        | {
            __typename?: 'Location';
            id: string;
            city?: string | undefined;
            country?: string | undefined;
            addressLine1?: string | undefined;
            addressLine2?: string | undefined;
            stateOrProvince?: string | undefined;
            postalCode?: string | undefined;
          }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      avatar?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
      cardBanner?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
      banner?:
        | {
            __typename?: 'Visual';
            id: string;
            uri: string;
            name: string;
            allowedTypes: Array<string>;
            aspectRatio: number;
            maxHeight: number;
            maxWidth: number;
            minHeight: number;
            minWidth: number;
            alternativeText?: string | undefined;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
    };
    provider:
      | {
          __typename?: 'Organization';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            type?: ProfileType | undefined;
            description?: string | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            type?: ProfileType | undefined;
            description?: string | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | {
          __typename?: 'VirtualContributor';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            type?: ProfileType | undefined;
            description?: string | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            location?:
              | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
              | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        };
    metrics?: Array<{ __typename?: 'NVP'; id: string; name: string; value: string }> | undefined;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    guidelines: { __typename?: 'CommunityGuidelines'; id: string };
  };
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  collaboration: {
    __typename?: 'Collaboration';
    id: string;
    innovationFlow: {
      __typename?: 'InnovationFlow';
      id: string;
      states: Array<{ __typename?: 'InnovationFlowState'; displayName: string }>;
      currentState?: { __typename?: 'InnovationFlowState'; displayName: string } | undefined;
    };
    calloutsSet: {
      __typename?: 'CalloutsSet';
      id: string;
      callouts: Array<{
        __typename?: 'Callout';
        id: string;
        activity: number;
        framing: {
          __typename?: 'CalloutFraming';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            description?: string | undefined;
          };
        };
        settings: { __typename?: 'CalloutSettings'; visibility: CalloutVisibility };
      }>;
    };
    timeline: {
      __typename?: 'Timeline';
      id: string;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
    };
  };
};

export type SpaceTabsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceTabsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            innovationFlow: {
              __typename?: 'InnovationFlow';
              id: string;
              currentState?: { __typename?: 'InnovationFlowState'; id: string } | undefined;
              states: Array<{
                __typename?: 'InnovationFlowState';
                id: string;
                displayName: string;
                description?: string | undefined;
                sortOrder: number;
                settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
              }>;
            };
          };
        }
      | undefined;
  };
};

export type SpaceAccountQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceAccountQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          visibility: SpaceVisibility;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            provider:
              | {
                  __typename: 'Organization';
                  id: string;
                  authorization?:
                    | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                    | undefined;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename: 'User';
                  id: string;
                  authorization?:
                    | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                    | undefined;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename: 'VirtualContributor';
                  id: string;
                  authorization?:
                    | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                    | undefined;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                  };
                };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              communityID: string;
              roleSetID: string;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
          activeSubscription?:
            | {
                __typename?: 'SpaceSubscription';
                name: LicensingCredentialBasedCredentialType;
                expires?: Date | undefined;
              }
            | undefined;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
  platform: {
    __typename?: 'Platform';
    id: string;
    licensingFramework: {
      __typename?: 'Licensing';
      id: string;
      plans: Array<{
        __typename?: 'LicensePlan';
        id: string;
        name: string;
        enabled: boolean;
        type: LicensingCredentialBasedPlanType;
        sortOrder: number;
        isFree: boolean;
        pricePerMonth?: number | undefined;
        licenseCredential: LicensingCredentialBasedCredentialType;
      }>;
    };
    configuration: {
      __typename?: 'Config';
      locations: { __typename?: 'PlatformLocations'; support: string; switchplan: string };
    };
  };
};

export type CommunityApplicationQueryVariables = Exact<{
  applicationId: Scalars['UUID']['input'];
}>;

export type CommunityApplicationQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    application?:
      | {
          __typename?: 'Application';
          id: string;
          createdDate: Date;
          updatedDate: Date;
          state: string;
          nextEvents: Array<string>;
          contributor:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              };
          questions: Array<{ __typename?: 'Question'; id: string; name: string; value: string }>;
        }
      | undefined;
  };
};

export type CommunityInvitationQueryVariables = Exact<{
  invitationId: Scalars['UUID']['input'];
  isPlatformInvitation: Scalars['Boolean']['input'];
}>;

export type CommunityInvitationQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    invitation?:
      | {
          __typename?: 'Invitation';
          id: string;
          createdDate: Date;
          updatedDate: Date;
          welcomeMessage?: string | undefined;
          contributorType: RoleSetContributorType;
          contributor:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  location?:
                    | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                    | undefined;
                };
              };
        }
      | undefined;
    platformInvitation?:
      | {
          __typename?: 'PlatformInvitation';
          id: string;
          createdDate: Date;
          updatedDate: Date;
          email: string;
          welcomeMessage?: string | undefined;
        }
      | undefined;
  };
};

export type AvailableVirtualContributorsInLibraryQueryVariables = Exact<{ [key: string]: never }>;

export type AvailableVirtualContributorsInLibraryQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    library: {
      __typename?: 'Library';
      id: string;
      virtualContributors: Array<{
        __typename?: 'VirtualContributor';
        searchVisibility: SearchVisibility;
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          description?: string | undefined;
          url: string;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          tagsets?:
            | Array<{
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }>
            | undefined;
          location?:
            | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
            | undefined;
          references?:
            | Array<{
                __typename?: 'Reference';
                id: string;
                name: string;
                uri: string;
                description?: string | undefined;
              }>
            | undefined;
        };
        aiPersona?:
          | {
              __typename?: 'AiPersona';
              id: string;
              bodyOfKnowledgeID?: string | undefined;
              bodyOfKnowledgeType?: AiPersonaBodyOfKnowledgeType | undefined;
              bodyOfKnowledge?: string | undefined;
              engine: AiPersonaEngine;
              aiPersonaServiceID?: string | undefined;
              modelCard: {
                __typename?: 'AiPersonaModelCard';
                spaceUsage?:
                  | Array<{
                      __typename?: 'ModelCardSpaceUsageResult';
                      modelCardEntry: AiPersonaModelCardEntry;
                      flags: Array<{
                        __typename?: 'AiPersonaModelCardFlag';
                        name: AiPersonaModelCardEntryFlagName;
                        enabled: boolean;
                      }>;
                    }>
                  | undefined;
                aiEngine?:
                  | {
                      __typename?: 'ModelCardAiEngineResult';
                      isExternal: boolean;
                      hostingLocation: string;
                      isUsingOpenWeightsModel: boolean;
                      isInteractionDataUsedForTraining?: boolean | undefined;
                      canAccessWebWhenAnswering: boolean;
                      areAnswersRestrictedToBodyOfKnowledge: string;
                      additionalTechnicalDetails: string;
                    }
                  | undefined;
                monitoring?:
                  | { __typename?: 'ModelCardMonitoringResult'; isUsageMonitoredByAlkemio: boolean }
                  | undefined;
              };
            }
          | undefined;
      }>;
    };
  };
};

export type AvailableVirtualContributorsInSpaceAccountQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type AvailableVirtualContributorsInSpaceAccountQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          account: {
            __typename?: 'Account';
            id: string;
            virtualContributors: Array<{
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                description?: string | undefined;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                  | undefined;
                references?:
                  | Array<{
                      __typename?: 'Reference';
                      id: string;
                      name: string;
                      uri: string;
                      description?: string | undefined;
                    }>
                  | undefined;
              };
              aiPersona?:
                | {
                    __typename?: 'AiPersona';
                    id: string;
                    bodyOfKnowledgeID?: string | undefined;
                    bodyOfKnowledgeType?: AiPersonaBodyOfKnowledgeType | undefined;
                    bodyOfKnowledge?: string | undefined;
                    engine: AiPersonaEngine;
                    aiPersonaServiceID?: string | undefined;
                    modelCard: {
                      __typename?: 'AiPersonaModelCard';
                      spaceUsage?:
                        | Array<{
                            __typename?: 'ModelCardSpaceUsageResult';
                            modelCardEntry: AiPersonaModelCardEntry;
                            flags: Array<{
                              __typename?: 'AiPersonaModelCardFlag';
                              name: AiPersonaModelCardEntryFlagName;
                              enabled: boolean;
                            }>;
                          }>
                        | undefined;
                      aiEngine?:
                        | {
                            __typename?: 'ModelCardAiEngineResult';
                            isExternal: boolean;
                            hostingLocation: string;
                            isUsingOpenWeightsModel: boolean;
                            isInteractionDataUsedForTraining?: boolean | undefined;
                            canAccessWebWhenAnswering: boolean;
                            areAnswersRestrictedToBodyOfKnowledge: string;
                            additionalTechnicalDetails: string;
                          }
                        | undefined;
                      monitoring?:
                        | { __typename?: 'ModelCardMonitoringResult'; isUsageMonitoredByAlkemio: boolean }
                        | undefined;
                    };
                  }
                | undefined;
            }>;
          };
        }
      | undefined;
  };
};

export type AvailableVirtualContributorsInSpaceQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type AvailableVirtualContributorsInSpaceQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          community: {
            __typename?: 'Community';
            id: string;
            roleSet: {
              __typename?: 'RoleSet';
              id: string;
              availableVirtualContributorsForEntryRole: {
                __typename?: 'PaginatedVirtualContributor';
                virtualContributors: Array<{
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
                      | undefined;
                    references?:
                      | Array<{
                          __typename?: 'Reference';
                          id: string;
                          name: string;
                          uri: string;
                          description?: string | undefined;
                        }>
                      | undefined;
                  };
                  aiPersona?:
                    | {
                        __typename?: 'AiPersona';
                        id: string;
                        bodyOfKnowledgeID?: string | undefined;
                        bodyOfKnowledgeType?: AiPersonaBodyOfKnowledgeType | undefined;
                        bodyOfKnowledge?: string | undefined;
                        engine: AiPersonaEngine;
                        aiPersonaServiceID?: string | undefined;
                        modelCard: {
                          __typename?: 'AiPersonaModelCard';
                          spaceUsage?:
                            | Array<{
                                __typename?: 'ModelCardSpaceUsageResult';
                                modelCardEntry: AiPersonaModelCardEntry;
                                flags: Array<{
                                  __typename?: 'AiPersonaModelCardFlag';
                                  name: AiPersonaModelCardEntryFlagName;
                                  enabled: boolean;
                                }>;
                              }>
                            | undefined;
                          aiEngine?:
                            | {
                                __typename?: 'ModelCardAiEngineResult';
                                isExternal: boolean;
                                hostingLocation: string;
                                isUsingOpenWeightsModel: boolean;
                                isInteractionDataUsedForTraining?: boolean | undefined;
                                canAccessWebWhenAnswering: boolean;
                                areAnswersRestrictedToBodyOfKnowledge: string;
                                additionalTechnicalDetails: string;
                              }
                            | undefined;
                          monitoring?:
                            | { __typename?: 'ModelCardMonitoringResult'; isUsageMonitoredByAlkemio: boolean }
                            | undefined;
                        };
                      }
                    | undefined;
                }>;
                pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean; endCursor?: string | undefined };
              };
            };
          };
        }
      | undefined;
  };
};

export type AvailableVirtualContributorsForRoleSetPaginatedFragment = {
  __typename?: 'PaginatedVirtualContributor';
  virtualContributors: Array<{
    __typename?: 'VirtualContributor';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
      location?:
        | { __typename?: 'Location'; id: string; city?: string | undefined; country?: string | undefined }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
    };
    aiPersona?:
      | {
          __typename?: 'AiPersona';
          id: string;
          bodyOfKnowledgeID?: string | undefined;
          bodyOfKnowledgeType?: AiPersonaBodyOfKnowledgeType | undefined;
          bodyOfKnowledge?: string | undefined;
          engine: AiPersonaEngine;
          aiPersonaServiceID?: string | undefined;
          modelCard: {
            __typename?: 'AiPersonaModelCard';
            spaceUsage?:
              | Array<{
                  __typename?: 'ModelCardSpaceUsageResult';
                  modelCardEntry: AiPersonaModelCardEntry;
                  flags: Array<{
                    __typename?: 'AiPersonaModelCardFlag';
                    name: AiPersonaModelCardEntryFlagName;
                    enabled: boolean;
                  }>;
                }>
              | undefined;
            aiEngine?:
              | {
                  __typename?: 'ModelCardAiEngineResult';
                  isExternal: boolean;
                  hostingLocation: string;
                  isUsingOpenWeightsModel: boolean;
                  isInteractionDataUsedForTraining?: boolean | undefined;
                  canAccessWebWhenAnswering: boolean;
                  areAnswersRestrictedToBodyOfKnowledge: string;
                  additionalTechnicalDetails: string;
                }
              | undefined;
            monitoring?: { __typename?: 'ModelCardMonitoringResult'; isUsageMonitoredByAlkemio: boolean } | undefined;
          };
        }
      | undefined;
  }>;
  pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean; endCursor?: string | undefined };
};

export type SpaceCollaborationIdQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceCollaborationIdQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            calloutsSet: { __typename?: 'CalloutsSet'; id: string };
          };
        }
      | undefined;
  };
};

export type SpaceSettingsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceSettingsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            provider:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string };
                };
            membership: { __typename?: 'SpaceAboutMembership'; roleSetID: string; communityID: string };
          };
          settings: {
            __typename?: 'SpaceSettings';
            privacy: {
              __typename?: 'SpaceSettingsPrivacy';
              mode: SpacePrivacyMode;
              allowPlatformSupportAsAdmin: boolean;
            };
            membership: {
              __typename?: 'SpaceSettingsMembership';
              policy: CommunityMembershipPolicy;
              trustedOrganizations: Array<string>;
              allowSubspaceAdminsToInviteMembers: boolean;
            };
            collaboration: {
              __typename?: 'SpaceSettingsCollaboration';
              allowMembersToCreateCallouts: boolean;
              allowMembersToCreateSubspaces: boolean;
              inheritMembershipRights: boolean;
              allowEventsFromSubspaces: boolean;
            };
          };
          collaboration: { __typename?: 'Collaboration'; id: string };
        }
      | undefined;
  };
};

export type SpaceSettingsFragment = {
  __typename?: 'SpaceSettings';
  privacy: { __typename?: 'SpaceSettingsPrivacy'; mode: SpacePrivacyMode; allowPlatformSupportAsAdmin: boolean };
  membership: {
    __typename?: 'SpaceSettingsMembership';
    policy: CommunityMembershipPolicy;
    trustedOrganizations: Array<string>;
    allowSubspaceAdminsToInviteMembers: boolean;
  };
  collaboration: {
    __typename?: 'SpaceSettingsCollaboration';
    allowMembersToCreateCallouts: boolean;
    allowMembersToCreateSubspaces: boolean;
    inheritMembershipRights: boolean;
    allowEventsFromSubspaces: boolean;
  };
};

export type UpdateSpaceSettingsMutationVariables = Exact<{
  settingsData: UpdateSpaceSettingsInput;
}>;

export type UpdateSpaceSettingsMutation = {
  __typename?: 'Mutation';
  updateSpaceSettings: {
    __typename?: 'Space';
    id: string;
    settings: {
      __typename?: 'SpaceSettings';
      privacy: { __typename?: 'SpaceSettingsPrivacy'; mode: SpacePrivacyMode; allowPlatformSupportAsAdmin: boolean };
      membership: {
        __typename?: 'SpaceSettingsMembership';
        policy: CommunityMembershipPolicy;
        trustedOrganizations: Array<string>;
        allowSubspaceAdminsToInviteMembers: boolean;
      };
      collaboration: {
        __typename?: 'SpaceSettingsCollaboration';
        allowMembersToCreateCallouts: boolean;
        allowMembersToCreateSubspaces: boolean;
        inheritMembershipRights: boolean;
        allowEventsFromSubspaces: boolean;
      };
    };
  };
};

export type SpaceStorageAdminPageQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceStorageAdminPageQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; tagline?: string | undefined };
          };
          storageAggregator: {
            __typename?: 'StorageAggregator';
            id: string;
            parentEntity?:
              | {
                  __typename?: 'StorageAggregatorParent';
                  id: string;
                  level?: SpaceLevel | undefined;
                  displayName: string;
                  url: string;
                }
              | undefined;
            storageAggregators: Array<{
              __typename?: 'StorageAggregator';
              id: string;
              parentEntity?:
                | {
                    __typename?: 'StorageAggregatorParent';
                    id: string;
                    level?: SpaceLevel | undefined;
                    displayName: string;
                    url: string;
                  }
                | undefined;
            }>;
            storageBuckets: Array<{
              __typename?: 'StorageBucket';
              id: string;
              size: number;
              documents: Array<{
                __typename?: 'Document';
                id: string;
                displayName: string;
                size: number;
                mimeType: MimeType;
                uploadedDate: Date;
                url: string;
                createdBy?:
                  | {
                      __typename?: 'User';
                      id: string;
                      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                    }
                  | undefined;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
              }>;
              parentEntity?:
                | {
                    __typename?: 'StorageBucketParent';
                    id: string;
                    type: ProfileType;
                    displayName: string;
                    url: string;
                  }
                | undefined;
            }>;
            directStorageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              size: number;
              documents: Array<{
                __typename?: 'Document';
                id: string;
                displayName: string;
                size: number;
                mimeType: MimeType;
                uploadedDate: Date;
                url: string;
                createdBy?:
                  | {
                      __typename?: 'User';
                      id: string;
                      profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                    }
                  | undefined;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
              }>;
              parentEntity?:
                | {
                    __typename?: 'StorageBucketParent';
                    id: string;
                    type: ProfileType;
                    displayName: string;
                    url: string;
                  }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type StorageAggregatorLookupQueryVariables = Exact<{
  storageAggregatorId: Scalars['UUID']['input'];
}>;

export type StorageAggregatorLookupQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    storageAggregator?:
      | {
          __typename?: 'StorageAggregator';
          id: string;
          parentEntity?:
            | {
                __typename?: 'StorageAggregatorParent';
                id: string;
                level?: SpaceLevel | undefined;
                displayName: string;
                url: string;
              }
            | undefined;
          storageAggregators: Array<{
            __typename?: 'StorageAggregator';
            id: string;
            parentEntity?:
              | {
                  __typename?: 'StorageAggregatorParent';
                  id: string;
                  level?: SpaceLevel | undefined;
                  displayName: string;
                  url: string;
                }
              | undefined;
          }>;
          storageBuckets: Array<{
            __typename?: 'StorageBucket';
            id: string;
            size: number;
            documents: Array<{
              __typename?: 'Document';
              id: string;
              displayName: string;
              size: number;
              mimeType: MimeType;
              uploadedDate: Date;
              url: string;
              createdBy?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                  }
                | undefined;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            }>;
            parentEntity?:
              | { __typename?: 'StorageBucketParent'; id: string; type: ProfileType; displayName: string; url: string }
              | undefined;
          }>;
          directStorageBucket: {
            __typename?: 'StorageBucket';
            id: string;
            size: number;
            documents: Array<{
              __typename?: 'Document';
              id: string;
              displayName: string;
              size: number;
              mimeType: MimeType;
              uploadedDate: Date;
              url: string;
              createdBy?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                  }
                | undefined;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            }>;
            parentEntity?:
              | { __typename?: 'StorageBucketParent'; id: string; type: ProfileType; displayName: string; url: string }
              | undefined;
          };
        }
      | undefined;
  };
};

export type StorageAggregatorFragment = {
  __typename?: 'StorageAggregator';
  id: string;
  parentEntity?:
    | {
        __typename?: 'StorageAggregatorParent';
        id: string;
        level?: SpaceLevel | undefined;
        displayName: string;
        url: string;
      }
    | undefined;
  storageAggregators: Array<{
    __typename?: 'StorageAggregator';
    id: string;
    parentEntity?:
      | {
          __typename?: 'StorageAggregatorParent';
          id: string;
          level?: SpaceLevel | undefined;
          displayName: string;
          url: string;
        }
      | undefined;
  }>;
  storageBuckets: Array<{
    __typename?: 'StorageBucket';
    id: string;
    size: number;
    documents: Array<{
      __typename?: 'Document';
      id: string;
      displayName: string;
      size: number;
      mimeType: MimeType;
      uploadedDate: Date;
      url: string;
      createdBy?:
        | {
            __typename?: 'User';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          }
        | undefined;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
    }>;
    parentEntity?:
      | { __typename?: 'StorageBucketParent'; id: string; type: ProfileType; displayName: string; url: string }
      | undefined;
  }>;
  directStorageBucket: {
    __typename?: 'StorageBucket';
    id: string;
    size: number;
    documents: Array<{
      __typename?: 'Document';
      id: string;
      displayName: string;
      size: number;
      mimeType: MimeType;
      uploadedDate: Date;
      url: string;
      createdBy?:
        | {
            __typename?: 'User';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          }
        | undefined;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
    }>;
    parentEntity?:
      | { __typename?: 'StorageBucketParent'; id: string; type: ProfileType; displayName: string; url: string }
      | undefined;
  };
};

export type LoadableStorageAggregatorFragment = {
  __typename?: 'StorageAggregator';
  id: string;
  parentEntity?:
    | {
        __typename?: 'StorageAggregatorParent';
        id: string;
        level?: SpaceLevel | undefined;
        displayName: string;
        url: string;
      }
    | undefined;
};

export type StorageBucketFragment = {
  __typename?: 'StorageBucket';
  id: string;
  size: number;
  documents: Array<{
    __typename?: 'Document';
    id: string;
    displayName: string;
    size: number;
    mimeType: MimeType;
    uploadedDate: Date;
    url: string;
    createdBy?:
      | {
          __typename?: 'User';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        }
      | undefined;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  }>;
  parentEntity?:
    | { __typename?: 'StorageBucketParent'; id: string; type: ProfileType; displayName: string; url: string }
    | undefined;
};

export type StorageBucketParentFragment = {
  __typename?: 'StorageBucketParent';
  id: string;
  type: ProfileType;
  displayName: string;
  url: string;
};

export type StorageAggregatorParentFragment = {
  __typename?: 'StorageAggregatorParent';
  id: string;
  level?: SpaceLevel | undefined;
  displayName: string;
  url: string;
};

export type DocumentDataFragment = {
  __typename?: 'Document';
  id: string;
  displayName: string;
  size: number;
  mimeType: MimeType;
  uploadedDate: Date;
  url: string;
  createdBy?:
    | {
        __typename?: 'User';
        id: string;
        profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
      }
    | undefined;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
};

export type DeleteDocumentMutationVariables = Exact<{
  documentId: Scalars['UUID']['input'];
}>;

export type DeleteDocumentMutation = {
  __typename?: 'Mutation';
  deleteDocument: { __typename?: 'Document'; id: string };
};

export type SpaceAdminDefaultSpaceTemplatesDetailsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceAdminDefaultSpaceTemplatesDetailsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          templatesManager?:
            | {
                __typename?: 'TemplatesManager';
                id: string;
                templatesSet?:
                  | {
                      __typename?: 'TemplatesSet';
                      id: string;
                      authorization?:
                        | { __typename?: 'Authorization'; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                        | undefined;
                    }
                  | undefined;
                templateDefaults: Array<{
                  __typename?: 'TemplateDefault';
                  id: string;
                  type: TemplateDefaultType;
                  template?:
                    | {
                        __typename?: 'Template';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          description?: string | undefined;
                          tagsets?:
                            | Array<{
                                __typename?: 'Tagset';
                                id: string;
                                name: string;
                                tags: Array<string>;
                                allowedValues: Array<string>;
                                type: TagsetType;
                              }>
                            | undefined;
                          references?:
                            | Array<{
                                __typename?: 'Reference';
                                id: string;
                                name: string;
                                description?: string | undefined;
                                uri: string;
                              }>
                            | undefined;
                          bannerNarrow?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                        contentSpace?:
                          | {
                              __typename?: 'TemplateContentSpace';
                              id: string;
                              collaboration: {
                                __typename?: 'Collaboration';
                                id: string;
                                calloutsSet: {
                                  __typename?: 'CalloutsSet';
                                  id: string;
                                  callouts: Array<{
                                    __typename?: 'Callout';
                                    id: string;
                                    sortOrder: number;
                                    classification?:
                                      | {
                                          __typename?: 'Classification';
                                          id: string;
                                          flowState?:
                                            | {
                                                __typename?: 'Tagset';
                                                id: string;
                                                name: string;
                                                tags: Array<string>;
                                                allowedValues: Array<string>;
                                                type: TagsetType;
                                              }
                                            | undefined;
                                        }
                                      | undefined;
                                    framing: {
                                      __typename?: 'CalloutFraming';
                                      id: string;
                                      type: CalloutFramingType;
                                      profile: {
                                        __typename?: 'Profile';
                                        id: string;
                                        displayName: string;
                                        description?: string | undefined;
                                      };
                                    };
                                  }>;
                                };
                                innovationFlow: {
                                  __typename?: 'InnovationFlow';
                                  id: string;
                                  profile: {
                                    __typename?: 'Profile';
                                    id: string;
                                    displayName: string;
                                    description?: string | undefined;
                                    tagsets?:
                                      | Array<{
                                          __typename?: 'Tagset';
                                          id: string;
                                          name: string;
                                          tags: Array<string>;
                                          allowedValues: Array<string>;
                                          type: TagsetType;
                                        }>
                                      | undefined;
                                    references?:
                                      | Array<{
                                          __typename?: 'Reference';
                                          id: string;
                                          name: string;
                                          description?: string | undefined;
                                          uri: string;
                                        }>
                                      | undefined;
                                    bannerNarrow?:
                                      | {
                                          __typename?: 'Visual';
                                          id: string;
                                          uri: string;
                                          name: string;
                                          alternativeText?: string | undefined;
                                        }
                                      | undefined;
                                  };
                                  currentState?: { __typename?: 'InnovationFlowState'; id: string } | undefined;
                                  authorization?:
                                    | {
                                        __typename?: 'Authorization';
                                        id: string;
                                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                                      }
                                    | undefined;
                                  states: Array<{
                                    __typename?: 'InnovationFlowState';
                                    id: string;
                                    displayName: string;
                                    description?: string | undefined;
                                    sortOrder: number;
                                    settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
                                  }>;
                                };
                              };
                            }
                          | undefined;
                      }
                    | undefined;
                }>;
              }
            | undefined;
        }
      | undefined;
  };
};

export type SpacePrivilegesQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpacePrivilegesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }
      | undefined;
  };
};

export type SpaceStorageConfigQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              storageBucket: {
                __typename?: 'StorageBucket';
                id: string;
                allowedMimeTypes: Array<string>;
                maxFileSize: number;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
              };
            };
          };
        }
      | undefined;
  };
};

export type CalloutStorageConfigQueryVariables = Exact<{
  calloutId: Scalars['UUID']['input'];
}>;

export type CalloutStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              storageBucket: {
                __typename?: 'StorageBucket';
                id: string;
                allowedMimeTypes: Array<string>;
                maxFileSize: number;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
              };
            };
          };
        }
      | undefined;
  };
};

export type CalloutPostStorageConfigQueryVariables = Exact<{
  postId: Scalars['UUID']['input'];
}>;

export type CalloutPostStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    post?:
      | {
          __typename?: 'Post';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            storageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              allowedMimeTypes: Array<string>;
              maxFileSize: number;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type UserStorageConfigQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
}>;

export type UserStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    user?:
      | {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            storageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              allowedMimeTypes: Array<string>;
              maxFileSize: number;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type VirtualContributorStorageConfigQueryVariables = Exact<{
  virtualContributorId: Scalars['UUID']['input'];
}>;

export type VirtualContributorStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    virtualContributor?:
      | {
          __typename?: 'VirtualContributor';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            storageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              allowedMimeTypes: Array<string>;
              maxFileSize: number;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type OrganizationStorageConfigQueryVariables = Exact<{
  organizationId: Scalars['UUID']['input'];
}>;

export type OrganizationStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    organization?:
      | {
          __typename?: 'Organization';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            storageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              allowedMimeTypes: Array<string>;
              maxFileSize: number;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type InnovationPackStorageConfigQueryVariables = Exact<{
  innovationPackId: Scalars['UUID']['input'];
}>;

export type InnovationPackStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    innovationPack?:
      | {
          __typename?: 'InnovationPack';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            storageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              allowedMimeTypes: Array<string>;
              maxFileSize: number;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type InnovationHubStorageConfigQueryVariables = Exact<{
  innovationHubId: Scalars['UUID']['input'];
}>;

export type InnovationHubStorageConfigQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    innovationHub?:
      | {
          __typename?: 'InnovationHub';
          profile: {
            __typename?: 'Profile';
            id: string;
            storageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              allowedMimeTypes: Array<string>;
              maxFileSize: number;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type TemplateStorageConfigQueryVariables = Exact<{
  templateId: Scalars['UUID']['input'];
}>;

export type TemplateStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    template?:
      | {
          __typename?: 'Template';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            storageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              allowedMimeTypes: Array<string>;
              maxFileSize: number;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type PlatformStorageConfigQueryVariables = Exact<{ [key: string]: never }>;

export type PlatformStorageConfigQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    storageAggregator: {
      __typename?: 'StorageAggregator';
      id: string;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      directStorageBucket: {
        __typename?: 'StorageBucket';
        id: string;
        allowedMimeTypes: Array<string>;
        maxFileSize: number;
        authorization?:
          | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
          | undefined;
      };
    };
  };
};

export type AccountStorageConfigQueryVariables = Exact<{
  accountId: Scalars['UUID']['input'];
}>;

export type AccountStorageConfigQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    account?:
      | {
          __typename?: 'Account';
          id: string;
          storageAggregator: {
            __typename?: 'StorageAggregator';
            id: string;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            directStorageBucket: {
              __typename?: 'StorageBucket';
              id: string;
              allowedMimeTypes: Array<string>;
              maxFileSize: number;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type ProfileStorageConfigFragment = {
  __typename?: 'Profile';
  id: string;
  storageBucket: {
    __typename?: 'StorageBucket';
    id: string;
    allowedMimeTypes: Array<string>;
    maxFileSize: number;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type CalloutOnCollaborationWithStorageConfigFragment = {
  __typename?: 'Collaboration';
  id: string;
  calloutsSet: {
    __typename?: 'CalloutsSet';
    id: string;
    callouts: Array<{
      __typename?: 'Callout';
      id: string;
      framing: {
        __typename?: 'CalloutFraming';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          storageBucket: {
            __typename?: 'StorageBucket';
            id: string;
            allowedMimeTypes: Array<string>;
            maxFileSize: number;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
          };
        };
      };
    }>;
  };
};

export type SpaceContentTemplatesOnSpaceQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceContentTemplatesOnSpaceQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          templatesManager?:
            | {
                __typename?: 'TemplatesManager';
                id: string;
                templatesSet?:
                  | {
                      __typename?: 'TemplatesSet';
                      id: string;
                      spaceTemplates: Array<{
                        __typename?: 'Template';
                        id: string;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      }>;
                    }
                  | undefined;
              }
            | undefined;
        }
      | undefined;
  };
};

export type SpaceDefaultTemplatesQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceDefaultTemplatesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          templatesManager?:
            | {
                __typename?: 'TemplatesManager';
                id: string;
                templateDefaults: Array<{
                  __typename?: 'TemplateDefault';
                  id: string;
                  type: TemplateDefaultType;
                  template?:
                    | {
                        __typename?: 'Template';
                        id: string;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      }
                    | undefined;
                }>;
              }
            | undefined;
        }
      | undefined;
  };
};

export type ImportTemplateDialogQueryVariables = Exact<{
  templatesSetId: Scalars['UUID']['input'];
  includeSpace?: InputMaybe<Scalars['Boolean']['input']>;
  includeCallout?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type ImportTemplateDialogQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    templatesSet?:
      | {
          __typename?: 'TemplatesSet';
          templates: Array<{
            __typename?: 'Template';
            id: string;
            type: TemplateType;
            callout?: { __typename?: 'Callout'; id: string } | undefined;
            contentSpace?:
              | {
                  __typename?: 'TemplateContentSpace';
                  id: string;
                  collaboration: {
                    __typename?: 'Collaboration';
                    id: string;
                    innovationFlow: {
                      __typename?: 'InnovationFlow';
                      id: string;
                      states: Array<{ __typename?: 'InnovationFlowState'; displayName: string }>;
                    };
                  };
                }
              | undefined;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              defaultTagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
        }
      | undefined;
  };
};

export type ImportTemplateDialogPlatformTemplatesQueryVariables = Exact<{
  templateTypes?: InputMaybe<Array<TemplateType> | TemplateType>;
  includeSpace?: InputMaybe<Scalars['Boolean']['input']>;
  includeCallout?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type ImportTemplateDialogPlatformTemplatesQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    library: {
      __typename?: 'Library';
      templates: Array<{
        __typename?: 'TemplateResult';
        template: {
          __typename?: 'Template';
          id: string;
          type: TemplateType;
          callout?: { __typename?: 'Callout'; id: string } | undefined;
          contentSpace?:
            | {
                __typename?: 'TemplateContentSpace';
                id: string;
                collaboration: {
                  __typename?: 'Collaboration';
                  id: string;
                  innovationFlow: {
                    __typename?: 'InnovationFlow';
                    id: string;
                    states: Array<{ __typename?: 'InnovationFlowState'; displayName: string }>;
                  };
                };
              }
            | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            defaultTagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            visual?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        };
        innovationPack: {
          __typename?: 'InnovationPack';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          provider:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              };
        };
      }>;
    };
  };
};

export type AllTemplatesInTemplatesSetQueryVariables = Exact<{
  templatesSetId: Scalars['UUID']['input'];
}>;

export type AllTemplatesInTemplatesSetQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    templatesSet?:
      | {
          __typename?: 'TemplatesSet';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          calloutTemplates: Array<{
            __typename?: 'Template';
            id: string;
            type: TemplateType;
            callout?:
              | {
                  __typename?: 'Callout';
                  id: string;
                  settings: {
                    __typename?: 'CalloutSettings';
                    contribution: {
                      __typename?: 'CalloutSettingsContribution';
                      enabled: boolean;
                      allowedTypes: Array<CalloutContributionType>;
                    };
                  };
                }
              | undefined;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              defaultTagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
          postTemplates: Array<{
            __typename?: 'Template';
            postDefaultDescription?: string | undefined;
            id: string;
            type: TemplateType;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              defaultTagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
          whiteboardTemplates: Array<{
            __typename?: 'Template';
            id: string;
            type: TemplateType;
            whiteboard?: { __typename?: 'Whiteboard'; id: string } | undefined;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              defaultTagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
          communityGuidelinesTemplates: Array<{
            __typename?: 'Template';
            id: string;
            type: TemplateType;
            communityGuidelines?:
              | {
                  __typename?: 'CommunityGuidelines';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    references?:
                      | Array<{
                          __typename?: 'Reference';
                          id: string;
                          name: string;
                          uri: string;
                          description?: string | undefined;
                        }>
                      | undefined;
                  };
                }
              | undefined;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              defaultTagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
          spaceTemplates: Array<{
            __typename?: 'Template';
            id: string;
            type: TemplateType;
            contentSpace?:
              | {
                  __typename?: 'TemplateContentSpace';
                  id: string;
                  collaboration: {
                    __typename?: 'Collaboration';
                    id: string;
                    innovationFlow: {
                      __typename?: 'InnovationFlow';
                      id: string;
                      states: Array<{
                        __typename?: 'InnovationFlowState';
                        displayName: string;
                        description?: string | undefined;
                      }>;
                    };
                  };
                }
              | undefined;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              defaultTagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
        }
      | undefined;
  };
};

export type TemplateCardProfileInfoFragment = {
  __typename?: 'Profile';
  id: string;
  displayName: string;
  description?: string | undefined;
  tagset?:
    | {
        __typename?: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: TagsetType;
      }
    | undefined;
  visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
};

export type TemplateContentQueryVariables = Exact<{
  templateId: Scalars['UUID']['input'];
  includeCallout?: InputMaybe<Scalars['Boolean']['input']>;
  includeCommunityGuidelines?: InputMaybe<Scalars['Boolean']['input']>;
  includeSpace?: InputMaybe<Scalars['Boolean']['input']>;
  includePost?: InputMaybe<Scalars['Boolean']['input']>;
  includeWhiteboard?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type TemplateContentQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    template?:
      | {
          __typename?: 'Template';
          id: string;
          type: TemplateType;
          postDefaultDescription?: string | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            defaultTagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
          callout?:
            | {
                __typename?: 'Callout';
                id: string;
                framing: {
                  __typename?: 'CalloutFraming';
                  id: string;
                  type: CalloutFramingType;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    defaultTagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                    references?:
                      | Array<{
                          __typename?: 'Reference';
                          id: string;
                          name: string;
                          uri: string;
                          description?: string | undefined;
                        }>
                      | undefined;
                    storageBucket: { __typename?: 'StorageBucket'; id: string };
                  };
                  whiteboard?:
                    | {
                        __typename?: 'Whiteboard';
                        content: string;
                        id: string;
                        nameID: string;
                        createdDate: Date;
                        contentUpdatePolicy: ContentUpdatePolicy;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          url: string;
                          displayName: string;
                          description?: string | undefined;
                          visual?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                allowedTypes: Array<string>;
                                aspectRatio: number;
                                maxHeight: number;
                                maxWidth: number;
                                minHeight: number;
                                minWidth: number;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                          preview?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                allowedTypes: Array<string>;
                                aspectRatio: number;
                                maxHeight: number;
                                maxWidth: number;
                                minHeight: number;
                                minWidth: number;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                          tagset?:
                            | {
                                __typename?: 'Tagset';
                                id: string;
                                name: string;
                                tags: Array<string>;
                                allowedValues: Array<string>;
                                type: TagsetType;
                              }
                            | undefined;
                          storageBucket: { __typename?: 'StorageBucket'; id: string };
                        };
                        authorization?:
                          | {
                              __typename?: 'Authorization';
                              id: string;
                              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                            }
                          | undefined;
                        createdBy?:
                          | {
                              __typename?: 'User';
                              id: string;
                              profile: {
                                __typename?: 'Profile';
                                id: string;
                                displayName: string;
                                url: string;
                                location?:
                                  | {
                                      __typename?: 'Location';
                                      id: string;
                                      country?: string | undefined;
                                      city?: string | undefined;
                                    }
                                  | undefined;
                                avatar?:
                                  | {
                                      __typename?: 'Visual';
                                      id: string;
                                      uri: string;
                                      name: string;
                                      alternativeText?: string | undefined;
                                    }
                                  | undefined;
                              };
                            }
                          | undefined;
                      }
                    | undefined;
                  link?:
                    | {
                        __typename?: 'Link';
                        id: string;
                        uri: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          description?: string | undefined;
                        };
                      }
                    | undefined;
                  memo?:
                    | {
                        __typename?: 'Memo';
                        id: string;
                        markdown?: string | undefined;
                        profile: { __typename?: 'Profile'; id: string; displayName: string };
                      }
                    | undefined;
                };
                settings: {
                  __typename?: 'CalloutSettings';
                  visibility: CalloutVisibility;
                  contribution: {
                    __typename?: 'CalloutSettingsContribution';
                    enabled: boolean;
                    allowedTypes: Array<CalloutContributionType>;
                    canAddContributions: CalloutAllowedContributors;
                    commentsEnabled: boolean;
                  };
                  framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
                };
                contributionDefaults: {
                  __typename?: 'CalloutContributionDefaults';
                  id: string;
                  defaultDisplayName?: string | undefined;
                  postDescription?: string | undefined;
                  whiteboardContent?: string | undefined;
                };
              }
            | undefined;
          communityGuidelines?:
            | {
                __typename?: 'CommunityGuidelines';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  references?:
                    | Array<{
                        __typename?: 'Reference';
                        id: string;
                        name: string;
                        uri: string;
                        description?: string | undefined;
                        authorization?:
                          | {
                              __typename?: 'Authorization';
                              id: string;
                              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                            }
                          | undefined;
                      }>
                    | undefined;
                };
              }
            | undefined;
          whiteboard?:
            | {
                __typename?: 'Whiteboard';
                id: string;
                content: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  preview?: { __typename?: 'Visual'; name: string; uri: string } | undefined;
                };
              }
            | undefined;
          contentSpace?:
            | {
                __typename?: 'TemplateContentSpace';
                id: string;
                collaboration: {
                  __typename?: 'Collaboration';
                  id: string;
                  innovationFlow: {
                    __typename?: 'InnovationFlow';
                    id: string;
                    states: Array<{
                      __typename?: 'InnovationFlowState';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      sortOrder: number;
                      settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
                    }>;
                  };
                  calloutsSet: {
                    __typename?: 'CalloutsSet';
                    id: string;
                    callouts: Array<{
                      __typename?: 'Callout';
                      id: string;
                      sortOrder: number;
                      classification?:
                        | {
                            __typename?: 'Classification';
                            id: string;
                            flowState?:
                              | {
                                  __typename?: 'Tagset';
                                  id: string;
                                  name: string;
                                  tags: Array<string>;
                                  allowedValues: Array<string>;
                                  type: TagsetType;
                                }
                              | undefined;
                          }
                        | undefined;
                      framing: {
                        __typename?: 'CalloutFraming';
                        id: string;
                        type: CalloutFramingType;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          description?: string | undefined;
                        };
                        whiteboard?:
                          | {
                              __typename?: 'Whiteboard';
                              id: string;
                              profile: {
                                __typename?: 'Profile';
                                preview?:
                                  | {
                                      __typename?: 'Visual';
                                      id: string;
                                      uri: string;
                                      name: string;
                                      alternativeText?: string | undefined;
                                    }
                                  | undefined;
                              };
                            }
                          | undefined;
                      };
                    }>;
                  };
                };
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    tagline?: string | undefined;
                    url: string;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    visuals: Array<{
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }>;
                  };
                };
                settings: {
                  __typename?: 'SpaceSettings';
                  privacy: {
                    __typename?: 'SpaceSettingsPrivacy';
                    mode: SpacePrivacyMode;
                    allowPlatformSupportAsAdmin: boolean;
                  };
                  membership: {
                    __typename?: 'SpaceSettingsMembership';
                    policy: CommunityMembershipPolicy;
                    allowSubspaceAdminsToInviteMembers: boolean;
                    trustedOrganizations: Array<string>;
                  };
                  collaboration: {
                    __typename?: 'SpaceSettingsCollaboration';
                    allowMembersToCreateCallouts: boolean;
                    allowMembersToCreateSubspaces: boolean;
                    inheritMembershipRights: boolean;
                    allowEventsFromSubspaces: boolean;
                  };
                };
                subspaces: Array<{
                  __typename?: 'TemplateContentSpace';
                  id: string;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    isContentPublic: boolean;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      tagline?: string | undefined;
                      url: string;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                    };
                  };
                }>;
              }
            | undefined;
        }
      | undefined;
  };
};

export type SpaceTemplateContentQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceTemplateContentQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            innovationFlow: {
              __typename?: 'InnovationFlow';
              id: string;
              states: Array<{
                __typename?: 'InnovationFlowState';
                id: string;
                displayName: string;
                description?: string | undefined;
                sortOrder: number;
                settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
              }>;
            };
            calloutsSet: {
              __typename?: 'CalloutsSet';
              id: string;
              callouts: Array<{
                __typename?: 'Callout';
                id: string;
                sortOrder: number;
                classification?:
                  | {
                      __typename?: 'Classification';
                      id: string;
                      flowState?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    }
                  | undefined;
                framing: {
                  __typename?: 'CalloutFraming';
                  id: string;
                  type: CalloutFramingType;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                  };
                  whiteboard?:
                    | {
                        __typename?: 'Whiteboard';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          preview?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | undefined;
                };
              }>;
            };
          };
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              tagline?: string | undefined;
              url: string;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              visuals: Array<{
                __typename?: 'Visual';
                id: string;
                uri: string;
                name: string;
                alternativeText?: string | undefined;
              }>;
            };
          };
          settings: {
            __typename?: 'SpaceSettings';
            privacy: {
              __typename?: 'SpaceSettingsPrivacy';
              mode: SpacePrivacyMode;
              allowPlatformSupportAsAdmin: boolean;
            };
            membership: {
              __typename?: 'SpaceSettingsMembership';
              policy: CommunityMembershipPolicy;
              allowSubspaceAdminsToInviteMembers: boolean;
              trustedOrganizations: Array<string>;
            };
            collaboration: {
              __typename?: 'SpaceSettingsCollaboration';
              allowMembersToCreateCallouts: boolean;
              allowMembersToCreateSubspaces: boolean;
              inheritMembershipRights: boolean;
              allowEventsFromSubspaces: boolean;
            };
          };
          subspaces: Array<{
            __typename?: 'Space';
            id: string;
            about: {
              __typename?: 'SpaceAbout';
              id: string;
              isContentPublic: boolean;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                tagline?: string | undefined;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                cardBanner?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
          }>;
        }
      | undefined;
  };
};

export type CalloutTemplateContentFragment = {
  __typename?: 'Callout';
  id: string;
  framing: {
    __typename?: 'CalloutFraming';
    id: string;
    type: CalloutFramingType;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
      defaultTagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
      storageBucket: { __typename?: 'StorageBucket'; id: string };
    };
    whiteboard?:
      | {
          __typename?: 'Whiteboard';
          content: string;
          id: string;
          nameID: string;
          createdDate: Date;
          contentUpdatePolicy: ContentUpdatePolicy;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            description?: string | undefined;
            visual?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            preview?:
              | {
                  __typename?: 'Visual';
                  id: string;
                  uri: string;
                  name: string;
                  allowedTypes: Array<string>;
                  aspectRatio: number;
                  maxHeight: number;
                  maxWidth: number;
                  minHeight: number;
                  minWidth: number;
                  alternativeText?: string | undefined;
                }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            storageBucket: { __typename?: 'StorageBucket'; id: string };
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          createdBy?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  location?:
                    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                    | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }
      | undefined;
    link?:
      | {
          __typename?: 'Link';
          id: string;
          uri: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
        }
      | undefined;
    memo?:
      | {
          __typename?: 'Memo';
          id: string;
          markdown?: string | undefined;
          profile: { __typename?: 'Profile'; id: string; displayName: string };
        }
      | undefined;
  };
  settings: {
    __typename?: 'CalloutSettings';
    visibility: CalloutVisibility;
    contribution: {
      __typename?: 'CalloutSettingsContribution';
      enabled: boolean;
      allowedTypes: Array<CalloutContributionType>;
      canAddContributions: CalloutAllowedContributors;
      commentsEnabled: boolean;
    };
    framing: { __typename?: 'CalloutSettingsFraming'; commentsEnabled: boolean };
  };
  contributionDefaults: {
    __typename?: 'CalloutContributionDefaults';
    id: string;
    defaultDisplayName?: string | undefined;
    postDescription?: string | undefined;
    whiteboardContent?: string | undefined;
  };
};

export type MemoTemplateDetailsFragment = {
  __typename?: 'Memo';
  id: string;
  markdown?: string | undefined;
  profile: { __typename?: 'Profile'; id: string; displayName: string };
};

export type CommunityGuidelinesTemplateContentFragment = {
  __typename?: 'CommunityGuidelines';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    references?:
      | Array<{
          __typename?: 'Reference';
          id: string;
          name: string;
          uri: string;
          description?: string | undefined;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        }>
      | undefined;
  };
};

export type SpaceTemplateContentFragment = {
  __typename?: 'TemplateContentSpace';
  id: string;
  collaboration: {
    __typename?: 'Collaboration';
    id: string;
    innovationFlow: {
      __typename?: 'InnovationFlow';
      id: string;
      states: Array<{
        __typename?: 'InnovationFlowState';
        id: string;
        displayName: string;
        description?: string | undefined;
        sortOrder: number;
        settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
      }>;
    };
    calloutsSet: {
      __typename?: 'CalloutsSet';
      id: string;
      callouts: Array<{
        __typename?: 'Callout';
        id: string;
        sortOrder: number;
        classification?:
          | {
              __typename?: 'Classification';
              id: string;
              flowState?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
            }
          | undefined;
        framing: {
          __typename?: 'CalloutFraming';
          id: string;
          type: CalloutFramingType;
          profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
          whiteboard?:
            | {
                __typename?: 'Whiteboard';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  preview?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        };
      }>;
    };
  };
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      tagline?: string | undefined;
      url: string;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
      visuals: Array<{
        __typename?: 'Visual';
        id: string;
        uri: string;
        name: string;
        alternativeText?: string | undefined;
      }>;
    };
  };
  settings: {
    __typename?: 'SpaceSettings';
    privacy: { __typename?: 'SpaceSettingsPrivacy'; mode: SpacePrivacyMode; allowPlatformSupportAsAdmin: boolean };
    membership: {
      __typename?: 'SpaceSettingsMembership';
      policy: CommunityMembershipPolicy;
      allowSubspaceAdminsToInviteMembers: boolean;
      trustedOrganizations: Array<string>;
    };
    collaboration: {
      __typename?: 'SpaceSettingsCollaboration';
      allowMembersToCreateCallouts: boolean;
      allowMembersToCreateSubspaces: boolean;
      inheritMembershipRights: boolean;
      allowEventsFromSubspaces: boolean;
    };
  };
  subspaces: Array<{
    __typename?: 'TemplateContentSpace';
    id: string;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        tagline?: string | undefined;
        url: string;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
    };
  }>;
};

export type SpaceTemplateContent_CollaborationFragment = {
  __typename?: 'Collaboration';
  id: string;
  innovationFlow: {
    __typename?: 'InnovationFlow';
    id: string;
    states: Array<{
      __typename?: 'InnovationFlowState';
      id: string;
      displayName: string;
      description?: string | undefined;
      sortOrder: number;
      settings: { __typename?: 'InnovationFlowStateSettings'; allowNewCallouts: boolean };
    }>;
  };
  calloutsSet: {
    __typename?: 'CalloutsSet';
    id: string;
    callouts: Array<{
      __typename?: 'Callout';
      id: string;
      sortOrder: number;
      classification?:
        | {
            __typename?: 'Classification';
            id: string;
            flowState?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          }
        | undefined;
      framing: {
        __typename?: 'CalloutFraming';
        id: string;
        type: CalloutFramingType;
        profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
        whiteboard?:
          | {
              __typename?: 'Whiteboard';
              id: string;
              profile: {
                __typename?: 'Profile';
                preview?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | undefined;
      };
    }>;
  };
};

export type SpaceTemplateContent_AboutFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    tagline?: string | undefined;
    url: string;
    tagsets?:
      | Array<{
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }>
      | undefined;
    visuals: Array<{
      __typename?: 'Visual';
      id: string;
      uri: string;
      name: string;
      alternativeText?: string | undefined;
    }>;
  };
};

export type SpaceTemplateContent_SettingsFragment = {
  __typename?: 'SpaceSettings';
  privacy: { __typename?: 'SpaceSettingsPrivacy'; mode: SpacePrivacyMode; allowPlatformSupportAsAdmin: boolean };
  membership: {
    __typename?: 'SpaceSettingsMembership';
    policy: CommunityMembershipPolicy;
    allowSubspaceAdminsToInviteMembers: boolean;
    trustedOrganizations: Array<string>;
  };
  collaboration: {
    __typename?: 'SpaceSettingsCollaboration';
    allowMembersToCreateCallouts: boolean;
    allowMembersToCreateSubspaces: boolean;
    inheritMembershipRights: boolean;
    allowEventsFromSubspaces: boolean;
  };
};

export type SpaceTemplateContent_SubspacesFragment = {
  __typename?: 'SpaceAbout';
  id: string;
  isContentPublic: boolean;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    tagline?: string | undefined;
    url: string;
    avatar?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
    cardBanner?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type WhiteboardTemplateContentFragment = {
  __typename?: 'Whiteboard';
  id: string;
  content: string;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    preview?: { __typename?: 'Visual'; name: string; uri: string } | undefined;
  };
};

export type TemplateProfileInfoFragment = {
  __typename?: 'Template';
  id: string;
  type: TemplateType;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    defaultTagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type CalloutTemplateFragment = {
  __typename?: 'Template';
  id: string;
  type: TemplateType;
  callout?:
    | {
        __typename?: 'Callout';
        id: string;
        settings: {
          __typename?: 'CalloutSettings';
          contribution: {
            __typename?: 'CalloutSettingsContribution';
            enabled: boolean;
            allowedTypes: Array<CalloutContributionType>;
          };
        };
      }
    | undefined;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    defaultTagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type PostTemplateFragment = {
  __typename?: 'Template';
  postDefaultDescription?: string | undefined;
  id: string;
  type: TemplateType;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    defaultTagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type SpaceTemplateFragment = {
  __typename?: 'Template';
  id: string;
  type: TemplateType;
  contentSpace?:
    | {
        __typename?: 'TemplateContentSpace';
        id: string;
        collaboration: {
          __typename?: 'Collaboration';
          id: string;
          innovationFlow: {
            __typename?: 'InnovationFlow';
            id: string;
            states: Array<{
              __typename?: 'InnovationFlowState';
              displayName: string;
              description?: string | undefined;
            }>;
          };
        };
      }
    | undefined;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    defaultTagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type WhiteboardTemplateFragment = {
  __typename?: 'Template';
  id: string;
  type: TemplateType;
  whiteboard?: { __typename?: 'Whiteboard'; id: string } | undefined;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    defaultTagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type CommunityGuidelinesTemplateFragment = {
  __typename?: 'Template';
  id: string;
  type: TemplateType;
  communityGuidelines?:
    | {
        __typename?: 'CommunityGuidelines';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          description?: string | undefined;
          references?:
            | Array<{
                __typename?: 'Reference';
                id: string;
                name: string;
                uri: string;
                description?: string | undefined;
              }>
            | undefined;
        };
      }
    | undefined;
  profile: {
    __typename?: 'Profile';
    id: string;
    displayName: string;
    description?: string | undefined;
    url: string;
    defaultTagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    visual?:
      | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
      | undefined;
  };
};

export type CreateTemplateMutationVariables = Exact<{
  templatesSetId: Scalars['UUID']['input'];
  profileData: CreateProfileInput;
  type: TemplateType;
  tags?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  calloutData?: InputMaybe<CreateCalloutInput>;
  communityGuidelinesData?: InputMaybe<CreateCommunityGuidelinesInput>;
  contentSpaceData?: InputMaybe<CreateTemplateContentSpaceInput>;
  postDefaultDescription?: InputMaybe<Scalars['Markdown']['input']>;
  whiteboard?: InputMaybe<CreateWhiteboardInput>;
  includeProfileVisuals?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CreateTemplateMutation = {
  __typename?: 'Mutation';
  createTemplate: {
    __typename?: 'Template';
    id: string;
    nameID: string;
    profile?: {
      __typename?: 'Profile';
      id: string;
      cardVisual?: { __typename?: 'Visual'; id: string } | undefined;
      previewVisual?: { __typename?: 'Visual'; id: string } | undefined;
    };
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            whiteboard?:
              | {
                  __typename?: 'Whiteboard';
                  id: string;
                  nameID: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    previewVisual?: { __typename?: 'Visual'; id: string } | undefined;
                  };
                }
              | undefined;
          };
        }
      | undefined;
  };
};

export type CreateTemplateFromContentSpaceMutationVariables = Exact<{
  templatesSetId: Scalars['UUID']['input'];
  profileData: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  contentSpaceId: Scalars['UUID']['input'];
}>;

export type CreateTemplateFromContentSpaceMutation = {
  __typename?: 'Mutation';
  createTemplateFromContentSpace: { __typename?: 'Template'; id: string };
};

export type CreateTemplateFromSpaceMutationVariables = Exact<{
  templatesSetId: Scalars['UUID']['input'];
  profileData: CreateProfileInput;
  tags?: InputMaybe<Array<Scalars['String']['input']> | Scalars['String']['input']>;
  spaceId: Scalars['UUID']['input'];
  recursive?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CreateTemplateFromSpaceMutation = {
  __typename?: 'Mutation';
  createTemplateFromSpace: { __typename?: 'Template'; id: string };
};

export type UpdateTemplateMutationVariables = Exact<{
  templateId: Scalars['UUID']['input'];
  profile: UpdateProfileInput;
  postDefaultDescription?: InputMaybe<Scalars['Markdown']['input']>;
  whiteboardContent?: InputMaybe<Scalars['WhiteboardContent']['input']>;
  includeProfileVisuals?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type UpdateTemplateMutation = {
  __typename?: 'Mutation';
  updateTemplate: {
    __typename?: 'Template';
    id: string;
    nameID: string;
    profile?: {
      __typename?: 'Profile';
      id: string;
      cardVisual?: { __typename?: 'Visual'; id: string } | undefined;
      previewVisual?: { __typename?: 'Visual'; id: string } | undefined;
    };
    whiteboard?: { __typename?: 'Whiteboard'; id: string; content: string } | undefined;
  };
};

export type UpdateCalloutTemplateMutationVariables = Exact<{
  calloutData: UpdateCalloutEntityInput;
}>;

export type UpdateCalloutTemplateMutation = {
  __typename?: 'Mutation';
  updateCallout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      type: CalloutFramingType;
      profile: {
        __typename?: 'Profile';
        id: string;
        description?: string | undefined;
        displayName: string;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
        references?: Array<{ __typename?: 'Reference'; id: string; name: string; uri: string }> | undefined;
      };
      whiteboard?:
        | {
            __typename?: 'Whiteboard';
            id: string;
            content: string;
            nameID: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              previewVisual?: { __typename?: 'Visual'; id: string } | undefined;
            };
          }
        | undefined;
      memo?: { __typename?: 'Memo'; id: string; markdown?: string | undefined } | undefined;
    };
    contributionDefaults: {
      __typename?: 'CalloutContributionDefaults';
      id: string;
      postDescription?: string | undefined;
      whiteboardContent?: string | undefined;
    };
    settings: {
      __typename?: 'CalloutSettings';
      visibility: CalloutVisibility;
      contribution: {
        __typename?: 'CalloutSettingsContribution';
        enabled: boolean;
        allowedTypes: Array<CalloutContributionType>;
      };
    };
  };
};

export type UpdateTemplateFromSpaceMutationVariables = Exact<{
  templateId: Scalars['UUID']['input'];
  spaceId: Scalars['UUID']['input'];
  recursive?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type UpdateTemplateFromSpaceMutation = {
  __typename?: 'Mutation';
  updateTemplateFromSpace: { __typename?: 'Template'; id: string };
};

export type DeleteTemplateMutationVariables = Exact<{
  templateId: Scalars['UUID']['input'];
}>;

export type DeleteTemplateMutation = {
  __typename?: 'Mutation';
  deleteTemplate: { __typename?: 'Template'; id: string };
};

export type TemplateNameQueryVariables = Exact<{
  templateId: Scalars['UUID']['input'];
}>;

export type TemplateNameQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    template?:
      | { __typename?: 'Template'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
      | undefined;
  };
};

export type UpdateTemplateDefaultMutationVariables = Exact<{
  templateDefaultID: Scalars['UUID']['input'];
  templateID: Scalars['UUID']['input'];
}>;

export type UpdateTemplateDefaultMutation = {
  __typename?: 'Mutation';
  updateTemplateDefault: { __typename?: 'TemplateDefault'; id: string };
};

export type TemplatesSetTemplatesFragment = {
  __typename?: 'TemplatesSet';
  calloutTemplates: Array<{
    __typename?: 'Template';
    id: string;
    type: TemplateType;
    callout?:
      | {
          __typename?: 'Callout';
          id: string;
          settings: {
            __typename?: 'CalloutSettings';
            contribution: {
              __typename?: 'CalloutSettingsContribution';
              enabled: boolean;
              allowedTypes: Array<CalloutContributionType>;
            };
          };
        }
      | undefined;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      defaultTagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  }>;
  postTemplates: Array<{
    __typename?: 'Template';
    postDefaultDescription?: string | undefined;
    id: string;
    type: TemplateType;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      defaultTagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  }>;
  whiteboardTemplates: Array<{
    __typename?: 'Template';
    id: string;
    type: TemplateType;
    whiteboard?: { __typename?: 'Whiteboard'; id: string } | undefined;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      defaultTagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  }>;
  communityGuidelinesTemplates: Array<{
    __typename?: 'Template';
    id: string;
    type: TemplateType;
    communityGuidelines?:
      | {
          __typename?: 'CommunityGuidelines';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
          };
        }
      | undefined;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      defaultTagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  }>;
  spaceTemplates: Array<{
    __typename?: 'Template';
    id: string;
    type: TemplateType;
    contentSpace?:
      | {
          __typename?: 'TemplateContentSpace';
          id: string;
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            innovationFlow: {
              __typename?: 'InnovationFlow';
              id: string;
              states: Array<{
                __typename?: 'InnovationFlowState';
                displayName: string;
                description?: string | undefined;
              }>;
            };
          };
        }
      | undefined;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      defaultTagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  }>;
};

export type SpaceCalendarEventsQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
  includeSubspace?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type SpaceCalendarEventsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          collaboration: {
            __typename?: 'Collaboration';
            id: string;
            timeline: {
              __typename?: 'Timeline';
              id: string;
              calendar: {
                __typename?: 'Calendar';
                id: string;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
                events: Array<{
                  __typename?: 'CalendarEvent';
                  id: string;
                  type: CalendarEventType;
                  startDate?: Date | undefined;
                  durationDays?: number | undefined;
                  durationMinutes: number;
                  wholeDay: boolean;
                  multipleDays: boolean;
                  visibleOnParentCalendar: boolean;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    url: string;
                    displayName: string;
                    description?: string | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                    references?:
                      | Array<{
                          __typename?: 'Reference';
                          id: string;
                          name: string;
                          uri: string;
                          description?: string | undefined;
                        }>
                      | undefined;
                    location?: { __typename?: 'Location'; id: string; city?: string | undefined } | undefined;
                  };
                  subspace?:
                    | {
                        __typename?: 'Space';
                        id: string;
                        about: {
                          __typename?: 'SpaceAbout';
                          id: string;
                          isContentPublic: boolean;
                          profile: {
                            __typename?: 'Profile';
                            id: string;
                            displayName: string;
                            url: string;
                            tagline?: string | undefined;
                            description?: string | undefined;
                            tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                            avatar?:
                              | {
                                  __typename?: 'Visual';
                                  id: string;
                                  uri: string;
                                  name: string;
                                  alternativeText?: string | undefined;
                                }
                              | undefined;
                            cardBanner?:
                              | {
                                  __typename?: 'Visual';
                                  id: string;
                                  uri: string;
                                  name: string;
                                  alternativeText?: string | undefined;
                                }
                              | undefined;
                          };
                          membership: {
                            __typename?: 'SpaceAboutMembership';
                            myMembershipStatus?: CommunityMembershipStatus | undefined;
                            myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                            communityID: string;
                            roleSetID: string;
                          };
                          guidelines: { __typename?: 'CommunityGuidelines'; id: string };
                        };
                      }
                    | undefined;
                }>;
              };
            };
          };
        }
      | undefined;
  };
};

export type CollaborationTimelineInfoFragment = {
  __typename?: 'Collaboration';
  id: string;
  timeline: {
    __typename?: 'Timeline';
    id: string;
    calendar: {
      __typename?: 'Calendar';
      id: string;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      events: Array<{
        __typename?: 'CalendarEvent';
        id: string;
        type: CalendarEventType;
        startDate?: Date | undefined;
        durationDays?: number | undefined;
        durationMinutes: number;
        wholeDay: boolean;
        multipleDays: boolean;
        visibleOnParentCalendar: boolean;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          description?: string | undefined;
          tagset?:
            | {
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }
            | undefined;
          references?:
            | Array<{
                __typename?: 'Reference';
                id: string;
                name: string;
                uri: string;
                description?: string | undefined;
              }>
            | undefined;
          location?: { __typename?: 'Location'; id: string; city?: string | undefined } | undefined;
        };
        subspace?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                isContentPublic: boolean;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  tagline?: string | undefined;
                  description?: string | undefined;
                  tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
                membership: {
                  __typename?: 'SpaceAboutMembership';
                  myMembershipStatus?: CommunityMembershipStatus | undefined;
                  myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                  communityID: string;
                  roleSetID: string;
                };
                guidelines: { __typename?: 'CommunityGuidelines'; id: string };
              };
            }
          | undefined;
      }>;
    };
  };
};

export type DashboardTimelineAuthorizationFragment = {
  __typename?: 'Collaboration';
  timeline: {
    __typename?: 'Timeline';
    id: string;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
  };
};

export type CalendarEventInfoFragment = {
  __typename?: 'CalendarEvent';
  id: string;
  type: CalendarEventType;
  startDate?: Date | undefined;
  durationDays?: number | undefined;
  durationMinutes: number;
  wholeDay: boolean;
  multipleDays: boolean;
  visibleOnParentCalendar: boolean;
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: string | undefined;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
    location?: { __typename?: 'Location'; id: string; city?: string | undefined } | undefined;
  };
  subspace?:
    | {
        __typename?: 'Space';
        id: string;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          isContentPublic: boolean;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            tagline?: string | undefined;
            description?: string | undefined;
            tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
          membership: {
            __typename?: 'SpaceAboutMembership';
            myMembershipStatus?: CommunityMembershipStatus | undefined;
            myPrivileges?: Array<AuthorizationPrivilege> | undefined;
            communityID: string;
            roleSetID: string;
          };
          guidelines: { __typename?: 'CommunityGuidelines'; id: string };
        };
      }
    | undefined;
};

export type CalendarEventDetailsQueryVariables = Exact<{
  eventId: Scalars['UUID']['input'];
  includeSubspace?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CalendarEventDetailsQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    calendarEvent?:
      | {
          __typename?: 'CalendarEvent';
          createdDate: Date;
          id: string;
          type: CalendarEventType;
          startDate?: Date | undefined;
          durationDays?: number | undefined;
          durationMinutes: number;
          wholeDay: boolean;
          multipleDays: boolean;
          visibleOnParentCalendar: boolean;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          createdBy?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                  tagsets?:
                    | Array<{
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }>
                    | undefined;
                };
              }
            | undefined;
          comments: {
            __typename?: 'Room';
            id: string;
            messagesCount: number;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            messages: Array<{
              __typename?: 'Message';
              id: string;
              message: string;
              timestamp: number;
              threadID?: string | undefined;
              reactions: Array<{
                __typename?: 'Reaction';
                id: string;
                emoji: string;
                sender?:
                  | {
                      __typename?: 'User';
                      id: string;
                      profile: { __typename?: 'Profile'; id: string; displayName: string };
                    }
                  | undefined;
              }>;
              sender?:
                | {
                    __typename?: 'Organization';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      description?: string | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagsets?:
                        | Array<{
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }>
                        | undefined;
                      location?:
                        | {
                            __typename?: 'Location';
                            id: string;
                            country?: string | undefined;
                            city?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | {
                    __typename?: 'User';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      description?: string | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagsets?:
                        | Array<{
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }>
                        | undefined;
                      location?:
                        | {
                            __typename?: 'Location';
                            id: string;
                            country?: string | undefined;
                            city?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | {
                    __typename?: 'VirtualContributor';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      description?: string | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagsets?:
                        | Array<{
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }>
                        | undefined;
                      location?:
                        | {
                            __typename?: 'Location';
                            id: string;
                            country?: string | undefined;
                            city?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | undefined;
            }>;
            vcInteractions: Array<{
              __typename?: 'VcInteraction';
              id: string;
              threadID: string;
              virtualContributorID: string;
            }>;
          };
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            description?: string | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            references?:
              | Array<{
                  __typename?: 'Reference';
                  id: string;
                  name: string;
                  uri: string;
                  description?: string | undefined;
                }>
              | undefined;
            location?: { __typename?: 'Location'; id: string; city?: string | undefined } | undefined;
          };
          subspace?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  isContentPublic: boolean;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    tagline?: string | undefined;
                    description?: string | undefined;
                    tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                  membership: {
                    __typename?: 'SpaceAboutMembership';
                    myMembershipStatus?: CommunityMembershipStatus | undefined;
                    myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    communityID: string;
                    roleSetID: string;
                  };
                  guidelines: { __typename?: 'CommunityGuidelines'; id: string };
                };
              }
            | undefined;
        }
      | undefined;
  };
};

export type CalendarEventDetailsFragment = {
  __typename?: 'CalendarEvent';
  createdDate: Date;
  id: string;
  type: CalendarEventType;
  startDate?: Date | undefined;
  durationDays?: number | undefined;
  durationMinutes: number;
  wholeDay: boolean;
  multipleDays: boolean;
  visibleOnParentCalendar: boolean;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  createdBy?:
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          url: string;
          displayName: string;
          visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
          tagsets?:
            | Array<{
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }>
            | undefined;
        };
      }
    | undefined;
  comments: {
    __typename?: 'Room';
    id: string;
    messagesCount: number;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    messages: Array<{
      __typename?: 'Message';
      id: string;
      message: string;
      timestamp: number;
      threadID?: string | undefined;
      reactions: Array<{
        __typename?: 'Reaction';
        id: string;
        emoji: string;
        sender?:
          | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
          | undefined;
      }>;
      sender?:
        | {
            __typename?: 'Organization';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              description?: string | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                | undefined;
            };
          }
        | {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              description?: string | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                | undefined;
            };
          }
        | {
            __typename?: 'VirtualContributor';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              description?: string | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagsets?:
                | Array<{
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }>
                | undefined;
              location?:
                | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                | undefined;
            };
          }
        | undefined;
    }>;
    vcInteractions: Array<{ __typename?: 'VcInteraction'; id: string; threadID: string; virtualContributorID: string }>;
  };
  profile: {
    __typename?: 'Profile';
    id: string;
    url: string;
    displayName: string;
    description?: string | undefined;
    tagset?:
      | {
          __typename?: 'Tagset';
          id: string;
          name: string;
          tags: Array<string>;
          allowedValues: Array<string>;
          type: TagsetType;
        }
      | undefined;
    references?:
      | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
      | undefined;
    location?: { __typename?: 'Location'; id: string; city?: string | undefined } | undefined;
  };
  subspace?:
    | {
        __typename?: 'Space';
        id: string;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          isContentPublic: boolean;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            tagline?: string | undefined;
            description?: string | undefined;
            tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
          membership: {
            __typename?: 'SpaceAboutMembership';
            myMembershipStatus?: CommunityMembershipStatus | undefined;
            myPrivileges?: Array<AuthorizationPrivilege> | undefined;
            communityID: string;
            roleSetID: string;
          };
          guidelines: { __typename?: 'CommunityGuidelines'; id: string };
        };
      }
    | undefined;
};

export type EventProfileFragment = {
  __typename?: 'Profile';
  id: string;
  url: string;
  displayName: string;
  description?: string | undefined;
  tagset?:
    | {
        __typename?: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: TagsetType;
      }
    | undefined;
  references?:
    | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
    | undefined;
  location?: { __typename?: 'Location'; id: string; city?: string | undefined } | undefined;
};

export type CreateCalendarEventMutationVariables = Exact<{
  eventData: CreateCalendarEventOnCalendarInput;
  includeSubspace?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type CreateCalendarEventMutation = {
  __typename?: 'Mutation';
  createEventOnCalendar: {
    __typename?: 'CalendarEvent';
    createdDate: Date;
    id: string;
    type: CalendarEventType;
    startDate?: Date | undefined;
    durationDays?: number | undefined;
    durationMinutes: number;
    wholeDay: boolean;
    multipleDays: boolean;
    visibleOnParentCalendar: boolean;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    createdBy?:
      | {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | undefined;
    comments: {
      __typename?: 'Room';
      id: string;
      messagesCount: number;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      messages: Array<{
        __typename?: 'Message';
        id: string;
        message: string;
        timestamp: number;
        threadID?: string | undefined;
        reactions: Array<{
          __typename?: 'Reaction';
          id: string;
          emoji: string;
          sender?:
            | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
            | undefined;
        }>;
        sender?:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | undefined;
      }>;
      vcInteractions: Array<{
        __typename?: 'VcInteraction';
        id: string;
        threadID: string;
        virtualContributorID: string;
      }>;
    };
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      description?: string | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
      location?: { __typename?: 'Location'; id: string; city?: string | undefined } | undefined;
    };
    subspace?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              communityID: string;
              roleSetID: string;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
        }
      | undefined;
  };
};

export type UpdateCalendarEventMutationVariables = Exact<{
  eventData: UpdateCalendarEventInput;
  includeSubspace?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type UpdateCalendarEventMutation = {
  __typename?: 'Mutation';
  updateCalendarEvent: {
    __typename?: 'CalendarEvent';
    createdDate: Date;
    id: string;
    type: CalendarEventType;
    startDate?: Date | undefined;
    durationDays?: number | undefined;
    durationMinutes: number;
    wholeDay: boolean;
    multipleDays: boolean;
    visibleOnParentCalendar: boolean;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    createdBy?:
      | {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            url: string;
            displayName: string;
            visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            tagsets?:
              | Array<{
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }>
              | undefined;
          };
        }
      | undefined;
    comments: {
      __typename?: 'Room';
      id: string;
      messagesCount: number;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      messages: Array<{
        __typename?: 'Message';
        id: string;
        message: string;
        timestamp: number;
        threadID?: string | undefined;
        reactions: Array<{
          __typename?: 'Reaction';
          id: string;
          emoji: string;
          sender?:
            | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
            | undefined;
        }>;
        sender?:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                description?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
              };
            }
          | undefined;
      }>;
      vcInteractions: Array<{
        __typename?: 'VcInteraction';
        id: string;
        threadID: string;
        virtualContributorID: string;
      }>;
    };
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      description?: string | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
      references?:
        | Array<{ __typename?: 'Reference'; id: string; name: string; uri: string; description?: string | undefined }>
        | undefined;
      location?: { __typename?: 'Location'; id: string; city?: string | undefined } | undefined;
    };
    subspace?:
      | {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              communityID: string;
              roleSetID: string;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
        }
      | undefined;
  };
};

export type DeleteCalendarEventMutationVariables = Exact<{
  deleteData: DeleteCalendarEventInput;
}>;

export type DeleteCalendarEventMutation = {
  __typename?: 'Mutation';
  deleteCalendarEvent: { __typename?: 'CalendarEvent'; id: string };
};

export type AuthorizationPolicyQueryVariables = Exact<{
  authorizationPolicyId: Scalars['UUID']['input'];
}>;

export type AuthorizationPolicyQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    authorizationPolicy?:
      | {
          __typename?: 'Authorization';
          id: string;
          type?: AuthorizationPolicyType | undefined;
          credentialRules?:
            | Array<{
                __typename?: 'AuthorizationPolicyRuleCredential';
                name?: string | undefined;
                cascade: boolean;
                grantedPrivileges: Array<AuthorizationPrivilege>;
                criterias: Array<{ __typename?: 'CredentialDefinition'; resourceID: string; type: string }>;
              }>
            | undefined;
          privilegeRules?:
            | Array<{
                __typename?: 'AuthorizationPolicyRulePrivilege';
                name?: string | undefined;
                sourcePrivilege: AuthorizationPrivilege;
                grantedPrivileges: Array<AuthorizationPrivilege>;
              }>
            | undefined;
        }
      | undefined;
  };
};

export type AuthorizationPrivilegesForUserQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
  authorizationPolicyId: Scalars['UUID']['input'];
}>;

export type AuthorizationPrivilegesForUserQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    authorizationPrivilegesForUser?: Array<AuthorizationPrivilege> | undefined;
  };
};

export type UpdateAnswerRelevanceMutationVariables = Exact<{
  input: ChatGuidanceAnswerRelevanceInput;
}>;

export type UpdateAnswerRelevanceMutation = { __typename?: 'Mutation'; updateAnswerRelevance: boolean };

export type ResetChatGuidanceMutationVariables = Exact<{ [key: string]: never }>;

export type ResetChatGuidanceMutation = { __typename?: 'Mutation'; resetChatGuidance: boolean };

export type CreateGuidanceRoomMutationVariables = Exact<{ [key: string]: never }>;

export type CreateGuidanceRoomMutation = {
  __typename?: 'Mutation';
  createChatGuidanceRoom?: { __typename?: 'Room'; id: string } | undefined;
};

export type AskChatGuidanceQuestionMutationVariables = Exact<{
  chatData: ChatGuidanceInput;
}>;

export type AskChatGuidanceQuestionMutation = {
  __typename?: 'Mutation';
  askChatGuidanceQuestion: { __typename?: 'MessageAnswerQuestion'; id?: string | undefined; success: boolean };
};

export type GuidanceRoomIdQueryVariables = Exact<{ [key: string]: never }>;

export type GuidanceRoomIdQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    user?:
      | { __typename?: 'User'; id: string; guidanceRoom?: { __typename?: 'Room'; id: string } | undefined }
      | undefined;
  };
};

export type GuidanceRoomMessagesQueryVariables = Exact<{
  roomId: Scalars['UUID']['input'];
}>;

export type GuidanceRoomMessagesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    room?:
      | {
          __typename?: 'Room';
          id: string;
          messagesCount: number;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          messages: Array<{
            __typename?: 'Message';
            id: string;
            message: string;
            timestamp: number;
            threadID?: string | undefined;
            reactions: Array<{
              __typename?: 'Reaction';
              id: string;
              emoji: string;
              sender?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string };
                  }
                | undefined;
            }>;
            sender?:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    description?: string | undefined;
                    avatar?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagsets?:
                      | Array<{
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }>
                      | undefined;
                    location?:
                      | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                      | undefined;
                  };
                }
              | undefined;
          }>;
          vcInteractions: Array<{
            __typename?: 'VcInteraction';
            id: string;
            threadID: string;
            virtualContributorID: string;
          }>;
        }
      | undefined;
  };
};

export type InAppNotificationReceivedSubscriptionVariables = Exact<{ [key: string]: never }>;

export type InAppNotificationReceivedSubscription = {
  __typename?: 'Subscription';
  inAppNotificationReceived: {
    __typename?: 'InAppNotification';
    id: string;
    type: NotificationEvent;
    category: NotificationEventCategory;
    state: NotificationEventInAppState;
    triggeredAt: Date;
    triggeredBy?:
      | {
          __typename?: 'Organization';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            visual?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        }
      | {
          __typename?: 'User';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            visual?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        }
      | {
          __typename?: 'VirtualContributor';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            visual?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        }
      | undefined;
    payload:
      | { __typename?: 'InAppNotificationPayloadOrganization'; type: NotificationEventPayload }
      | {
          __typename?: 'InAppNotificationPayloadOrganizationMessageDirect';
          type: NotificationEventPayload;
          organizationMessage: string;
          organization:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  visual?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  visual?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  visual?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
        }
      | {
          __typename?: 'InAppNotificationPayloadOrganizationMessageRoom';
          type: NotificationEventPayload;
          comment?: string | undefined;
          roomID?: string | undefined;
          organization: {
            __typename?: 'Organization';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          };
        }
      | { __typename?: 'InAppNotificationPayloadPlatform'; type: NotificationEventPayload }
      | { __typename?: 'InAppNotificationPayloadPlatformForumDiscussion'; type: NotificationEventPayload }
      | {
          __typename?: 'InAppNotificationPayloadPlatformGlobalRoleChange';
          type: NotificationEventPayload;
          role?: string | undefined;
          user?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  visual?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }
      | { __typename?: 'InAppNotificationPayloadPlatformUser'; type: NotificationEventPayload }
      | {
          __typename?: 'InAppNotificationPayloadPlatformUserMessageRoom';
          type: NotificationEventPayload;
          messageDetails: {
            __typename?: 'MessageDetails';
            message: string;
            parent: { __typename?: 'MessageParent'; displayName: string; url: string };
            room: { __typename?: 'Room'; id: string };
          };
        }
      | { __typename?: 'InAppNotificationPayloadPlatformUserProfileRemoved'; type: NotificationEventPayload }
      | { __typename?: 'InAppNotificationPayloadSpace'; type: NotificationEventPayload }
      | {
          __typename?: 'InAppNotificationPayloadSpaceCollaborationCallout';
          type: NotificationEventPayload;
          callout?:
            | {
                __typename?: 'Callout';
                id: string;
                framing: {
                  __typename?: 'CalloutFraming';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                };
              }
            | undefined;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                level: SpaceLevel;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
        }
      | {
          __typename?: 'InAppNotificationPayloadSpaceCollaborationCalloutPostComment';
          type: NotificationEventPayload;
          messageDetails: {
            __typename?: 'MessageDetails';
            message: string;
            parent: { __typename?: 'MessageParent'; displayName: string; url: string };
            room: { __typename?: 'Room'; id: string };
          };
          space?:
            | {
                __typename?: 'Space';
                id: string;
                level: SpaceLevel;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          callout?:
            | {
                __typename?: 'Callout';
                id: string;
                framing: {
                  __typename?: 'CalloutFraming';
                  id: string;
                  profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                };
              }
            | undefined;
        }
      | {
          __typename?: 'InAppNotificationPayloadSpaceCommunicationMessageDirect';
          type: NotificationEventPayload;
          spaceCommunicationMessage: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                level: SpaceLevel;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
        }
      | {
          __typename?: 'InAppNotificationPayloadSpaceCommunicationUpdate';
          type: NotificationEventPayload;
          update?: string | undefined;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                level: SpaceLevel;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
        }
      | {
          __typename?: 'InAppNotificationPayloadSpaceCommunityApplication';
          type: NotificationEventPayload;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                level: SpaceLevel;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          application?:
            | {
                __typename?: 'Application';
                id: string;
                createdDate: Date;
                contributor:
                  | {
                      __typename?: 'Organization';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        visual?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                      };
                    }
                  | {
                      __typename?: 'User';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        visual?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                      };
                    }
                  | {
                      __typename?: 'VirtualContributor';
                      id: string;
                      profile: {
                        __typename?: 'Profile';
                        id: string;
                        displayName: string;
                        url: string;
                        visual?:
                          | {
                              __typename?: 'Visual';
                              id: string;
                              uri: string;
                              name: string;
                              alternativeText?: string | undefined;
                            }
                          | undefined;
                      };
                    };
              }
            | undefined;
        }
      | {
          __typename?: 'InAppNotificationPayloadSpaceCommunityContributor';
          type: NotificationEventPayload;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                level: SpaceLevel;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          contributor?:
            | {
                __typename: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  visual?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  visual?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | {
                __typename: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  visual?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        }
      | {
          __typename?: 'InAppNotificationPayloadSpaceCommunityInvitation';
          type: NotificationEventPayload;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                level: SpaceLevel;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
        }
      | {
          __typename?: 'InAppNotificationPayloadSpaceCommunityInvitationPlatform';
          type: NotificationEventPayload;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                level: SpaceLevel;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
        }
      | {
          __typename?: 'InAppNotificationPayloadUserMessageDirect';
          type: NotificationEventPayload;
          userMessage?: string | undefined;
          user?:
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  visual?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              }
            | undefined;
        };
  };
};

export type InAppNotificationsQueryVariables = Exact<{ [key: string]: never }>;

export type InAppNotificationsQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    notifications: Array<{
      __typename?: 'InAppNotification';
      id: string;
      type: NotificationEvent;
      category: NotificationEventCategory;
      state: NotificationEventInAppState;
      triggeredAt: Date;
      triggeredBy?:
        | {
            __typename?: 'Organization';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }
        | {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }
        | {
            __typename?: 'VirtualContributor';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              visual?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }
        | undefined;
      payload:
        | { __typename?: 'InAppNotificationPayloadOrganization'; type: NotificationEventPayload }
        | {
            __typename?: 'InAppNotificationPayloadOrganizationMessageDirect';
            type: NotificationEventPayload;
            organizationMessage: string;
            organization:
              | {
                  __typename?: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | {
                  __typename?: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                };
          }
        | {
            __typename?: 'InAppNotificationPayloadOrganizationMessageRoom';
            type: NotificationEventPayload;
            comment?: string | undefined;
            roomID?: string | undefined;
            organization: {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
          }
        | { __typename?: 'InAppNotificationPayloadPlatform'; type: NotificationEventPayload }
        | { __typename?: 'InAppNotificationPayloadPlatformForumDiscussion'; type: NotificationEventPayload }
        | {
            __typename?: 'InAppNotificationPayloadPlatformGlobalRoleChange';
            type: NotificationEventPayload;
            role?: string | undefined;
            user?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }
        | { __typename?: 'InAppNotificationPayloadPlatformUser'; type: NotificationEventPayload }
        | {
            __typename?: 'InAppNotificationPayloadPlatformUserMessageRoom';
            type: NotificationEventPayload;
            messageDetails: {
              __typename?: 'MessageDetails';
              message: string;
              parent: { __typename?: 'MessageParent'; displayName: string; url: string };
              room: { __typename?: 'Room'; id: string };
            };
          }
        | { __typename?: 'InAppNotificationPayloadPlatformUserProfileRemoved'; type: NotificationEventPayload }
        | { __typename?: 'InAppNotificationPayloadSpace'; type: NotificationEventPayload }
        | {
            __typename?: 'InAppNotificationPayloadSpaceCollaborationCallout';
            type: NotificationEventPayload;
            callout?:
              | {
                  __typename?: 'Callout';
                  id: string;
                  framing: {
                    __typename?: 'CalloutFraming';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                  };
                }
              | undefined;
            space?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      url: string;
                      tagline?: string | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagset?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    };
                  };
                }
              | undefined;
          }
        | {
            __typename?: 'InAppNotificationPayloadSpaceCollaborationCalloutPostComment';
            type: NotificationEventPayload;
            messageDetails: {
              __typename?: 'MessageDetails';
              message: string;
              parent: { __typename?: 'MessageParent'; displayName: string; url: string };
              room: { __typename?: 'Room'; id: string };
            };
            space?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      url: string;
                      tagline?: string | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagset?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    };
                  };
                }
              | undefined;
            callout?:
              | {
                  __typename?: 'Callout';
                  id: string;
                  framing: {
                    __typename?: 'CalloutFraming';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
                  };
                }
              | undefined;
          }
        | {
            __typename?: 'InAppNotificationPayloadSpaceCommunicationMessageDirect';
            type: NotificationEventPayload;
            spaceCommunicationMessage: string;
            space?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      url: string;
                      tagline?: string | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagset?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    };
                  };
                }
              | undefined;
          }
        | {
            __typename?: 'InAppNotificationPayloadSpaceCommunicationUpdate';
            type: NotificationEventPayload;
            update?: string | undefined;
            space?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      url: string;
                      tagline?: string | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagset?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    };
                  };
                }
              | undefined;
          }
        | {
            __typename?: 'InAppNotificationPayloadSpaceCommunityApplication';
            type: NotificationEventPayload;
            space?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      url: string;
                      tagline?: string | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagset?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    };
                  };
                }
              | undefined;
            application?:
              | {
                  __typename?: 'Application';
                  id: string;
                  createdDate: Date;
                  contributor:
                    | {
                        __typename?: 'Organization';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          visual?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | {
                        __typename?: 'User';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          visual?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      }
                    | {
                        __typename?: 'VirtualContributor';
                        id: string;
                        profile: {
                          __typename?: 'Profile';
                          id: string;
                          displayName: string;
                          url: string;
                          visual?:
                            | {
                                __typename?: 'Visual';
                                id: string;
                                uri: string;
                                name: string;
                                alternativeText?: string | undefined;
                              }
                            | undefined;
                        };
                      };
                }
              | undefined;
          }
        | {
            __typename?: 'InAppNotificationPayloadSpaceCommunityContributor';
            type: NotificationEventPayload;
            space?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      url: string;
                      tagline?: string | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagset?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    };
                  };
                }
              | undefined;
            contributor?:
              | {
                  __typename: 'Organization';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | {
                  __typename: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | {
                  __typename: 'VirtualContributor';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          }
        | {
            __typename?: 'InAppNotificationPayloadSpaceCommunityInvitation';
            type: NotificationEventPayload;
            space?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      url: string;
                      tagline?: string | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagset?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    };
                  };
                }
              | undefined;
          }
        | {
            __typename?: 'InAppNotificationPayloadSpaceCommunityInvitationPlatform';
            type: NotificationEventPayload;
            space?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      description?: string | undefined;
                      url: string;
                      tagline?: string | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      tagset?:
                        | {
                            __typename?: 'Tagset';
                            id: string;
                            name: string;
                            tags: Array<string>;
                            allowedValues: Array<string>;
                            type: TagsetType;
                          }
                        | undefined;
                    };
                  };
                }
              | undefined;
          }
        | {
            __typename?: 'InAppNotificationPayloadUserMessageDirect';
            type: NotificationEventPayload;
            userMessage?: string | undefined;
            user?:
              | {
                  __typename?: 'User';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    url: string;
                    visual?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                  };
                }
              | undefined;
          };
    }>;
  };
};

export type UpdateNotificationStateMutationVariables = Exact<{
  ID: Scalars['UUID']['input'];
  state: NotificationEventInAppState;
}>;

export type UpdateNotificationStateMutation = {
  __typename?: 'Mutation';
  updateNotificationState: NotificationEventInAppState;
};

export type MarkNotificationsAsReadMutationVariables = Exact<{
  notificationIds: Array<Scalars['String']['input']> | Scalars['String']['input'];
}>;

export type MarkNotificationsAsReadMutation = { __typename?: 'Mutation'; markNotificationsAsRead: boolean };

export type InAppNotificationAllTypesFragment = {
  __typename?: 'InAppNotification';
  id: string;
  type: NotificationEvent;
  category: NotificationEventCategory;
  state: NotificationEventInAppState;
  triggeredAt: Date;
  triggeredBy?:
    | {
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | undefined;
  payload:
    | { __typename?: 'InAppNotificationPayloadOrganization'; type: NotificationEventPayload }
    | {
        __typename?: 'InAppNotificationPayloadOrganizationMessageDirect';
        type: NotificationEventPayload;
        organizationMessage: string;
        organization:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
      }
    | {
        __typename?: 'InAppNotificationPayloadOrganizationMessageRoom';
        type: NotificationEventPayload;
        comment?: string | undefined;
        roomID?: string | undefined;
        organization: {
          __typename?: 'Organization';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            visual?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        };
      }
    | { __typename?: 'InAppNotificationPayloadPlatform'; type: NotificationEventPayload }
    | { __typename?: 'InAppNotificationPayloadPlatformForumDiscussion'; type: NotificationEventPayload }
    | {
        __typename?: 'InAppNotificationPayloadPlatformGlobalRoleChange';
        type: NotificationEventPayload;
        role?: string | undefined;
        user?:
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | undefined;
      }
    | { __typename?: 'InAppNotificationPayloadPlatformUser'; type: NotificationEventPayload }
    | {
        __typename?: 'InAppNotificationPayloadPlatformUserMessageRoom';
        type: NotificationEventPayload;
        messageDetails: {
          __typename?: 'MessageDetails';
          message: string;
          parent: { __typename?: 'MessageParent'; displayName: string; url: string };
          room: { __typename?: 'Room'; id: string };
        };
      }
    | { __typename?: 'InAppNotificationPayloadPlatformUserProfileRemoved'; type: NotificationEventPayload }
    | { __typename?: 'InAppNotificationPayloadSpace'; type: NotificationEventPayload }
    | {
        __typename?: 'InAppNotificationPayloadSpaceCollaborationCallout';
        type: NotificationEventPayload;
        callout?:
          | {
              __typename?: 'Callout';
              id: string;
              framing: {
                __typename?: 'CalloutFraming';
                id: string;
                profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
              };
            }
          | undefined;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
      }
    | {
        __typename?: 'InAppNotificationPayloadSpaceCollaborationCalloutPostComment';
        type: NotificationEventPayload;
        messageDetails: {
          __typename?: 'MessageDetails';
          message: string;
          parent: { __typename?: 'MessageParent'; displayName: string; url: string };
          room: { __typename?: 'Room'; id: string };
        };
        space?:
          | {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        callout?:
          | {
              __typename?: 'Callout';
              id: string;
              framing: {
                __typename?: 'CalloutFraming';
                id: string;
                profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
              };
            }
          | undefined;
      }
    | {
        __typename?: 'InAppNotificationPayloadSpaceCommunicationMessageDirect';
        type: NotificationEventPayload;
        spaceCommunicationMessage: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
      }
    | {
        __typename?: 'InAppNotificationPayloadSpaceCommunicationUpdate';
        type: NotificationEventPayload;
        update?: string | undefined;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
      }
    | {
        __typename?: 'InAppNotificationPayloadSpaceCommunityApplication';
        type: NotificationEventPayload;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        application?:
          | {
              __typename?: 'Application';
              id: string;
              createdDate: Date;
              contributor:
                | {
                    __typename?: 'Organization';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      visual?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | {
                    __typename?: 'User';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      visual?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                    };
                  }
                | {
                    __typename?: 'VirtualContributor';
                    id: string;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      visual?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                    };
                  };
            }
          | undefined;
      }
    | {
        __typename?: 'InAppNotificationPayloadSpaceCommunityContributor';
        type: NotificationEventPayload;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        contributor?:
          | {
              __typename: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | {
              __typename: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | {
              __typename: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | undefined;
      }
    | {
        __typename?: 'InAppNotificationPayloadSpaceCommunityInvitation';
        type: NotificationEventPayload;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
      }
    | {
        __typename?: 'InAppNotificationPayloadSpaceCommunityInvitationPlatform';
        type: NotificationEventPayload;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
      }
    | {
        __typename?: 'InAppNotificationPayloadUserMessageDirect';
        type: NotificationEventPayload;
        userMessage?: string | undefined;
        user?:
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | undefined;
      };
};

export type InAppNotificationPayloadSpaceCollaborationCalloutFragment = {
  __typename?: 'InAppNotificationPayloadSpaceCollaborationCallout';
  callout?:
    | {
        __typename?: 'Callout';
        id: string;
        framing: {
          __typename?: 'CalloutFraming';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | undefined;
  space?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      }
    | undefined;
};

export type InAppNotificationSpaceCommunityContributorFragment = {
  __typename?: 'InAppNotificationPayloadSpaceCommunityContributor';
  space?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      }
    | undefined;
  contributor?:
    | {
        __typename: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | undefined;
};

export type SpaceNotificationFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      tagline?: string | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
    };
  };
};

export type InAppNotificationUserMentionedFragment = {
  __typename?: 'InAppNotificationPayloadPlatformUserMessageRoom';
  messageDetails: {
    __typename?: 'MessageDetails';
    message: string;
    parent: { __typename?: 'MessageParent'; displayName: string; url: string };
    room: { __typename?: 'Room'; id: string };
  };
};

export type InAppNotificationPayloadOrganizationMessageDirectFragment = {
  __typename?: 'InAppNotificationPayloadOrganizationMessageDirect';
  organizationMessage: string;
  organization:
    | {
        __typename?: 'Organization';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | {
        __typename?: 'VirtualContributor';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      };
};

export type InAppNotificationPayloadOrganizationMessageRoomFragment = {
  __typename?: 'InAppNotificationPayloadOrganizationMessageRoom';
  comment?: string | undefined;
  roomID?: string | undefined;
  organization: {
    __typename?: 'Organization';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      url: string;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  };
};

export type InAppNotificationPayloadPlatformGlobalRoleChangeFragment = {
  __typename?: 'InAppNotificationPayloadPlatformGlobalRoleChange';
  type: NotificationEventPayload;
  role?: string | undefined;
  user?:
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | undefined;
};

export type InAppNotificationPayloadSpaceFragment = {
  __typename?: 'InAppNotificationPayloadSpace';
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadPlatformForumDiscussionFragment = {
  __typename?: 'InAppNotificationPayloadPlatformForumDiscussion';
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadPlatformUserFragment = {
  __typename?: 'InAppNotificationPayloadPlatformUser';
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadPlatformUserProfileRemovedFragment = {
  __typename?: 'InAppNotificationPayloadPlatformUserProfileRemoved';
  type: NotificationEventPayload;
};

export type InAppNotificationPayloadSpaceCommunityApplicationFragment = {
  __typename?: 'InAppNotificationPayloadSpaceCommunityApplication';
  space?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      }
    | undefined;
  application?:
    | {
        __typename?: 'Application';
        id: string;
        createdDate: Date;
        contributor:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
      }
    | undefined;
};

export type InAppNotificationPayloadSpaceCommunicationUpdateFragment = {
  __typename?: 'InAppNotificationPayloadSpaceCommunicationUpdate';
  update?: string | undefined;
  space?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      }
    | undefined;
};

export type InAppNotificationPayloadSpaceCommunicationMessageDirectFragment = {
  __typename?: 'InAppNotificationPayloadSpaceCommunicationMessageDirect';
  spaceCommunicationMessage: string;
  space?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      }
    | undefined;
};

export type InAppNotificationPayloadSpaceCommunityInvitationFragment = {
  __typename?: 'InAppNotificationPayloadSpaceCommunityInvitation';
  space?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      }
    | undefined;
};

export type InAppNotificationPayloadSpaceCommunityInvitationPlatformFragment = {
  __typename?: 'InAppNotificationPayloadSpaceCommunityInvitationPlatform';
  space?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      }
    | undefined;
};

export type InAppNotificationPayloadUserMessageDirectFragment = {
  __typename?: 'InAppNotificationPayloadUserMessageDirect';
  userMessage?: string | undefined;
  user?:
    | {
        __typename?: 'User';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          url: string;
          visual?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
        };
      }
    | undefined;
};

export type InAppNotificationPayloadSpaceCollaborationCalloutPostCommentFragment = {
  __typename?: 'InAppNotificationPayloadSpaceCollaborationCalloutPostComment';
  messageDetails: {
    __typename?: 'MessageDetails';
    message: string;
    parent: { __typename?: 'MessageParent'; displayName: string; url: string };
    room: { __typename?: 'Room'; id: string };
  };
  space?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      }
    | undefined;
  callout?:
    | {
        __typename?: 'Callout';
        id: string;
        framing: {
          __typename?: 'CalloutFraming';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | undefined;
};

export type InAppNotificationsUnreadCountQueryVariables = Exact<{
  types?: InputMaybe<Array<NotificationEvent> | NotificationEvent>;
}>;

export type InAppNotificationsUnreadCountQuery = {
  __typename?: 'Query';
  me: { __typename?: 'MeQueryResults'; notificationsUnreadCount: number };
};

export type UrlResolverQueryVariables = Exact<{
  url: Scalars['String']['input'];
}>;

export type UrlResolverQuery = {
  __typename?: 'Query';
  urlResolver: {
    __typename?: 'UrlResolverQueryResults';
    type: UrlType;
    organizationId?: string | undefined;
    userId?: string | undefined;
    discussionId?: string | undefined;
    innovationHubId?: string | undefined;
    space?:
      | {
          __typename?: 'UrlResolverQueryResultSpace';
          id: string;
          level: SpaceLevel;
          levelZeroSpaceID: string;
          parentSpaces: Array<string>;
          collaboration: {
            __typename?: 'UrlResolverQueryResultCollaboration';
            id: string;
            calloutsSet: {
              __typename?: 'UrlResolverQueryResultCalloutsSet';
              id: string;
              calloutId?: string | undefined;
              contributionId?: string | undefined;
              postId?: string | undefined;
              whiteboardId?: string | undefined;
            };
          };
          calendar?:
            | { __typename?: 'UrlResolverQueryResultCalendar'; id: string; calendarEventId?: string | undefined }
            | undefined;
          templatesSet?:
            | { __typename?: 'UrlResolverQueryResultTemplatesSet'; id: string; templateId?: string | undefined }
            | undefined;
        }
      | undefined;
    virtualContributor?:
      | {
          __typename?: 'UrlResolverQueryResultVirtualContributor';
          id: string;
          calloutsSet: {
            __typename?: 'UrlResolverQueryResultCalloutsSet';
            id: string;
            calloutId?: string | undefined;
            contributionId?: string | undefined;
            postId?: string | undefined;
          };
        }
      | undefined;
    innovationPack?:
      | {
          __typename?: 'UrlResolverQueryResultInnovationPack';
          id: string;
          templatesSet: {
            __typename?: 'UrlResolverQueryResultTemplatesSet';
            id: string;
            templateId?: string | undefined;
          };
        }
      | undefined;
  };
};

export type SpaceUrlResolverQueryVariables = Exact<{
  spaceNameId: Scalars['NameID']['input'];
  subspaceL1NameId?: InputMaybe<Scalars['NameID']['input']>;
  subspaceL2NameId?: InputMaybe<Scalars['NameID']['input']>;
  includeSubspaceL1?: InputMaybe<Scalars['Boolean']['input']>;
  includeSubspaceL2?: InputMaybe<Scalars['Boolean']['input']>;
}>;

export type SpaceUrlResolverQuery = {
  __typename?: 'Query';
  lookupByName: {
    __typename?: 'LookupByNameQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          subspaceByNameID?: {
            __typename?: 'Space';
            id: string;
            subspaceByNameID?: { __typename?: 'Space'; id: string };
          };
        }
      | undefined;
  };
};

export type SearchQueryVariables = Exact<{
  searchData: SearchInput;
}>;

export type SearchQuery = {
  __typename?: 'Query';
  search: {
    __typename?: 'ISearchResults';
    spaceResults: {
      __typename?: 'ISearchCategoryResult';
      cursor?: string | undefined;
      total: number;
      results: Array<
        | {
            __typename?: 'SearchResultCallout';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
          }
        | {
            __typename?: 'SearchResultOrganization';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
          }
        | { __typename?: 'SearchResultPost'; id: string; type: SearchResultType; score: number; terms: Array<string> }
        | {
            __typename?: 'SearchResultSpace';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
            parentSpace?:
              | {
                  __typename?: 'Space';
                  id: string;
                  level: SpaceLevel;
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    isContentPublic: boolean;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      tagline?: string | undefined;
                      description?: string | undefined;
                      tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                    };
                    membership: {
                      __typename?: 'SpaceAboutMembership';
                      myMembershipStatus?: CommunityMembershipStatus | undefined;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      communityID: string;
                      roleSetID: string;
                    };
                    guidelines: { __typename?: 'CommunityGuidelines'; id: string };
                  };
                }
              | undefined;
            space: {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              visibility: SpaceVisibility;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                why?: string | undefined;
                isContentPublic: boolean;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  tagline?: string | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                  visuals: Array<{
                    __typename?: 'Visual';
                    id: string;
                    uri: string;
                    name: string;
                    alternativeText?: string | undefined;
                  }>;
                };
                membership: {
                  __typename?: 'SpaceAboutMembership';
                  myMembershipStatus?: CommunityMembershipStatus | undefined;
                };
              };
            };
          }
        | { __typename?: 'SearchResultUser'; id: string; type: SearchResultType; score: number; terms: Array<string> }
      >;
    };
    calloutResults: {
      __typename?: 'ISearchCategoryResult';
      cursor?: string | undefined;
      total: number;
      results: Array<
        | {
            __typename?: 'SearchResultCallout';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
            callout: {
              __typename?: 'Callout';
              id: string;
              framing: {
                __typename?: 'CalloutFraming';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
              contributions: Array<{
                __typename?: 'CalloutContribution';
                id: string;
                post?: { __typename?: 'Post'; id: string } | undefined;
                whiteboard?: { __typename?: 'Whiteboard'; id: string } | undefined;
                link?: { __typename?: 'Link'; id: string } | undefined;
              }>;
              comments?: { __typename?: 'Room'; id: string; messagesCount: number } | undefined;
            };
            space: {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                isContentPublic: boolean;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  tagline?: string | undefined;
                  description?: string | undefined;
                  tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
                membership: {
                  __typename?: 'SpaceAboutMembership';
                  myMembershipStatus?: CommunityMembershipStatus | undefined;
                  myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                  communityID: string;
                  roleSetID: string;
                };
                guidelines: { __typename?: 'CommunityGuidelines'; id: string };
              };
            };
          }
        | {
            __typename?: 'SearchResultOrganization';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
          }
        | { __typename?: 'SearchResultPost'; id: string; type: SearchResultType; score: number; terms: Array<string> }
        | { __typename?: 'SearchResultSpace'; id: string; type: SearchResultType; score: number; terms: Array<string> }
        | { __typename?: 'SearchResultUser'; id: string; type: SearchResultType; score: number; terms: Array<string> }
      >;
    };
    contributionResults: {
      __typename?: 'ISearchCategoryResult';
      cursor?: string | undefined;
      total: number;
      results: Array<
        | {
            __typename?: 'SearchResultCallout';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
            callout: {
              __typename?: 'Callout';
              id: string;
              framing: {
                __typename?: 'CalloutFraming';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
              contributions: Array<{
                __typename?: 'CalloutContribution';
                id: string;
                post?: { __typename?: 'Post'; id: string } | undefined;
                whiteboard?: { __typename?: 'Whiteboard'; id: string } | undefined;
                link?: { __typename?: 'Link'; id: string } | undefined;
              }>;
              comments?: { __typename?: 'Room'; id: string; messagesCount: number } | undefined;
            };
            space: {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                isContentPublic: boolean;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  tagline?: string | undefined;
                  description?: string | undefined;
                  tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
                membership: {
                  __typename?: 'SpaceAboutMembership';
                  myMembershipStatus?: CommunityMembershipStatus | undefined;
                  myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                  communityID: string;
                  roleSetID: string;
                };
                guidelines: { __typename?: 'CommunityGuidelines'; id: string };
              };
            };
          }
        | {
            __typename?: 'SearchResultOrganization';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
          }
        | {
            __typename?: 'SearchResultPost';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
            post: {
              __typename?: 'Post';
              id: string;
              createdDate: Date;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                description?: string | undefined;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagset?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
              };
              createdBy?:
                | {
                    __typename?: 'User';
                    id: string;
                    profile: { __typename?: 'Profile'; id: string; displayName: string };
                  }
                | undefined;
              comments: { __typename?: 'Room'; id: string; messagesCount: number };
            };
            space: {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              visibility: SpaceVisibility;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                isContentPublic: boolean;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  tagline?: string | undefined;
                  description?: string | undefined;
                  tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
                membership: {
                  __typename?: 'SpaceAboutMembership';
                  myMembershipStatus?: CommunityMembershipStatus | undefined;
                  myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                  communityID: string;
                  roleSetID: string;
                };
                guidelines: { __typename?: 'CommunityGuidelines'; id: string };
              };
            };
            callout: {
              __typename?: 'Callout';
              id: string;
              framing: {
                __typename?: 'CalloutFraming';
                id: string;
                profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
              };
            };
          }
        | { __typename?: 'SearchResultSpace'; id: string; type: SearchResultType; score: number; terms: Array<string> }
        | { __typename?: 'SearchResultUser'; id: string; type: SearchResultType; score: number; terms: Array<string> }
      >;
    };
    contributorResults: {
      __typename?: 'ISearchCategoryResult';
      cursor?: string | undefined;
      total: number;
      results: Array<
        | {
            __typename?: 'SearchResultCallout';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
          }
        | {
            __typename?: 'SearchResultOrganization';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
            organization: {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                displayName: string;
                id: string;
                description?: string | undefined;
                url: string;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
          }
        | { __typename?: 'SearchResultPost'; id: string; type: SearchResultType; score: number; terms: Array<string> }
        | { __typename?: 'SearchResultSpace'; id: string; type: SearchResultType; score: number; terms: Array<string> }
        | {
            __typename?: 'SearchResultUser';
            id: string;
            type: SearchResultType;
            score: number;
            terms: Array<string>;
            user: {
              __typename?: 'User';
              id: string;
              isContactable: boolean;
              profile: {
                __typename?: 'Profile';
                displayName: string;
                id: string;
                description?: string | undefined;
                url: string;
                location?:
                  | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
                  | undefined;
                tagsets?:
                  | Array<{
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }>
                  | undefined;
                visual?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
          }
      >;
    };
  };
};

export type SearchResultPostFragment = {
  __typename?: 'SearchResultPost';
  post: {
    __typename?: 'Post';
    id: string;
    createdDate: Date;
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      description?: string | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
    };
    createdBy?:
      | { __typename?: 'User'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } }
      | undefined;
    comments: { __typename?: 'Room'; id: string; messagesCount: number };
  };
  space: {
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    visibility: SpaceVisibility;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        url: string;
        tagline?: string | undefined;
        description?: string | undefined;
        tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
      membership: {
        __typename?: 'SpaceAboutMembership';
        myMembershipStatus?: CommunityMembershipStatus | undefined;
        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
        communityID: string;
        roleSetID: string;
      };
      guidelines: { __typename?: 'CommunityGuidelines'; id: string };
    };
  };
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
    };
  };
};

export type PostParentFragment = {
  __typename?: 'SearchResultPost';
  space: {
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    visibility: SpaceVisibility;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        url: string;
        tagline?: string | undefined;
        description?: string | undefined;
        tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
      membership: {
        __typename?: 'SpaceAboutMembership';
        myMembershipStatus?: CommunityMembershipStatus | undefined;
        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
        communityID: string;
        roleSetID: string;
      };
      guidelines: { __typename?: 'CommunityGuidelines'; id: string };
    };
  };
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
    };
  };
};

export type SearchResultUserFragment = {
  __typename?: 'SearchResultUser';
  user: {
    __typename?: 'User';
    id: string;
    isContactable: boolean;
    profile: {
      __typename?: 'Profile';
      displayName: string;
      id: string;
      description?: string | undefined;
      url: string;
      location?:
        | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
        | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  };
};

export type SearchResultCalloutFragment = {
  __typename?: 'SearchResultCallout';
  id: string;
  callout: {
    __typename?: 'Callout';
    id: string;
    framing: {
      __typename?: 'CalloutFraming';
      id: string;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
      };
    };
    contributions: Array<{
      __typename?: 'CalloutContribution';
      id: string;
      post?: { __typename?: 'Post'; id: string } | undefined;
      whiteboard?: { __typename?: 'Whiteboard'; id: string } | undefined;
      link?: { __typename?: 'Link'; id: string } | undefined;
    }>;
    comments?: { __typename?: 'Room'; id: string; messagesCount: number } | undefined;
  };
  space: {
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        url: string;
        tagline?: string | undefined;
        description?: string | undefined;
        tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
      membership: {
        __typename?: 'SpaceAboutMembership';
        myMembershipStatus?: CommunityMembershipStatus | undefined;
        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
        communityID: string;
        roleSetID: string;
      };
      guidelines: { __typename?: 'CommunityGuidelines'; id: string };
    };
  };
};

export type CalloutParentFragment = {
  __typename?: 'SearchResultCallout';
  space: {
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        url: string;
        tagline?: string | undefined;
        description?: string | undefined;
        tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
        avatar?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
      membership: {
        __typename?: 'SpaceAboutMembership';
        myMembershipStatus?: CommunityMembershipStatus | undefined;
        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
        communityID: string;
        roleSetID: string;
      };
      guidelines: { __typename?: 'CommunityGuidelines'; id: string };
    };
  };
};

export type SearchResultOrganizationFragment = {
  __typename?: 'SearchResultOrganization';
  organization: {
    __typename?: 'Organization';
    id: string;
    profile: {
      __typename?: 'Profile';
      displayName: string;
      id: string;
      description?: string | undefined;
      url: string;
      location?:
        | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
        | undefined;
      tagsets?:
        | Array<{
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }>
        | undefined;
      visual?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  };
};

export type SearchResultProfileFragment = {
  __typename?: 'Profile';
  id: string;
  description?: string | undefined;
  url: string;
  location?:
    | { __typename?: 'Location'; id: string; country?: string | undefined; city?: string | undefined }
    | undefined;
  tagsets?:
    | Array<{
        __typename?: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: TagsetType;
      }>
    | undefined;
  visual?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
};

export type SearchResultPostProfileFragment = {
  __typename?: 'Profile';
  id: string;
  description?: string | undefined;
  tagset?:
    | {
        __typename?: 'Tagset';
        id: string;
        name: string;
        tags: Array<string>;
        allowedValues: Array<string>;
        type: TagsetType;
      }
    | undefined;
};

export type SearchResultSpaceFragment = {
  __typename?: 'SearchResultSpace';
  parentSpace?:
    | {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          isContentPublic: boolean;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            tagline?: string | undefined;
            description?: string | undefined;
            tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
          membership: {
            __typename?: 'SpaceAboutMembership';
            myMembershipStatus?: CommunityMembershipStatus | undefined;
            myPrivileges?: Array<AuthorizationPrivilege> | undefined;
            communityID: string;
            roleSetID: string;
          };
          guidelines: { __typename?: 'CommunityGuidelines'; id: string };
        };
      }
    | undefined;
  space: {
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    visibility: SpaceVisibility;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      why?: string | undefined;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        tagline?: string | undefined;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
        visuals: Array<{
          __typename?: 'Visual';
          id: string;
          uri: string;
          name: string;
          alternativeText?: string | undefined;
        }>;
      };
      membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
    };
  };
};

export type UserRolesSearchCardsQueryVariables = Exact<{
  userId: Scalars['UUID']['input'];
}>;

export type UserRolesSearchCardsQuery = {
  __typename?: 'Query';
  rolesUser: {
    __typename?: 'ContributorRoles';
    id: string;
    spaces: Array<{
      __typename?: 'RolesResultSpace';
      id: string;
      roles: Array<string>;
      subspaces: Array<{ __typename?: 'RolesResultCommunity'; id: string; roles: Array<string> }>;
    }>;
    organizations: Array<{ __typename?: 'RolesResultOrganization'; id: string; roles: Array<string> }>;
  };
};

export type SearchScopeDetailsSpaceQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SearchScopeDetailsSpaceQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          visibility: SpaceVisibility;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
        }
      | undefined;
  };
};

export type InnovationLibraryQueryVariables = Exact<{
  filterTemplateType?: InputMaybe<Array<TemplateType> | TemplateType>;
}>;

export type InnovationLibraryQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    library: {
      __typename?: 'Library';
      id: string;
      templates: Array<{
        __typename?: 'TemplateResult';
        template: {
          __typename?: 'Template';
          id: string;
          type: TemplateType;
          callout?: { __typename?: 'Callout'; id: string } | undefined;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            defaultTagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
            visual?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        };
        innovationPack: {
          __typename?: 'InnovationPack';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          provider:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              }
            | {
                __typename?: 'User';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              };
        };
      }>;
      innovationPacks: Array<{
        __typename?: 'InnovationPack';
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          description?: string | undefined;
          url: string;
          tagset?:
            | {
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }
            | undefined;
        };
        templatesSet?:
          | {
              __typename?: 'TemplatesSet';
              id: string;
              calloutTemplatesCount: number;
              spaceTemplatesCount: number;
              communityGuidelinesTemplatesCount: number;
              postTemplatesCount: number;
              whiteboardTemplatesCount: number;
            }
          | undefined;
        provider:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | {
              __typename?: 'User';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
            };
      }>;
    };
  };
};

export type CampaignBlockCredentialsQueryVariables = Exact<{ [key: string]: never }>;

export type CampaignBlockCredentialsQuery = {
  __typename?: 'Query';
  platform: {
    __typename?: 'Platform';
    id: string;
    roleSet: { __typename?: 'RoleSet'; id: string; myRoles: Array<RoleName> };
  };
  me: {
    __typename?: 'MeQueryResults';
    user?:
      | {
          __typename?: 'User';
          id: string;
          account?:
            | {
                __typename?: 'Account';
                id: string;
                license: {
                  __typename?: 'License';
                  id: string;
                  availableEntitlements?: Array<LicenseEntitlementType> | undefined;
                };
              }
            | undefined;
        }
      | undefined;
  };
};

export type DashboardWithMembershipsQueryVariables = Exact<{
  limit?: Scalars['Float']['input'];
}>;

export type DashboardWithMembershipsQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    spaceMembershipsHierarchical: Array<{
      __typename?: 'CommunityMembershipResult';
      id: string;
      space: {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          isContentPublic: boolean;
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            spaceBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
          membership: {
            __typename?: 'SpaceAboutMembership';
            myMembershipStatus?: CommunityMembershipStatus | undefined;
          };
        };
        authorization?:
          | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
          | undefined;
      };
      childMemberships: Array<{
        __typename?: 'CommunityMembershipResult';
        id: string;
        space: {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          about: {
            __typename?: 'SpaceAbout';
            isContentPublic: boolean;
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              tagline?: string | undefined;
              spaceBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
            };
          };
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
        };
      }>;
    }>;
  };
};

export type DashboardSpaceMembershipFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  about: {
    __typename?: 'SpaceAbout';
    isContentPublic: boolean;
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      tagline?: string | undefined;
      spaceBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
    };
    membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
  };
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
};

export type ExploreSpacesSearchQueryVariables = Exact<{
  searchData: SearchInput;
}>;

export type ExploreSpacesSearchQuery = {
  __typename?: 'Query';
  search: {
    __typename?: 'ISearchResults';
    spaceResults: {
      __typename?: 'ISearchCategoryResult';
      cursor?: string | undefined;
      total: number;
      results: Array<
        | { __typename?: 'SearchResultCallout'; score: number; terms: Array<string>; type: SearchResultType }
        | { __typename?: 'SearchResultOrganization'; score: number; terms: Array<string>; type: SearchResultType }
        | { __typename?: 'SearchResultPost'; score: number; terms: Array<string>; type: SearchResultType }
        | {
            __typename?: 'SearchResultSpace';
            score: number;
            terms: Array<string>;
            type: SearchResultType;
            space: {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                isContentPublic: boolean;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            };
          }
        | { __typename?: 'SearchResultUser'; score: number; terms: Array<string>; type: SearchResultType }
      >;
    };
  };
};

export type ExploreSpacesSearchFragment = {
  __typename?: 'SearchResultSpace';
  space: {
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
    };
  };
};

export type ExploreAllSpacesQueryVariables = Exact<{ [key: string]: never }>;

export type ExploreAllSpacesQuery = {
  __typename?: 'Query';
  exploreSpaces: Array<{
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    about: {
      __typename?: 'SpaceAbout';
      id: string;
      isContentPublic: boolean;
      profile: {
        __typename?: 'Profile';
        id: string;
        url: string;
        displayName: string;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
      };
    };
  }>;
};

export type WelcomeSpaceQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type WelcomeSpaceQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            profile: {
              __typename?: 'Profile';
              id: string;
              url: string;
              displayName: string;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          };
        }
      | undefined;
  };
};

export type ExploreSpacesFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    isContentPublic: boolean;
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      displayName: string;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  };
};

export type PendingInvitationsQueryVariables = Exact<{ [key: string]: never }>;

export type PendingInvitationsQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    communityInvitations: Array<{
      __typename?: 'CommunityInvitationResult';
      id: string;
      spacePendingMembershipInfo: {
        __typename?: 'SpacePendingMembershipInfo';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          isContentPublic: boolean;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            url: string;
            tagline?: string | undefined;
            description?: string | undefined;
            tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
          membership: {
            __typename?: 'SpaceAboutMembership';
            myMembershipStatus?: CommunityMembershipStatus | undefined;
            myPrivileges?: Array<AuthorizationPrivilege> | undefined;
            communityID: string;
            roleSetID: string;
          };
          guidelines: { __typename?: 'CommunityGuidelines'; id: string };
        };
      };
      invitation: {
        __typename?: 'Invitation';
        id: string;
        welcomeMessage?: string | undefined;
        contributorType: RoleSetContributorType;
        state: string;
        createdDate: Date;
        createdBy?: { __typename?: 'User'; id: string } | undefined;
      };
    }>;
  };
};

export type LatestContributionsQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  filter?: InputMaybe<ActivityFeedQueryArgs>;
}>;

export type LatestContributionsQuery = {
  __typename?: 'Query';
  activityFeed: {
    __typename?: 'ActivityFeed';
    activityFeed: Array<
      | {
          __typename?: 'ActivityLogEntryCalendarEventCreated';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          calendarEvent: {
            __typename?: 'CalendarEvent';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutDiscussionComment';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutLinkCreated';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
          link: {
            __typename?: 'Link';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutPostComment';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          post: {
            __typename?: 'Post';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutPostCreated';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
          post: {
            __typename?: 'Post';
            id: string;
            profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutPublished';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutWhiteboardContentModified';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
          whiteboard: {
            __typename?: 'Whiteboard';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryCalloutWhiteboardCreated';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          callout: {
            __typename?: 'Callout';
            id: string;
            framing: {
              __typename?: 'CalloutFraming';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
          whiteboard: {
            __typename?: 'Whiteboard';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        }
      | {
          __typename?: 'ActivityLogEntryMemberJoined';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          contributor:
            | {
                __typename?: 'Organization';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              }
            | {
                __typename?: 'User';
                firstName: string;
                lastName: string;
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              }
            | {
                __typename?: 'VirtualContributor';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  url: string;
                  displayName: string;
                  visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                };
              };
        }
      | {
          __typename?: 'ActivityLogEntrySubspaceCreated';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
          subspace: {
            __typename?: 'Space';
            id: string;
            about: {
              __typename?: 'SpaceAbout';
              id: string;
              profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
            };
          };
        }
      | {
          __typename?: 'ActivityLogEntryUpdateSent';
          id: string;
          collaborationID: string;
          createdDate: Date;
          description: string;
          type: ActivityEventType;
          child: boolean;
          message: string;
          spaceDisplayName: string;
          space?:
            | {
                __typename?: 'Space';
                id: string;
                about: {
                  __typename?: 'SpaceAbout';
                  id: string;
                  profile: {
                    __typename?: 'Profile';
                    id: string;
                    displayName: string;
                    description?: string | undefined;
                    url: string;
                    tagline?: string | undefined;
                    avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
                    cardBanner?:
                      | {
                          __typename?: 'Visual';
                          id: string;
                          uri: string;
                          name: string;
                          alternativeText?: string | undefined;
                        }
                      | undefined;
                    tagset?:
                      | {
                          __typename?: 'Tagset';
                          id: string;
                          name: string;
                          tags: Array<string>;
                          allowedValues: Array<string>;
                          type: TagsetType;
                        }
                      | undefined;
                  };
                };
              }
            | undefined;
          triggeredBy: {
            __typename?: 'User';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              avatar?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
            };
          };
        }
    >;
    pageInfo: { __typename?: 'PageInfo'; hasNextPage: boolean; endCursor?: string | undefined };
  };
};

export type LatestContributionsGroupedQueryVariables = Exact<{
  filter?: InputMaybe<ActivityFeedGroupedQueryArgs>;
}>;

export type LatestContributionsGroupedQuery = {
  __typename?: 'Query';
  activityFeedGrouped: Array<
    | {
        __typename?: 'ActivityLogEntryCalendarEventCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        calendarEvent: {
          __typename?: 'CalendarEvent';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutDiscussionComment';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutLinkCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
        link: { __typename?: 'Link'; id: string; profile: { __typename?: 'Profile'; id: string; displayName: string } };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutPostComment';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        post: {
          __typename?: 'Post';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutPostCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
        post: {
          __typename?: 'Post';
          id: string;
          profile: { __typename?: 'Profile'; id: string; url: string; displayName: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutPublished';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutWhiteboardContentModified';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
        whiteboard: {
          __typename?: 'Whiteboard';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryCalloutWhiteboardCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        callout: {
          __typename?: 'Callout';
          id: string;
          framing: {
            __typename?: 'CalloutFraming';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
        whiteboard: {
          __typename?: 'Whiteboard';
          id: string;
          profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
        };
      }
    | {
        __typename?: 'ActivityLogEntryMemberJoined';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        contributor:
          | {
              __typename?: 'Organization';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
              };
            }
          | {
              __typename?: 'User';
              firstName: string;
              lastName: string;
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
              };
            }
          | {
              __typename?: 'VirtualContributor';
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                url: string;
                displayName: string;
                visual?: { __typename?: 'Visual'; id: string; uri: string } | undefined;
              };
            };
      }
    | {
        __typename?: 'ActivityLogEntrySubspaceCreated';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
        subspace: {
          __typename?: 'Space';
          id: string;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            profile: { __typename?: 'Profile'; id: string; displayName: string; url: string };
          };
        };
      }
    | {
        __typename?: 'ActivityLogEntryUpdateSent';
        id: string;
        collaborationID: string;
        createdDate: Date;
        description: string;
        type: ActivityEventType;
        child: boolean;
        message: string;
        spaceDisplayName: string;
        space?:
          | {
              __typename?: 'Space';
              id: string;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
              };
            }
          | undefined;
      }
  >;
};

export type ActivityLogSpaceVisualsFragment = {
  __typename?: 'Space';
  id: string;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
  };
};

export type LatestContributionsSpacesFlatQueryVariables = Exact<{ [key: string]: never }>;

export type LatestContributionsSpacesFlatQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    spaceMembershipsFlat: Array<{
      __typename?: 'CommunityMembershipResult';
      id: string;
      space: {
        __typename?: 'Space';
        id: string;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            avatar?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
          };
        };
      };
    }>;
  };
};

export type MyMembershipsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Float']['input']>;
}>;

export type MyMembershipsQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    spaceMembershipsHierarchical: Array<{
      __typename?: 'CommunityMembershipResult';
      id: string;
      space: {
        __typename?: 'Space';
        id: string;
        level: SpaceLevel;
        authorization?:
          | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
          | undefined;
        about: {
          __typename?: 'SpaceAbout';
          id: string;
          membership: {
            __typename?: 'SpaceAboutMembership';
            myMembershipStatus?: CommunityMembershipStatus | undefined;
          };
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
        community: {
          __typename?: 'Community';
          id: string;
          roleSet: { __typename?: 'RoleSet'; id: string; myRoles: Array<RoleName> };
        };
      };
      childMemberships: Array<{
        __typename?: 'CommunityMembershipResult';
        id: string;
        space: {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          authorization?:
            | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
            | undefined;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
            };
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              description?: string | undefined;
              url: string;
              tagline?: string | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              tagset?:
                | {
                    __typename?: 'Tagset';
                    id: string;
                    name: string;
                    tags: Array<string>;
                    allowedValues: Array<string>;
                    type: TagsetType;
                  }
                | undefined;
            };
          };
          community: {
            __typename?: 'Community';
            id: string;
            roleSet: { __typename?: 'RoleSet'; id: string; myRoles: Array<RoleName> };
          };
        };
        childMemberships: Array<{
          __typename?: 'CommunityMembershipResult';
          id: string;
          space: {
            __typename?: 'Space';
            id: string;
            level: SpaceLevel;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            about: {
              __typename?: 'SpaceAbout';
              id: string;
              membership: {
                __typename?: 'SpaceAboutMembership';
                myMembershipStatus?: CommunityMembershipStatus | undefined;
              };
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                description?: string | undefined;
                url: string;
                tagline?: string | undefined;
                cardBanner?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagset?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
              };
            };
            community: {
              __typename?: 'Community';
              id: string;
              roleSet: { __typename?: 'RoleSet'; id: string; myRoles: Array<RoleName> };
            };
          };
        }>;
      }>;
    }>;
  };
};

export type SpaceMembershipFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      tagline?: string | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
    };
  };
  community: {
    __typename?: 'Community';
    id: string;
    roleSet: { __typename?: 'RoleSet'; id: string; myRoles: Array<RoleName> };
  };
};

export type MyResourcesQueryVariables = Exact<{
  accountId: Scalars['UUID']['input'];
}>;

export type MyResourcesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    account?:
      | {
          __typename?: 'Account';
          id: string;
          spaces: Array<{
            __typename?: 'Space';
            id: string;
            level: SpaceLevel;
            about: {
              __typename?: 'SpaceAbout';
              isContentPublic: boolean;
              id: string;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                description?: string | undefined;
                url: string;
                tagline?: string | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                cardBanner?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                tagset?:
                  | {
                      __typename?: 'Tagset';
                      id: string;
                      name: string;
                      tags: Array<string>;
                      allowedValues: Array<string>;
                      type: TagsetType;
                    }
                  | undefined;
              };
            };
          }>;
          virtualContributors: Array<{
            __typename?: 'VirtualContributor';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
          innovationPacks: Array<{
            __typename?: 'InnovationPack';
            id: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
          innovationHubs: Array<{
            __typename?: 'InnovationHub';
            id: string;
            subdomain: string;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              banner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
          }>;
        }
      | undefined;
  };
};

export type ShortAccountItemFragment = {
  __typename?: 'Profile';
  id: string;
  displayName: string;
  url: string;
  avatar?:
    | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
    | undefined;
};

export type CreateVirtualContributorOnAccountMutationVariables = Exact<{
  virtualContributorData: CreateVirtualContributorOnAccountInput;
}>;

export type CreateVirtualContributorOnAccountMutation = {
  __typename?: 'Mutation';
  createVirtualContributor: {
    __typename?: 'VirtualContributor';
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      url: string;
      avatar?: { __typename?: 'Visual'; id: string } | undefined;
    };
    knowledgeBase?:
      | {
          __typename?: 'KnowledgeBase';
          id: string;
          calloutsSet: {
            __typename?: 'CalloutsSet';
            id: string;
            callouts: Array<{
              __typename?: 'Callout';
              id: string;
              framing: {
                __typename?: 'CalloutFraming';
                id: string;
                profile: { __typename?: 'Profile'; id: string; displayName: string; description?: string | undefined };
              };
            }>;
          };
        }
      | undefined;
  };
};

export type DeleteVirtualContributorOnAccountMutationVariables = Exact<{
  virtualContributorData: DeleteVirtualContributorInput;
}>;

export type DeleteVirtualContributorOnAccountMutation = {
  __typename?: 'Mutation';
  deleteVirtualContributor: { __typename?: 'VirtualContributor'; id: string };
};

export type NewVirtualContributorMySpacesQueryVariables = Exact<{ [key: string]: never }>;

export type NewVirtualContributorMySpacesQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    id: string;
    user?:
      | {
          __typename?: 'User';
          id: string;
          account?:
            | {
                __typename?: 'Account';
                id: string;
                host?:
                  | { __typename?: 'Organization'; id: string }
                  | { __typename?: 'User'; id: string }
                  | { __typename?: 'VirtualContributor'; id: string }
                  | undefined;
                spaces: Array<{
                  __typename?: 'Space';
                  id: string;
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                  license: {
                    __typename?: 'License';
                    id: string;
                    availableEntitlements?: Array<LicenseEntitlementType> | undefined;
                  };
                  about: {
                    __typename?: 'SpaceAbout';
                    id: string;
                    isContentPublic: boolean;
                    profile: {
                      __typename?: 'Profile';
                      id: string;
                      displayName: string;
                      url: string;
                      tagline?: string | undefined;
                      description?: string | undefined;
                      tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                      avatar?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                      cardBanner?:
                        | {
                            __typename?: 'Visual';
                            id: string;
                            uri: string;
                            name: string;
                            alternativeText?: string | undefined;
                          }
                        | undefined;
                    };
                    membership: {
                      __typename?: 'SpaceAboutMembership';
                      myMembershipStatus?: CommunityMembershipStatus | undefined;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      communityID: string;
                      roleSetID: string;
                    };
                    guidelines: { __typename?: 'CommunityGuidelines'; id: string };
                  };
                  community: {
                    __typename?: 'Community';
                    id: string;
                    roleSet: {
                      __typename?: 'RoleSet';
                      id: string;
                      authorization?:
                        | {
                            __typename?: 'Authorization';
                            id: string;
                            myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                          }
                        | undefined;
                    };
                  };
                }>;
              }
            | undefined;
        }
      | undefined;
  };
};

export type AllSpaceSubspacesQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type AllSpaceSubspacesQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          subspaces: Array<{
            __typename?: 'Space';
            id: string;
            subspaces: Array<{
              __typename?: 'Space';
              id: string;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
              about: {
                __typename?: 'SpaceAbout';
                id: string;
                isContentPublic: boolean;
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  url: string;
                  tagline?: string | undefined;
                  description?: string | undefined;
                  tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                  avatar?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                };
                membership: {
                  __typename?: 'SpaceAboutMembership';
                  myMembershipStatus?: CommunityMembershipStatus | undefined;
                  myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                  communityID: string;
                  roleSetID: string;
                };
                guidelines: { __typename?: 'CommunityGuidelines'; id: string };
              };
              community: {
                __typename?: 'Community';
                id: string;
                roleSet: {
                  __typename?: 'RoleSet';
                  id: string;
                  authorization?:
                    | {
                        __typename?: 'Authorization';
                        id: string;
                        myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                      }
                    | undefined;
                };
              };
            }>;
            authorization?:
              | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
              | undefined;
            about: {
              __typename?: 'SpaceAbout';
              id: string;
              isContentPublic: boolean;
              profile: {
                __typename?: 'Profile';
                id: string;
                displayName: string;
                url: string;
                tagline?: string | undefined;
                description?: string | undefined;
                tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
                avatar?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
                cardBanner?:
                  | {
                      __typename?: 'Visual';
                      id: string;
                      uri: string;
                      name: string;
                      alternativeText?: string | undefined;
                    }
                  | undefined;
              };
              membership: {
                __typename?: 'SpaceAboutMembership';
                myMembershipStatus?: CommunityMembershipStatus | undefined;
                myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                communityID: string;
                roleSetID: string;
              };
              guidelines: { __typename?: 'CommunityGuidelines'; id: string };
            };
            community: {
              __typename?: 'Community';
              id: string;
              roleSet: {
                __typename?: 'RoleSet';
                id: string;
                authorization?:
                  | {
                      __typename?: 'Authorization';
                      id: string;
                      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
                    }
                  | undefined;
              };
            };
          }>;
        }
      | undefined;
  };
};

export type SpaceProfileCommunityDetailsFragment = {
  __typename?: 'Space';
  id: string;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  about: {
    __typename?: 'SpaceAbout';
    id: string;
    isContentPublic: boolean;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      url: string;
      tagline?: string | undefined;
      description?: string | undefined;
      tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
    };
    membership: {
      __typename?: 'SpaceAboutMembership';
      myMembershipStatus?: CommunityMembershipStatus | undefined;
      myPrivileges?: Array<AuthorizationPrivilege> | undefined;
      communityID: string;
      roleSetID: string;
    };
    guidelines: { __typename?: 'CommunityGuidelines'; id: string };
  };
  community: {
    __typename?: 'Community';
    id: string;
    roleSet: {
      __typename?: 'RoleSet';
      id: string;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
    };
  };
};

export type RecentSpacesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Float']['input']>;
}>;

export type RecentSpacesQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    mySpaces: Array<{
      __typename?: 'MySpaceResults';
      space: {
        __typename: 'Space';
        id: string;
        level: SpaceLevel;
        about: {
          __typename?: 'SpaceAbout';
          isContentPublic: boolean;
          id: string;
          membership: {
            __typename?: 'SpaceAboutMembership';
            myMembershipStatus?: CommunityMembershipStatus | undefined;
          };
          profile: {
            __typename?: 'Profile';
            id: string;
            displayName: string;
            description?: string | undefined;
            url: string;
            tagline?: string | undefined;
            cardBanner?:
              | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
              | undefined;
            tagset?:
              | {
                  __typename?: 'Tagset';
                  id: string;
                  name: string;
                  tags: Array<string>;
                  allowedValues: Array<string>;
                  type: TagsetType;
                }
              | undefined;
          };
        };
      };
    }>;
  };
};

export type MySpacesExplorerPageQueryVariables = Exact<{ [key: string]: never }>;

export type MySpacesExplorerPageQuery = {
  __typename?: 'Query';
  me: {
    __typename?: 'MeQueryResults';
    spaceMembershipsFlat: Array<{
      __typename?: 'CommunityMembershipResult';
      id: string;
      space: { __typename?: 'Space'; id: string };
    }>;
  };
};

export type SpaceExplorerSearchQueryVariables = Exact<{
  searchData: SearchInput;
}>;

export type SpaceExplorerSearchQuery = {
  __typename?: 'Query';
  search: {
    __typename?: 'ISearchResults';
    spaceResults: {
      __typename?: 'ISearchCategoryResult';
      cursor?: string | undefined;
      total: number;
      results: Array<
        | { __typename?: 'SearchResultCallout'; score: number; terms: Array<string>; type: SearchResultType }
        | { __typename?: 'SearchResultOrganization'; score: number; terms: Array<string>; type: SearchResultType }
        | { __typename?: 'SearchResultPost'; score: number; terms: Array<string>; type: SearchResultType }
        | {
            __typename?: 'SearchResultSpace';
            score: number;
            terms: Array<string>;
            type: SearchResultType;
            space: {
              __typename?: 'Space';
              id: string;
              level: SpaceLevel;
              visibility: SpaceVisibility;
              authorization?:
                | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
                | undefined;
              about: {
                __typename?: 'SpaceAbout';
                why?: string | undefined;
                isContentPublic: boolean;
                id: string;
                membership: {
                  __typename?: 'SpaceAboutMembership';
                  myMembershipStatus?: CommunityMembershipStatus | undefined;
                };
                profile: {
                  __typename?: 'Profile';
                  id: string;
                  displayName: string;
                  description?: string | undefined;
                  url: string;
                  tagline?: string | undefined;
                  cardBanner?:
                    | {
                        __typename?: 'Visual';
                        id: string;
                        uri: string;
                        name: string;
                        alternativeText?: string | undefined;
                      }
                    | undefined;
                  tagset?:
                    | {
                        __typename?: 'Tagset';
                        id: string;
                        name: string;
                        tags: Array<string>;
                        allowedValues: Array<string>;
                        type: TagsetType;
                      }
                    | undefined;
                };
              };
            };
          }
        | { __typename?: 'SearchResultUser'; score: number; terms: Array<string>; type: SearchResultType }
      >;
    };
  };
};

export type SpaceExplorerSearchSpaceFragment = {
  __typename?: 'SearchResultSpace';
  space: {
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    visibility: SpaceVisibility;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    about: {
      __typename?: 'SpaceAbout';
      why?: string | undefined;
      isContentPublic: boolean;
      id: string;
      membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        tagline?: string | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
      };
    };
  };
};

export type SpaceExplorerMemberSpacesQueryVariables = Exact<{
  spaceIDs?: InputMaybe<Array<Scalars['UUID']['input']> | Scalars['UUID']['input']>;
}>;

export type SpaceExplorerMemberSpacesQuery = {
  __typename?: 'Query';
  spaces: Array<{
    __typename?: 'Space';
    id: string;
    level: SpaceLevel;
    visibility: SpaceVisibility;
    subspaces: Array<{
      __typename?: 'Space';
      id: string;
      level: SpaceLevel;
      about: {
        __typename?: 'SpaceAbout';
        why?: string | undefined;
        isContentPublic: boolean;
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          description?: string | undefined;
          url: string;
          tagline?: string | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          cardBanner?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          tagset?:
            | {
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }
            | undefined;
        };
        membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
      };
    }>;
    authorization?:
      | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
      | undefined;
    about: {
      __typename?: 'SpaceAbout';
      why?: string | undefined;
      isContentPublic: boolean;
      id: string;
      membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
      profile: {
        __typename?: 'Profile';
        id: string;
        displayName: string;
        description?: string | undefined;
        url: string;
        tagline?: string | undefined;
        cardBanner?:
          | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
          | undefined;
        tagset?:
          | {
              __typename?: 'Tagset';
              id: string;
              name: string;
              tags: Array<string>;
              allowedValues: Array<string>;
              type: TagsetType;
            }
          | undefined;
      };
    };
  }>;
};

export type SpaceExplorerAllSpacesQueryVariables = Exact<{
  first: Scalars['Int']['input'];
  after?: InputMaybe<Scalars['UUID']['input']>;
  visibilities?: InputMaybe<Array<SpaceVisibility> | SpaceVisibility>;
}>;

export type SpaceExplorerAllSpacesQuery = {
  __typename?: 'Query';
  spacesPaginated: {
    __typename?: 'PaginatedSpaces';
    spaces: Array<{
      __typename?: 'Space';
      id: string;
      level: SpaceLevel;
      visibility: SpaceVisibility;
      authorization?:
        | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
        | undefined;
      about: {
        __typename?: 'SpaceAbout';
        why?: string | undefined;
        isContentPublic: boolean;
        id: string;
        membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          description?: string | undefined;
          url: string;
          tagline?: string | undefined;
          cardBanner?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          tagset?:
            | {
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }
            | undefined;
        };
      };
    }>;
    pageInfo: {
      __typename?: 'PageInfo';
      startCursor?: string | undefined;
      endCursor?: string | undefined;
      hasNextPage: boolean;
    };
  };
};

export type SpaceExplorerSubspacesQueryVariables = Exact<{
  IDs?: InputMaybe<Array<Scalars['UUID']['input']> | Scalars['UUID']['input']>;
}>;

export type SpaceExplorerSubspacesQuery = {
  __typename?: 'Query';
  spaces: Array<{
    __typename?: 'Space';
    id: string;
    subspaces: Array<{
      __typename?: 'Space';
      id: string;
      level: SpaceLevel;
      about: {
        __typename?: 'SpaceAbout';
        why?: string | undefined;
        isContentPublic: boolean;
        id: string;
        profile: {
          __typename?: 'Profile';
          id: string;
          displayName: string;
          description?: string | undefined;
          url: string;
          tagline?: string | undefined;
          avatar?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          cardBanner?:
            | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
            | undefined;
          tagset?:
            | {
                __typename?: 'Tagset';
                id: string;
                name: string;
                tags: Array<string>;
                allowedValues: Array<string>;
                type: TagsetType;
              }
            | undefined;
        };
        membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
      };
    }>;
  }>;
};

export type SpaceExplorerSpaceFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  visibility: SpaceVisibility;
  authorization?:
    | { __typename?: 'Authorization'; id: string; myPrivileges?: Array<AuthorizationPrivilege> | undefined }
    | undefined;
  about: {
    __typename?: 'SpaceAbout';
    why?: string | undefined;
    isContentPublic: boolean;
    id: string;
    membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      tagline?: string | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
    };
  };
};

export type SpaceExplorerSubspaceFragment = {
  __typename?: 'Space';
  id: string;
  level: SpaceLevel;
  about: {
    __typename?: 'SpaceAbout';
    why?: string | undefined;
    isContentPublic: boolean;
    id: string;
    profile: {
      __typename?: 'Profile';
      id: string;
      displayName: string;
      description?: string | undefined;
      url: string;
      tagline?: string | undefined;
      avatar?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      cardBanner?:
        | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
        | undefined;
      tagset?:
        | {
            __typename?: 'Tagset';
            id: string;
            name: string;
            tags: Array<string>;
            allowedValues: Array<string>;
            type: TagsetType;
          }
        | undefined;
    };
    membership: { __typename?: 'SpaceAboutMembership'; myMembershipStatus?: CommunityMembershipStatus | undefined };
  };
};

export type SpaceExplorerWelcomeSpaceQueryVariables = Exact<{
  spaceId: Scalars['UUID']['input'];
}>;

export type SpaceExplorerWelcomeSpaceQuery = {
  __typename?: 'Query';
  lookup: {
    __typename?: 'LookupQueryResults';
    space?:
      | {
          __typename?: 'Space';
          id: string;
          level: SpaceLevel;
          about: {
            __typename?: 'SpaceAbout';
            id: string;
            isContentPublic: boolean;
            profile: {
              __typename?: 'Profile';
              id: string;
              displayName: string;
              url: string;
              tagline?: string | undefined;
              description?: string | undefined;
              tagset?: { __typename?: 'Tagset'; id: string; tags: Array<string> } | undefined;
              avatar?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
              cardBanner?:
                | { __typename?: 'Visual'; id: string; uri: string; name: string; alternativeText?: string | undefined }
                | undefined;
            };
            membership: {
              __typename?: 'SpaceAboutMembership';
              myMembershipStatus?: CommunityMembershipStatus | undefined;
              myPrivileges?: Array<AuthorizationPrivilege> | undefined;
              communityID: string;
              roleSetID: string;
            };
            guidelines: { __typename?: 'CommunityGuidelines'; id: string };
          };
        }
      | undefined;
  };
};
